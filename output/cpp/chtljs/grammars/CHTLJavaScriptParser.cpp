
// Generated from grammars/CHTLJavaScript.g4 by ANTLR 4.13.1


#include "CHTLJavaScriptListener.h"

#include "CHTLJavaScriptParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct CHTLJavaScriptParserStaticData final {
  CHTLJavaScriptParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CHTLJavaScriptParserStaticData(const CHTLJavaScriptParserStaticData&) = delete;
  CHTLJavaScriptParserStaticData(CHTLJavaScriptParserStaticData&&) = delete;
  CHTLJavaScriptParserStaticData& operator=(const CHTLJavaScriptParserStaticData&) = delete;
  CHTLJavaScriptParserStaticData& operator=(CHTLJavaScriptParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag chtljavascriptParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CHTLJavaScriptParserStaticData *chtljavascriptParserStaticData = nullptr;

void chtljavascriptParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (chtljavascriptParserStaticData != nullptr) {
    return;
  }
#else
  assert(chtljavascriptParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CHTLJavaScriptParserStaticData>(
    std::vector<std::string>{
      "primaryExpression", "chtlSelector", "selectorExpression", "selectorIdentifier", 
      "selectorIndex", "complexSelector", "selectorPart", "memberExpression", 
      "callExpression", "animateCall", "listenConfig", "eventHandlerList", 
      "eventHandler", "delegateConfig", "delegateProperty", "selectorArray", 
      "animateConfig", "animateProperty", "cssBlock", "cssProperty", "propertyName", 
      "propertyValue", "cssFunction", "cssFunctionArguments", "whenArray", 
      "whenItem", "whenProperty", "literal", "program", "sourceElements", 
      "sourceElement", "declaration", "hoistableDeclaration", "functionDeclaration", 
      "generatorDeclaration", "asyncFunctionDeclaration", "asyncGeneratorDeclaration", 
      "classDeclaration", "classExtends", "classBody", "classElement", "methodDefinition", 
      "fieldDefinition", "lexicalDeclaration", "letOrConst", "bindingList", 
      "lexicalBinding", "statement", "blockStatement", "statementList", 
      "variableStatement", "variableDeclarationList", "variableDeclaration", 
      "emptyStatement", "expressionStatement", "ifStatement", "iterationStatement", 
      "doWhileStatement", "whileStatement", "forStatement", "forInit", "forInStatement", 
      "forOfStatement", "forInBinding", "continueStatement", "breakStatement", 
      "returnStatement", "withStatement", "labelledStatement", "switchStatement", 
      "caseClause", "defaultClause", "throwStatement", "tryStatement", "catchClause", 
      "catchParameter", "finallyClause", "debuggerStatement", "importStatement", 
      "importClause", "importedDefaultBinding", "namespaceImport", "namedImports", 
      "importsList", "importSpecifier", "moduleSpecifier", "exportStatement", 
      "exportClause", "exportsList", "exportSpecifier", "expression", "assignmentExpression", 
      "assignmentOperator", "conditionalExpression", "coalesceExpression", 
      "logicalORExpression", "logicalANDExpression", "bitwiseORExpression", 
      "bitwiseXORExpression", "bitwiseANDExpression", "equalityExpression", 
      "relationalExpression", "shiftExpression", "additiveExpression", "multiplicativeExpression", 
      "exponentiationExpression", "unaryExpression", "updateExpression", 
      "leftHandSideExpression", "newExpression", "superCall", "importCall", 
      "arguments", "argumentList", "argument", "metaProperty", "parenthesizedExpression", 
      "nullLiteral", "booleanLiteral", "numericLiteral", "stringLiteral", 
      "arrayLiteral", "elementList", "arrayElement", "objectLiteral", "propertyDefinitionList", 
      "propertyDefinition", "functionExpression", "generatorExpression", 
      "asyncFunctionExpression", "asyncGeneratorExpression", "classExpression", 
      "arrowFunction", "asyncArrowFunction", "arrowParameters", "arrowBody", 
      "yieldExpression", "templateLiteral", "templateSpans", "templateSpan", 
      "templateMiddle", "regularExpressionLiteral", "formalParameterList", 
      "formalParameter", "restParameter", "bindingElement", "bindingPattern", 
      "objectBindingPattern", "bindingPropertyList", "bindingProperty", 
      "arrayBindingPattern", "bindingElementList", "bindingElision", "functionBody", 
      "initializer", "bindingIdentifier", "identifier", "identifierName", 
      "reservedWord", "keyword", "futureReservedWord"
    },
    std::vector<std::string>{
      "", "'this'", "'{{'", "'}}'", "'.'", "'#'", "'['", "']'", "'super'", 
      "'new'", "'\\u003F.'", "'listen'", "'('", "')'", "'delegate'", "'animate'", 
      "'{'", "'}'", "','", "':'", "'target'", "'duration'", "'easing'", 
      "'begin'", "'when'", "'end'", "'loop'", "'-1'", "'direction'", "'delay'", 
      "'callback'", "';'", "'-'", "'at'", "'function'", "'*'", "'async'", 
      "'class'", "'extends'", "'static'", "'get'", "'set'", "'let'", "'const'", 
      "'var'", "'if'", "'else'", "'do'", "'while'", "'for'", "'in'", "'await'", 
      "'of'", "'continue'", "'break'", "'return'", "'with'", "'switch'", 
      "'case'", "'default'", "'throw'", "'try'", "'catch'", "'finally'", 
      "'debugger'", "'import'", "'from'", "'as'", "'export'", "'='", "'*='", 
      "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='", "'&='", 
      "'^='", "'|='", "'**='", "'&&='", "'||='", "'\\u003F\\u003F='", "'\\u003F'", 
      "'\\u003F\\u003F'", "'||'", "'&&'", "'|'", "'^'", "'&'", "'=='", "'!='", 
      "'==='", "'!=='", "'<'", "'>'", "'<='", "'>='", "'instanceof'", "'<<'", 
      "'>>'", "'>>>'", "'+'", "'/'", "'%'", "'**'", "'delete'", "'void'", 
      "'typeof'", "'~'", "'!'", "'++'", "'--'", "'...'", "'meta'", "'null'", 
      "'true'", "'false'", "'=>'", "'yield'", "'`'", "'enum'", "'implements'", 
      "'interface'", "'package'", "'private'", "'protected'", "'public'", 
      "'->'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "ARROW", "NUMBER", "IDENTIFIER", 
      "STRING_LITERAL", "WS", "UnquotedLiteral", "UnquotedIdentifier", "DECIMAL_LITERAL", 
      "BINARY_LITERAL", "OCTAL_LITERAL", "HEX_LITERAL", "TEMPLATE_STRING_LITERAL", 
      "TEMPLATE_STRING_START", "TEMPLATE_STRING_MIDDLE", "TEMPLATE_STRING_END", 
      "REGEX_LITERAL", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "LINE_TERMINATOR", 
      "DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2", 
      "BinaryIntegerLiteral", "BooleanLiteral", "StringLiteral", "NullLiteral"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,156,1702,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
  	1,0,1,0,1,0,1,0,3,0,337,8,0,1,1,1,1,1,1,1,1,1,2,1,2,3,2,345,8,2,1,2,1,
  	2,1,2,1,2,1,2,1,2,3,2,353,8,2,1,2,3,2,356,8,2,1,3,1,3,1,4,1,4,1,4,1,4,
  	1,5,1,5,1,5,4,5,367,8,5,11,5,12,5,368,1,6,1,6,1,6,1,6,1,6,3,6,376,8,6,
  	1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,393,8,
  	7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
  	1,7,1,7,1,7,1,7,1,7,5,7,417,8,7,10,7,12,7,420,9,7,1,8,1,8,1,8,1,8,1,8,
  	1,8,1,8,3,8,429,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
  	8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
  	1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,469,8,8,10,8,12,8,472,9,8,1,9,1,9,
  	1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,5,11,486,8,11,10,11,12,
  	11,489,9,11,1,12,1,12,1,12,1,12,1,12,3,12,496,8,12,1,13,1,13,1,13,1,13,
  	5,13,502,8,13,10,13,12,13,505,9,13,1,13,1,13,1,14,1,14,1,14,1,14,3,14,
  	513,8,14,1,14,3,14,516,8,14,1,15,1,15,1,15,1,15,5,15,522,8,15,10,15,12,
  	15,525,9,15,1,15,1,15,1,16,1,16,1,16,1,16,5,16,533,8,16,10,16,12,16,536,
  	9,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
  	1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
  	1,17,1,17,1,17,1,17,3,17,569,8,17,3,17,571,8,17,1,18,1,18,5,18,575,8,
  	18,10,18,12,18,578,9,18,1,18,1,18,1,19,1,19,1,19,1,19,3,19,586,8,19,1,
  	20,1,20,1,20,5,20,591,8,20,10,20,12,20,594,9,20,1,21,1,21,1,21,1,21,3,
  	21,600,8,21,1,22,1,22,1,22,3,22,605,8,22,1,22,1,22,1,23,1,23,1,23,5,23,
  	612,8,23,10,23,12,23,615,9,23,1,24,1,24,1,24,1,24,5,24,621,8,24,10,24,
  	12,24,624,9,24,1,24,1,24,1,25,1,25,1,25,1,25,5,25,632,8,25,10,25,12,25,
  	635,9,25,1,25,1,25,1,26,1,26,1,26,1,26,3,26,643,8,26,1,27,1,27,1,28,3,
  	28,648,8,28,1,28,1,28,1,29,4,29,653,8,29,11,29,12,29,654,1,30,1,30,3,
  	30,659,8,30,1,31,1,31,1,31,3,31,664,8,31,1,32,1,32,1,32,1,32,3,32,670,
  	8,32,1,33,1,33,1,33,1,33,3,33,676,8,33,1,33,1,33,1,33,1,33,1,33,1,34,
  	1,34,1,34,1,34,1,34,3,34,688,8,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,
  	1,35,1,35,1,35,3,35,700,8,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,
  	1,36,1,36,1,36,3,36,713,8,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,
  	3,37,723,8,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,39,5,39,733,8,39,10,
  	39,12,39,736,9,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,745,8,40,1,
  	41,1,41,1,41,3,41,750,8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
  	41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
  	41,1,41,1,41,1,41,3,41,778,8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
  	41,1,41,3,41,789,8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
  	41,3,41,801,8,41,1,41,1,41,1,41,1,41,1,41,3,41,808,8,41,1,42,1,42,3,42,
  	812,8,42,1,43,1,43,1,43,1,43,1,44,1,44,1,45,1,45,1,45,5,45,823,8,45,10,
  	45,12,45,826,9,45,1,46,1,46,3,46,830,8,46,1,46,1,46,1,46,3,46,835,8,46,
  	1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
  	1,47,1,47,1,47,3,47,854,8,47,1,48,1,48,3,48,858,8,48,1,48,1,48,1,49,4,
  	49,863,8,49,11,49,12,49,864,1,50,1,50,1,50,1,50,1,51,1,51,1,51,5,51,874,
  	8,51,10,51,12,51,877,9,51,1,52,1,52,3,52,881,8,52,1,52,1,52,1,52,3,52,
  	886,8,52,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
  	3,55,900,8,55,1,56,1,56,1,56,1,56,1,56,3,56,907,8,56,1,57,1,57,1,57,1,
  	57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,3,
  	59,926,8,59,1,59,1,59,3,59,930,8,59,1,59,1,59,3,59,934,8,59,1,59,1,59,
  	1,59,1,60,1,60,1,60,1,60,3,60,943,8,60,1,61,1,61,1,61,1,61,1,61,1,61,
  	1,61,1,61,1,62,1,62,3,62,955,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
  	1,63,1,63,1,63,1,63,1,63,3,63,969,8,63,1,63,1,63,1,63,1,63,1,63,1,63,
  	1,63,1,63,1,63,1,63,3,63,981,8,63,1,64,1,64,3,64,985,8,64,1,64,1,64,1,
  	65,1,65,3,65,991,8,65,1,65,1,65,1,66,1,66,3,66,997,8,66,1,66,1,66,1,67,
  	1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,
  	1,69,5,69,1017,8,69,10,69,12,69,1020,9,69,1,69,3,69,1023,8,69,1,69,5,
  	69,1026,8,69,10,69,12,69,1029,9,69,1,69,1,69,1,70,1,70,1,70,1,70,3,70,
  	1037,8,70,1,71,1,71,1,71,3,71,1042,8,71,1,72,1,72,1,72,1,72,1,73,1,73,
  	1,73,3,73,1051,8,73,1,73,3,73,1054,8,73,1,73,1,73,1,73,1,73,3,73,1060,
  	8,73,1,74,1,74,1,74,1,74,1,74,3,74,1067,8,74,1,74,1,74,1,75,1,75,3,75,
  	1073,8,75,1,76,1,76,1,76,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,
  	1,78,1,78,1,78,1,78,3,78,1091,8,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
  	1,79,1,79,1,79,1,79,3,79,1104,8,79,1,80,1,80,1,81,1,81,1,81,1,81,1,82,
  	1,82,1,82,1,82,1,82,3,82,1117,8,82,1,82,1,82,3,82,1121,8,82,1,83,1,83,
  	1,83,5,83,1126,8,83,10,83,12,83,1129,9,83,1,84,1,84,1,84,1,84,1,84,3,
  	84,1136,8,84,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,
  	86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,
  	86,1,86,3,86,1165,8,86,1,87,1,87,1,87,1,87,1,87,3,87,1172,8,87,1,87,1,
  	87,1,87,1,87,1,87,1,87,3,87,1180,8,87,1,88,1,88,1,88,5,88,1185,8,88,10,
  	88,12,88,1188,9,88,1,89,1,89,1,89,1,89,1,89,3,89,1195,8,89,1,90,1,90,
  	1,90,5,90,1200,8,90,10,90,12,90,1203,9,90,1,91,1,91,1,91,1,91,1,91,1,
  	91,1,91,1,91,3,91,1213,8,91,1,92,1,92,1,93,1,93,1,93,1,93,1,93,1,93,3,
  	93,1223,8,93,1,94,1,94,1,94,3,94,1228,8,94,1,95,1,95,1,95,5,95,1233,8,
  	95,10,95,12,95,1236,9,95,1,96,1,96,1,96,5,96,1241,8,96,10,96,12,96,1244,
  	9,96,1,97,1,97,1,97,5,97,1249,8,97,10,97,12,97,1252,9,97,1,98,1,98,1,
  	98,5,98,1257,8,98,10,98,12,98,1260,9,98,1,99,1,99,1,99,5,99,1265,8,99,
  	10,99,12,99,1268,9,99,1,100,1,100,1,100,5,100,1273,8,100,10,100,12,100,
  	1276,9,100,1,101,1,101,1,101,5,101,1281,8,101,10,101,12,101,1284,9,101,
  	1,102,1,102,1,102,5,102,1289,8,102,10,102,12,102,1292,9,102,1,103,1,103,
  	1,103,5,103,1297,8,103,10,103,12,103,1300,9,103,1,104,1,104,1,104,5,104,
  	1305,8,104,10,104,12,104,1308,9,104,1,105,1,105,1,105,3,105,1313,8,105,
  	1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,
  	1,106,1,106,1,106,1,106,1,106,3,106,1332,8,106,1,107,1,107,1,107,1,107,
  	1,107,1,107,1,107,1,107,1,107,1,107,1,107,3,107,1345,8,107,1,108,1,108,
  	3,108,1349,8,108,1,109,1,109,1,109,3,109,1354,8,109,1,110,1,110,1,110,
  	1,111,1,111,1,111,1,111,1,111,1,112,1,112,3,112,1366,8,112,1,112,1,112,
  	1,113,1,113,1,113,5,113,1373,8,113,10,113,12,113,1376,9,113,1,114,1,114,
  	1,114,3,114,1381,8,114,1,115,1,115,1,115,1,115,1,115,1,115,3,115,1389,
  	8,115,1,116,1,116,1,116,1,116,1,117,1,117,1,118,1,118,1,119,1,119,1,120,
  	1,120,1,121,1,121,3,121,1405,8,121,1,121,1,121,1,122,1,122,1,122,5,122,
  	1412,8,122,10,122,12,122,1415,9,122,1,123,1,123,1,123,1,123,3,123,1421,
  	8,123,1,124,1,124,3,124,1425,8,124,1,124,1,124,1,124,1,124,1,124,1,124,
  	3,124,1433,8,124,1,125,1,125,1,125,5,125,1438,8,125,10,125,12,125,1441,
  	9,125,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,3,126,1451,8,126,
  	1,127,1,127,3,127,1455,8,127,1,127,1,127,3,127,1459,8,127,1,127,1,127,
  	1,127,1,127,1,127,1,128,1,128,1,128,3,128,1469,8,128,1,128,1,128,3,128,
  	1473,8,128,1,128,1,128,1,128,1,128,1,128,1,129,1,129,1,129,3,129,1483,
  	8,129,1,129,1,129,3,129,1487,8,129,1,129,1,129,1,129,1,129,1,129,1,130,
  	1,130,1,130,1,130,3,130,1498,8,130,1,130,1,130,3,130,1502,8,130,1,130,
  	1,130,1,130,1,130,1,130,1,131,1,131,3,131,1511,8,131,1,131,3,131,1514,
  	8,131,1,131,1,131,1,131,1,131,1,132,1,132,1,132,1,132,1,133,1,133,1,133,
  	1,133,1,133,1,134,1,134,1,134,3,134,1532,8,134,1,134,3,134,1535,8,134,
  	1,135,1,135,1,135,1,135,1,135,3,135,1542,8,135,1,136,1,136,1,136,1,136,
  	1,136,1,136,3,136,1550,8,136,1,137,1,137,3,137,1554,8,137,1,137,1,137,
  	1,138,4,138,1559,8,138,11,138,12,138,1560,1,139,1,139,1,139,1,139,5,139,
  	1567,8,139,10,139,12,139,1570,9,139,1,139,1,139,3,139,1574,8,139,1,140,
  	1,140,1,140,1,141,1,141,1,142,1,142,1,142,5,142,1584,8,142,10,142,12,
  	142,1587,9,142,1,142,1,142,3,142,1591,8,142,1,142,3,142,1594,8,142,1,
  	143,1,143,1,144,1,144,1,144,1,144,3,144,1602,8,144,1,145,1,145,3,145,
  	1606,8,145,1,145,1,145,3,145,1610,8,145,3,145,1612,8,145,1,146,1,146,
  	3,146,1616,8,146,1,147,1,147,3,147,1620,8,147,1,147,1,147,1,147,1,147,
  	1,147,1,147,3,147,1628,8,147,1,148,1,148,1,148,5,148,1633,8,148,10,148,
  	12,148,1636,9,148,1,149,1,149,1,149,1,149,1,149,1,149,1,149,3,149,1645,
  	8,149,1,150,1,150,3,150,1649,8,150,1,150,1,150,1,151,3,151,1654,8,151,
  	1,151,1,151,1,151,3,151,1659,8,151,1,151,5,151,1662,8,151,10,151,12,151,
  	1665,9,151,1,151,1,151,3,151,1669,8,151,3,151,1671,8,151,1,152,1,152,
  	1,153,3,153,1676,8,153,1,154,1,154,1,154,1,155,1,155,1,155,3,155,1684,
  	8,155,1,156,1,156,1,157,1,157,3,157,1690,8,157,1,158,1,158,1,158,1,158,
  	3,158,1696,8,158,1,159,1,159,1,160,1,160,1,160,0,2,14,16,161,0,2,4,6,
  	8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
  	56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
  	102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
  	138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
  	174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
  	210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,
  	246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
  	282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,
  	318,320,0,16,1,0,132,133,2,0,27,27,131,131,2,0,18,18,31,31,2,0,135,135,
  	149,156,1,0,42,43,1,0,69,84,1,0,92,95,2,0,50,50,96,100,1,0,101,103,2,
  	0,32,32,104,104,2,0,35,35,105,106,1,0,118,119,1,0,137,140,3,0,51,51,121,
  	121,132,132,10,0,1,1,8,9,34,34,36,39,42,51,53,65,68,68,100,100,108,110,
  	121,121,1,0,123,129,1807,0,336,1,0,0,0,2,338,1,0,0,0,4,355,1,0,0,0,6,
  	357,1,0,0,0,8,359,1,0,0,0,10,363,1,0,0,0,12,375,1,0,0,0,14,392,1,0,0,
  	0,16,428,1,0,0,0,18,473,1,0,0,0,20,478,1,0,0,0,22,482,1,0,0,0,24,490,
  	1,0,0,0,26,497,1,0,0,0,28,515,1,0,0,0,30,517,1,0,0,0,32,528,1,0,0,0,34,
  	570,1,0,0,0,36,572,1,0,0,0,38,581,1,0,0,0,40,587,1,0,0,0,42,599,1,0,0,
  	0,44,601,1,0,0,0,46,608,1,0,0,0,48,616,1,0,0,0,50,627,1,0,0,0,52,642,
  	1,0,0,0,54,644,1,0,0,0,56,647,1,0,0,0,58,652,1,0,0,0,60,658,1,0,0,0,62,
  	663,1,0,0,0,64,669,1,0,0,0,66,671,1,0,0,0,68,682,1,0,0,0,70,694,1,0,0,
  	0,72,706,1,0,0,0,74,719,1,0,0,0,76,728,1,0,0,0,78,734,1,0,0,0,80,744,
  	1,0,0,0,82,807,1,0,0,0,84,809,1,0,0,0,86,813,1,0,0,0,88,817,1,0,0,0,90,
  	819,1,0,0,0,92,834,1,0,0,0,94,853,1,0,0,0,96,855,1,0,0,0,98,862,1,0,0,
  	0,100,866,1,0,0,0,102,870,1,0,0,0,104,885,1,0,0,0,106,887,1,0,0,0,108,
  	889,1,0,0,0,110,892,1,0,0,0,112,906,1,0,0,0,114,908,1,0,0,0,116,916,1,
  	0,0,0,118,922,1,0,0,0,120,942,1,0,0,0,122,944,1,0,0,0,124,952,1,0,0,0,
  	126,980,1,0,0,0,128,982,1,0,0,0,130,988,1,0,0,0,132,994,1,0,0,0,134,1000,
  	1,0,0,0,136,1006,1,0,0,0,138,1010,1,0,0,0,140,1032,1,0,0,0,142,1038,1,
  	0,0,0,144,1043,1,0,0,0,146,1059,1,0,0,0,148,1061,1,0,0,0,150,1072,1,0,
  	0,0,152,1074,1,0,0,0,154,1077,1,0,0,0,156,1090,1,0,0,0,158,1103,1,0,0,
  	0,160,1105,1,0,0,0,162,1107,1,0,0,0,164,1120,1,0,0,0,166,1122,1,0,0,0,
  	168,1135,1,0,0,0,170,1137,1,0,0,0,172,1164,1,0,0,0,174,1179,1,0,0,0,176,
  	1181,1,0,0,0,178,1194,1,0,0,0,180,1196,1,0,0,0,182,1212,1,0,0,0,184,1214,
  	1,0,0,0,186,1216,1,0,0,0,188,1224,1,0,0,0,190,1229,1,0,0,0,192,1237,1,
  	0,0,0,194,1245,1,0,0,0,196,1253,1,0,0,0,198,1261,1,0,0,0,200,1269,1,0,
  	0,0,202,1277,1,0,0,0,204,1285,1,0,0,0,206,1293,1,0,0,0,208,1301,1,0,0,
  	0,210,1309,1,0,0,0,212,1331,1,0,0,0,214,1344,1,0,0,0,216,1348,1,0,0,0,
  	218,1353,1,0,0,0,220,1355,1,0,0,0,222,1358,1,0,0,0,224,1363,1,0,0,0,226,
  	1369,1,0,0,0,228,1380,1,0,0,0,230,1388,1,0,0,0,232,1390,1,0,0,0,234,1394,
  	1,0,0,0,236,1396,1,0,0,0,238,1398,1,0,0,0,240,1400,1,0,0,0,242,1402,1,
  	0,0,0,244,1408,1,0,0,0,246,1420,1,0,0,0,248,1432,1,0,0,0,250,1434,1,0,
  	0,0,252,1450,1,0,0,0,254,1452,1,0,0,0,256,1465,1,0,0,0,258,1479,1,0,0,
  	0,260,1493,1,0,0,0,262,1508,1,0,0,0,264,1519,1,0,0,0,266,1523,1,0,0,0,
  	268,1534,1,0,0,0,270,1541,1,0,0,0,272,1549,1,0,0,0,274,1551,1,0,0,0,276,
  	1558,1,0,0,0,278,1573,1,0,0,0,280,1575,1,0,0,0,282,1578,1,0,0,0,284,1593,
  	1,0,0,0,286,1595,1,0,0,0,288,1601,1,0,0,0,290,1611,1,0,0,0,292,1615,1,
  	0,0,0,294,1627,1,0,0,0,296,1629,1,0,0,0,298,1644,1,0,0,0,300,1646,1,0,
  	0,0,302,1653,1,0,0,0,304,1672,1,0,0,0,306,1675,1,0,0,0,308,1677,1,0,0,
  	0,310,1683,1,0,0,0,312,1685,1,0,0,0,314,1689,1,0,0,0,316,1695,1,0,0,0,
  	318,1697,1,0,0,0,320,1699,1,0,0,0,322,337,5,1,0,0,323,337,3,312,156,0,
  	324,337,3,54,27,0,325,337,3,242,121,0,326,337,3,248,124,0,327,337,3,254,
  	127,0,328,337,3,262,131,0,329,337,3,256,128,0,330,337,3,258,129,0,331,
  	337,3,260,130,0,332,337,3,282,141,0,333,337,3,274,137,0,334,337,3,232,
  	116,0,335,337,3,2,1,0,336,322,1,0,0,0,336,323,1,0,0,0,336,324,1,0,0,0,
  	336,325,1,0,0,0,336,326,1,0,0,0,336,327,1,0,0,0,336,328,1,0,0,0,336,329,
  	1,0,0,0,336,330,1,0,0,0,336,331,1,0,0,0,336,332,1,0,0,0,336,333,1,0,0,
  	0,336,334,1,0,0,0,336,335,1,0,0,0,337,1,1,0,0,0,338,339,5,2,0,0,339,340,
  	3,4,2,0,340,341,5,3,0,0,341,3,1,0,0,0,342,344,3,6,3,0,343,345,3,8,4,0,
  	344,343,1,0,0,0,344,345,1,0,0,0,345,356,1,0,0,0,346,347,5,4,0,0,347,356,
  	3,6,3,0,348,349,5,5,0,0,349,356,3,6,3,0,350,352,3,6,3,0,351,353,3,8,4,
  	0,352,351,1,0,0,0,352,353,1,0,0,0,353,356,1,0,0,0,354,356,3,10,5,0,355,
  	342,1,0,0,0,355,346,1,0,0,0,355,348,1,0,0,0,355,350,1,0,0,0,355,354,1,
  	0,0,0,356,5,1,0,0,0,357,358,5,132,0,0,358,7,1,0,0,0,359,360,5,6,0,0,360,
  	361,5,131,0,0,361,362,5,7,0,0,362,9,1,0,0,0,363,366,3,12,6,0,364,365,
  	5,134,0,0,365,367,3,12,6,0,366,364,1,0,0,0,367,368,1,0,0,0,368,366,1,
  	0,0,0,368,369,1,0,0,0,369,11,1,0,0,0,370,371,5,4,0,0,371,376,3,6,3,0,
  	372,373,5,5,0,0,373,376,3,6,3,0,374,376,3,6,3,0,375,370,1,0,0,0,375,372,
  	1,0,0,0,375,374,1,0,0,0,376,13,1,0,0,0,377,378,6,7,-1,0,378,393,3,0,0,
  	0,379,380,5,8,0,0,380,381,5,6,0,0,381,382,3,180,90,0,382,383,5,7,0,0,
  	383,393,1,0,0,0,384,385,5,8,0,0,385,386,5,4,0,0,386,393,3,314,157,0,387,
  	393,3,230,115,0,388,389,5,9,0,0,389,390,3,14,7,0,390,391,3,224,112,0,
  	391,393,1,0,0,0,392,377,1,0,0,0,392,379,1,0,0,0,392,384,1,0,0,0,392,387,
  	1,0,0,0,392,388,1,0,0,0,393,418,1,0,0,0,394,395,10,10,0,0,395,396,5,6,
  	0,0,396,397,3,180,90,0,397,398,5,7,0,0,398,417,1,0,0,0,399,400,10,9,0,
  	0,400,401,5,4,0,0,401,417,3,314,157,0,402,403,10,8,0,0,403,404,5,130,
  	0,0,404,417,3,314,157,0,405,406,10,7,0,0,406,417,3,274,137,0,407,408,
  	10,2,0,0,408,409,5,10,0,0,409,417,3,314,157,0,410,411,10,1,0,0,411,412,
  	5,10,0,0,412,413,5,6,0,0,413,414,3,180,90,0,414,415,5,7,0,0,415,417,1,
  	0,0,0,416,394,1,0,0,0,416,399,1,0,0,0,416,402,1,0,0,0,416,405,1,0,0,0,
  	416,407,1,0,0,0,416,410,1,0,0,0,417,420,1,0,0,0,418,416,1,0,0,0,418,419,
  	1,0,0,0,419,15,1,0,0,0,420,418,1,0,0,0,421,422,6,8,-1,0,422,423,3,14,
  	7,0,423,424,3,224,112,0,424,429,1,0,0,0,425,429,3,220,110,0,426,429,3,
  	222,111,0,427,429,3,18,9,0,428,421,1,0,0,0,428,425,1,0,0,0,428,426,1,
  	0,0,0,428,427,1,0,0,0,429,470,1,0,0,0,430,431,10,10,0,0,431,469,3,224,
  	112,0,432,433,10,9,0,0,433,434,5,6,0,0,434,435,3,180,90,0,435,436,5,7,
  	0,0,436,469,1,0,0,0,437,438,10,8,0,0,438,439,5,4,0,0,439,469,3,314,157,
  	0,440,441,10,7,0,0,441,442,5,130,0,0,442,469,3,314,157,0,443,444,10,6,
  	0,0,444,469,3,274,137,0,445,446,10,5,0,0,446,447,5,10,0,0,447,469,3,314,
  	157,0,448,449,10,4,0,0,449,450,5,10,0,0,450,451,5,6,0,0,451,452,3,180,
  	90,0,452,453,5,7,0,0,453,469,1,0,0,0,454,455,10,3,0,0,455,456,5,130,0,
  	0,456,457,5,11,0,0,457,458,5,12,0,0,458,459,3,20,10,0,459,460,5,13,0,
  	0,460,469,1,0,0,0,461,462,10,2,0,0,462,463,5,130,0,0,463,464,5,14,0,0,
  	464,465,5,12,0,0,465,466,3,26,13,0,466,467,5,13,0,0,467,469,1,0,0,0,468,
  	430,1,0,0,0,468,432,1,0,0,0,468,437,1,0,0,0,468,440,1,0,0,0,468,443,1,
  	0,0,0,468,445,1,0,0,0,468,448,1,0,0,0,468,454,1,0,0,0,468,461,1,0,0,0,
  	469,472,1,0,0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,17,1,0,0,0,472,470,
  	1,0,0,0,473,474,5,15,0,0,474,475,5,12,0,0,475,476,3,32,16,0,476,477,5,
  	13,0,0,477,19,1,0,0,0,478,479,5,16,0,0,479,480,3,22,11,0,480,481,5,17,
  	0,0,481,21,1,0,0,0,482,487,3,24,12,0,483,484,5,18,0,0,484,486,3,24,12,
  	0,485,483,1,0,0,0,486,489,1,0,0,0,487,485,1,0,0,0,487,488,1,0,0,0,488,
  	23,1,0,0,0,489,487,1,0,0,0,490,491,5,132,0,0,491,495,5,19,0,0,492,496,
  	3,182,91,0,493,496,3,264,132,0,494,496,3,254,127,0,495,492,1,0,0,0,495,
  	493,1,0,0,0,495,494,1,0,0,0,496,25,1,0,0,0,497,498,5,16,0,0,498,503,3,
  	28,14,0,499,500,5,18,0,0,500,502,3,28,14,0,501,499,1,0,0,0,502,505,1,
  	0,0,0,503,501,1,0,0,0,503,504,1,0,0,0,504,506,1,0,0,0,505,503,1,0,0,0,
  	506,507,5,17,0,0,507,27,1,0,0,0,508,509,5,20,0,0,509,512,5,19,0,0,510,
  	513,3,2,1,0,511,513,3,30,15,0,512,510,1,0,0,0,512,511,1,0,0,0,513,516,
  	1,0,0,0,514,516,3,24,12,0,515,508,1,0,0,0,515,514,1,0,0,0,516,29,1,0,
  	0,0,517,518,5,6,0,0,518,523,3,2,1,0,519,520,5,18,0,0,520,522,3,2,1,0,
  	521,519,1,0,0,0,522,525,1,0,0,0,523,521,1,0,0,0,523,524,1,0,0,0,524,526,
  	1,0,0,0,525,523,1,0,0,0,526,527,5,7,0,0,527,31,1,0,0,0,528,529,5,16,0,
  	0,529,534,3,34,17,0,530,531,5,18,0,0,531,533,3,34,17,0,532,530,1,0,0,
  	0,533,536,1,0,0,0,534,532,1,0,0,0,534,535,1,0,0,0,535,537,1,0,0,0,536,
  	534,1,0,0,0,537,538,5,17,0,0,538,33,1,0,0,0,539,540,5,21,0,0,540,541,
  	5,19,0,0,541,571,5,131,0,0,542,543,5,22,0,0,543,544,5,19,0,0,544,571,
  	7,0,0,0,545,546,5,23,0,0,546,547,5,19,0,0,547,571,3,36,18,0,548,549,5,
  	24,0,0,549,550,5,19,0,0,550,571,3,48,24,0,551,552,5,25,0,0,552,553,5,
  	19,0,0,553,571,3,36,18,0,554,555,5,26,0,0,555,556,5,19,0,0,556,571,7,
  	1,0,0,557,558,5,28,0,0,558,559,5,19,0,0,559,571,7,0,0,0,560,561,5,29,
  	0,0,561,562,5,19,0,0,562,571,5,131,0,0,563,564,5,30,0,0,564,568,5,19,
  	0,0,565,569,3,182,91,0,566,569,3,264,132,0,567,569,3,254,127,0,568,565,
  	1,0,0,0,568,566,1,0,0,0,568,567,1,0,0,0,569,571,1,0,0,0,570,539,1,0,0,
  	0,570,542,1,0,0,0,570,545,1,0,0,0,570,548,1,0,0,0,570,551,1,0,0,0,570,
  	554,1,0,0,0,570,557,1,0,0,0,570,560,1,0,0,0,570,563,1,0,0,0,571,35,1,
  	0,0,0,572,576,5,16,0,0,573,575,3,38,19,0,574,573,1,0,0,0,575,578,1,0,
  	0,0,576,574,1,0,0,0,576,577,1,0,0,0,577,579,1,0,0,0,578,576,1,0,0,0,579,
  	580,5,17,0,0,580,37,1,0,0,0,581,582,3,40,20,0,582,583,5,19,0,0,583,585,
  	3,42,21,0,584,586,7,2,0,0,585,584,1,0,0,0,585,586,1,0,0,0,586,39,1,0,
  	0,0,587,592,5,132,0,0,588,589,5,32,0,0,589,591,5,132,0,0,590,588,1,0,
  	0,0,591,594,1,0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,593,41,1,0,0,0,594,
  	592,1,0,0,0,595,600,5,133,0,0,596,600,5,131,0,0,597,600,5,132,0,0,598,
  	600,3,44,22,0,599,595,1,0,0,0,599,596,1,0,0,0,599,597,1,0,0,0,599,598,
  	1,0,0,0,600,43,1,0,0,0,601,602,5,132,0,0,602,604,5,12,0,0,603,605,3,46,
  	23,0,604,603,1,0,0,0,604,605,1,0,0,0,605,606,1,0,0,0,606,607,5,13,0,0,
  	607,45,1,0,0,0,608,613,3,42,21,0,609,610,5,18,0,0,610,612,3,42,21,0,611,
  	609,1,0,0,0,612,615,1,0,0,0,613,611,1,0,0,0,613,614,1,0,0,0,614,47,1,
  	0,0,0,615,613,1,0,0,0,616,617,5,6,0,0,617,622,3,50,25,0,618,619,5,18,
  	0,0,619,621,3,50,25,0,620,618,1,0,0,0,621,624,1,0,0,0,622,620,1,0,0,0,
  	622,623,1,0,0,0,623,625,1,0,0,0,624,622,1,0,0,0,625,626,5,7,0,0,626,49,
  	1,0,0,0,627,628,5,16,0,0,628,633,3,52,26,0,629,630,5,18,0,0,630,632,3,
  	52,26,0,631,629,1,0,0,0,632,635,1,0,0,0,633,631,1,0,0,0,633,634,1,0,0,
  	0,634,636,1,0,0,0,635,633,1,0,0,0,636,637,5,17,0,0,637,51,1,0,0,0,638,
  	639,5,33,0,0,639,640,5,19,0,0,640,643,5,131,0,0,641,643,3,38,19,0,642,
  	638,1,0,0,0,642,641,1,0,0,0,643,53,1,0,0,0,644,645,7,3,0,0,645,55,1,0,
  	0,0,646,648,3,58,29,0,647,646,1,0,0,0,647,648,1,0,0,0,648,649,1,0,0,0,
  	649,650,5,0,0,1,650,57,1,0,0,0,651,653,3,60,30,0,652,651,1,0,0,0,653,
  	654,1,0,0,0,654,652,1,0,0,0,654,655,1,0,0,0,655,59,1,0,0,0,656,659,3,
  	94,47,0,657,659,3,62,31,0,658,656,1,0,0,0,658,657,1,0,0,0,659,61,1,0,
  	0,0,660,664,3,64,32,0,661,664,3,74,37,0,662,664,3,86,43,0,663,660,1,0,
  	0,0,663,661,1,0,0,0,663,662,1,0,0,0,664,63,1,0,0,0,665,670,3,66,33,0,
  	666,670,3,68,34,0,667,670,3,70,35,0,668,670,3,72,36,0,669,665,1,0,0,0,
  	669,666,1,0,0,0,669,667,1,0,0,0,669,668,1,0,0,0,670,65,1,0,0,0,671,672,
  	5,34,0,0,672,673,3,312,156,0,673,675,5,12,0,0,674,676,3,284,142,0,675,
  	674,1,0,0,0,675,676,1,0,0,0,676,677,1,0,0,0,677,678,5,13,0,0,678,679,
  	5,16,0,0,679,680,3,306,153,0,680,681,5,17,0,0,681,67,1,0,0,0,682,683,
  	5,34,0,0,683,684,5,35,0,0,684,685,3,312,156,0,685,687,5,12,0,0,686,688,
  	3,284,142,0,687,686,1,0,0,0,687,688,1,0,0,0,688,689,1,0,0,0,689,690,5,
  	13,0,0,690,691,5,16,0,0,691,692,3,306,153,0,692,693,5,17,0,0,693,69,1,
  	0,0,0,694,695,5,36,0,0,695,696,5,34,0,0,696,697,3,312,156,0,697,699,5,
  	12,0,0,698,700,3,284,142,0,699,698,1,0,0,0,699,700,1,0,0,0,700,701,1,
  	0,0,0,701,702,5,13,0,0,702,703,5,16,0,0,703,704,3,306,153,0,704,705,5,
  	17,0,0,705,71,1,0,0,0,706,707,5,36,0,0,707,708,5,34,0,0,708,709,5,35,
  	0,0,709,710,3,312,156,0,710,712,5,12,0,0,711,713,3,284,142,0,712,711,
  	1,0,0,0,712,713,1,0,0,0,713,714,1,0,0,0,714,715,5,13,0,0,715,716,5,16,
  	0,0,716,717,3,306,153,0,717,718,5,17,0,0,718,73,1,0,0,0,719,720,5,37,
  	0,0,720,722,3,312,156,0,721,723,3,76,38,0,722,721,1,0,0,0,722,723,1,0,
  	0,0,723,724,1,0,0,0,724,725,5,16,0,0,725,726,3,78,39,0,726,727,5,17,0,
  	0,727,75,1,0,0,0,728,729,5,38,0,0,729,730,3,216,108,0,730,77,1,0,0,0,
  	731,733,3,80,40,0,732,731,1,0,0,0,733,736,1,0,0,0,734,732,1,0,0,0,734,
  	735,1,0,0,0,735,79,1,0,0,0,736,734,1,0,0,0,737,745,3,82,41,0,738,739,
  	5,39,0,0,739,745,3,82,41,0,740,745,3,84,42,0,741,742,5,39,0,0,742,745,
  	3,84,42,0,743,745,5,31,0,0,744,737,1,0,0,0,744,738,1,0,0,0,744,740,1,
  	0,0,0,744,741,1,0,0,0,744,743,1,0,0,0,745,81,1,0,0,0,746,747,3,40,20,
  	0,747,749,5,12,0,0,748,750,3,284,142,0,749,748,1,0,0,0,749,750,1,0,0,
  	0,750,751,1,0,0,0,751,752,5,13,0,0,752,753,5,16,0,0,753,754,3,306,153,
  	0,754,755,5,17,0,0,755,808,1,0,0,0,756,757,5,40,0,0,757,758,3,40,20,0,
  	758,759,5,12,0,0,759,760,5,13,0,0,760,761,5,16,0,0,761,762,3,306,153,
  	0,762,763,5,17,0,0,763,808,1,0,0,0,764,765,5,41,0,0,765,766,3,40,20,0,
  	766,767,5,12,0,0,767,768,3,286,143,0,768,769,5,13,0,0,769,770,5,16,0,
  	0,770,771,3,306,153,0,771,772,5,17,0,0,772,808,1,0,0,0,773,774,5,36,0,
  	0,774,775,3,40,20,0,775,777,5,12,0,0,776,778,3,284,142,0,777,776,1,0,
  	0,0,777,778,1,0,0,0,778,779,1,0,0,0,779,780,5,13,0,0,780,781,5,16,0,0,
  	781,782,3,306,153,0,782,783,5,17,0,0,783,808,1,0,0,0,784,785,5,35,0,0,
  	785,786,3,40,20,0,786,788,5,12,0,0,787,789,3,284,142,0,788,787,1,0,0,
  	0,788,789,1,0,0,0,789,790,1,0,0,0,790,791,5,13,0,0,791,792,5,16,0,0,792,
  	793,3,306,153,0,793,794,5,17,0,0,794,808,1,0,0,0,795,796,5,36,0,0,796,
  	797,5,35,0,0,797,798,3,40,20,0,798,800,5,12,0,0,799,801,3,284,142,0,800,
  	799,1,0,0,0,800,801,1,0,0,0,801,802,1,0,0,0,802,803,5,13,0,0,803,804,
  	5,16,0,0,804,805,3,306,153,0,805,806,5,17,0,0,806,808,1,0,0,0,807,746,
  	1,0,0,0,807,756,1,0,0,0,807,764,1,0,0,0,807,773,1,0,0,0,807,784,1,0,0,
  	0,807,795,1,0,0,0,808,83,1,0,0,0,809,811,3,40,20,0,810,812,3,308,154,
  	0,811,810,1,0,0,0,811,812,1,0,0,0,812,85,1,0,0,0,813,814,3,88,44,0,814,
  	815,3,90,45,0,815,816,5,31,0,0,816,87,1,0,0,0,817,818,7,4,0,0,818,89,
  	1,0,0,0,819,824,3,92,46,0,820,821,5,18,0,0,821,823,3,92,46,0,822,820,
  	1,0,0,0,823,826,1,0,0,0,824,822,1,0,0,0,824,825,1,0,0,0,825,91,1,0,0,
  	0,826,824,1,0,0,0,827,829,3,310,155,0,828,830,3,308,154,0,829,828,1,0,
  	0,0,829,830,1,0,0,0,830,835,1,0,0,0,831,832,3,292,146,0,832,833,3,308,
  	154,0,833,835,1,0,0,0,834,827,1,0,0,0,834,831,1,0,0,0,835,93,1,0,0,0,
  	836,854,3,96,48,0,837,854,3,100,50,0,838,854,3,106,53,0,839,854,3,108,
  	54,0,840,854,3,110,55,0,841,854,3,112,56,0,842,854,3,128,64,0,843,854,
  	3,130,65,0,844,854,3,132,66,0,845,854,3,134,67,0,846,854,3,136,68,0,847,
  	854,3,138,69,0,848,854,3,144,72,0,849,854,3,146,73,0,850,854,3,154,77,
  	0,851,854,3,156,78,0,852,854,3,172,86,0,853,836,1,0,0,0,853,837,1,0,0,
  	0,853,838,1,0,0,0,853,839,1,0,0,0,853,840,1,0,0,0,853,841,1,0,0,0,853,
  	842,1,0,0,0,853,843,1,0,0,0,853,844,1,0,0,0,853,845,1,0,0,0,853,846,1,
  	0,0,0,853,847,1,0,0,0,853,848,1,0,0,0,853,849,1,0,0,0,853,850,1,0,0,0,
  	853,851,1,0,0,0,853,852,1,0,0,0,854,95,1,0,0,0,855,857,5,16,0,0,856,858,
  	3,98,49,0,857,856,1,0,0,0,857,858,1,0,0,0,858,859,1,0,0,0,859,860,5,17,
  	0,0,860,97,1,0,0,0,861,863,3,94,47,0,862,861,1,0,0,0,863,864,1,0,0,0,
  	864,862,1,0,0,0,864,865,1,0,0,0,865,99,1,0,0,0,866,867,5,44,0,0,867,868,
  	3,102,51,0,868,869,5,31,0,0,869,101,1,0,0,0,870,875,3,104,52,0,871,872,
  	5,18,0,0,872,874,3,104,52,0,873,871,1,0,0,0,874,877,1,0,0,0,875,873,1,
  	0,0,0,875,876,1,0,0,0,876,103,1,0,0,0,877,875,1,0,0,0,878,880,3,310,155,
  	0,879,881,3,308,154,0,880,879,1,0,0,0,880,881,1,0,0,0,881,886,1,0,0,0,
  	882,883,3,292,146,0,883,884,3,308,154,0,884,886,1,0,0,0,885,878,1,0,0,
  	0,885,882,1,0,0,0,886,105,1,0,0,0,887,888,5,31,0,0,888,107,1,0,0,0,889,
  	890,3,180,90,0,890,891,5,31,0,0,891,109,1,0,0,0,892,893,5,45,0,0,893,
  	894,5,12,0,0,894,895,3,180,90,0,895,896,5,13,0,0,896,899,3,94,47,0,897,
  	898,5,46,0,0,898,900,3,94,47,0,899,897,1,0,0,0,899,900,1,0,0,0,900,111,
  	1,0,0,0,901,907,3,114,57,0,902,907,3,116,58,0,903,907,3,118,59,0,904,
  	907,3,122,61,0,905,907,3,124,62,0,906,901,1,0,0,0,906,902,1,0,0,0,906,
  	903,1,0,0,0,906,904,1,0,0,0,906,905,1,0,0,0,907,113,1,0,0,0,908,909,5,
  	47,0,0,909,910,3,94,47,0,910,911,5,48,0,0,911,912,5,12,0,0,912,913,3,
  	180,90,0,913,914,5,13,0,0,914,915,5,31,0,0,915,115,1,0,0,0,916,917,5,
  	48,0,0,917,918,5,12,0,0,918,919,3,180,90,0,919,920,5,13,0,0,920,921,3,
  	94,47,0,921,117,1,0,0,0,922,923,5,49,0,0,923,925,5,12,0,0,924,926,3,120,
  	60,0,925,924,1,0,0,0,925,926,1,0,0,0,926,927,1,0,0,0,927,929,5,31,0,0,
  	928,930,3,180,90,0,929,928,1,0,0,0,929,930,1,0,0,0,930,931,1,0,0,0,931,
  	933,5,31,0,0,932,934,3,180,90,0,933,932,1,0,0,0,933,934,1,0,0,0,934,935,
  	1,0,0,0,935,936,5,13,0,0,936,937,3,94,47,0,937,119,1,0,0,0,938,943,3,
  	180,90,0,939,940,5,44,0,0,940,943,3,102,51,0,941,943,3,86,43,0,942,938,
  	1,0,0,0,942,939,1,0,0,0,942,941,1,0,0,0,943,121,1,0,0,0,944,945,5,49,
  	0,0,945,946,5,12,0,0,946,947,3,126,63,0,947,948,5,50,0,0,948,949,3,180,
  	90,0,949,950,5,13,0,0,950,951,3,94,47,0,951,123,1,0,0,0,952,954,5,49,
  	0,0,953,955,5,51,0,0,954,953,1,0,0,0,954,955,1,0,0,0,955,956,1,0,0,0,
  	956,957,5,12,0,0,957,958,3,126,63,0,958,959,5,52,0,0,959,960,3,180,90,
  	0,960,961,5,13,0,0,961,962,3,94,47,0,962,125,1,0,0,0,963,981,3,310,155,
  	0,964,981,3,292,146,0,965,966,5,44,0,0,966,968,3,310,155,0,967,969,3,
  	308,154,0,968,967,1,0,0,0,968,969,1,0,0,0,969,981,1,0,0,0,970,971,5,44,
  	0,0,971,972,3,292,146,0,972,973,3,308,154,0,973,981,1,0,0,0,974,975,3,
  	88,44,0,975,976,3,310,155,0,976,981,1,0,0,0,977,978,3,88,44,0,978,979,
  	3,292,146,0,979,981,1,0,0,0,980,963,1,0,0,0,980,964,1,0,0,0,980,965,1,
  	0,0,0,980,970,1,0,0,0,980,974,1,0,0,0,980,977,1,0,0,0,981,127,1,0,0,0,
  	982,984,5,53,0,0,983,985,3,312,156,0,984,983,1,0,0,0,984,985,1,0,0,0,
  	985,986,1,0,0,0,986,987,5,31,0,0,987,129,1,0,0,0,988,990,5,54,0,0,989,
  	991,3,312,156,0,990,989,1,0,0,0,990,991,1,0,0,0,991,992,1,0,0,0,992,993,
  	5,31,0,0,993,131,1,0,0,0,994,996,5,55,0,0,995,997,3,180,90,0,996,995,
  	1,0,0,0,996,997,1,0,0,0,997,998,1,0,0,0,998,999,5,31,0,0,999,133,1,0,
  	0,0,1000,1001,5,56,0,0,1001,1002,5,12,0,0,1002,1003,3,180,90,0,1003,1004,
  	5,13,0,0,1004,1005,3,94,47,0,1005,135,1,0,0,0,1006,1007,3,312,156,0,1007,
  	1008,5,19,0,0,1008,1009,3,94,47,0,1009,137,1,0,0,0,1010,1011,5,57,0,0,
  	1011,1012,5,12,0,0,1012,1013,3,180,90,0,1013,1014,5,13,0,0,1014,1018,
  	5,16,0,0,1015,1017,3,140,70,0,1016,1015,1,0,0,0,1017,1020,1,0,0,0,1018,
  	1016,1,0,0,0,1018,1019,1,0,0,0,1019,1022,1,0,0,0,1020,1018,1,0,0,0,1021,
  	1023,3,142,71,0,1022,1021,1,0,0,0,1022,1023,1,0,0,0,1023,1027,1,0,0,0,
  	1024,1026,3,140,70,0,1025,1024,1,0,0,0,1026,1029,1,0,0,0,1027,1025,1,
  	0,0,0,1027,1028,1,0,0,0,1028,1030,1,0,0,0,1029,1027,1,0,0,0,1030,1031,
  	5,17,0,0,1031,139,1,0,0,0,1032,1033,5,58,0,0,1033,1034,3,180,90,0,1034,
  	1036,5,19,0,0,1035,1037,3,98,49,0,1036,1035,1,0,0,0,1036,1037,1,0,0,0,
  	1037,141,1,0,0,0,1038,1039,5,59,0,0,1039,1041,5,19,0,0,1040,1042,3,98,
  	49,0,1041,1040,1,0,0,0,1041,1042,1,0,0,0,1042,143,1,0,0,0,1043,1044,5,
  	60,0,0,1044,1045,3,180,90,0,1045,1046,5,31,0,0,1046,145,1,0,0,0,1047,
  	1048,5,61,0,0,1048,1050,3,96,48,0,1049,1051,3,148,74,0,1050,1049,1,0,
  	0,0,1050,1051,1,0,0,0,1051,1053,1,0,0,0,1052,1054,3,152,76,0,1053,1052,
  	1,0,0,0,1053,1054,1,0,0,0,1054,1060,1,0,0,0,1055,1056,5,61,0,0,1056,1057,
  	3,96,48,0,1057,1058,3,152,76,0,1058,1060,1,0,0,0,1059,1047,1,0,0,0,1059,
  	1055,1,0,0,0,1060,147,1,0,0,0,1061,1066,5,62,0,0,1062,1063,5,12,0,0,1063,
  	1064,3,150,75,0,1064,1065,5,13,0,0,1065,1067,1,0,0,0,1066,1062,1,0,0,
  	0,1066,1067,1,0,0,0,1067,1068,1,0,0,0,1068,1069,3,96,48,0,1069,149,1,
  	0,0,0,1070,1073,3,310,155,0,1071,1073,3,292,146,0,1072,1070,1,0,0,0,1072,
  	1071,1,0,0,0,1073,151,1,0,0,0,1074,1075,5,63,0,0,1075,1076,3,96,48,0,
  	1076,153,1,0,0,0,1077,1078,5,64,0,0,1078,1079,5,31,0,0,1079,155,1,0,0,
  	0,1080,1081,5,65,0,0,1081,1082,3,158,79,0,1082,1083,5,66,0,0,1083,1084,
  	3,170,85,0,1084,1085,5,31,0,0,1085,1091,1,0,0,0,1086,1087,5,65,0,0,1087,
  	1088,3,170,85,0,1088,1089,5,31,0,0,1089,1091,1,0,0,0,1090,1080,1,0,0,
  	0,1090,1086,1,0,0,0,1091,157,1,0,0,0,1092,1104,3,160,80,0,1093,1104,3,
  	164,82,0,1094,1095,3,160,80,0,1095,1096,5,18,0,0,1096,1097,3,164,82,0,
  	1097,1104,1,0,0,0,1098,1099,3,160,80,0,1099,1100,5,18,0,0,1100,1101,3,
  	162,81,0,1101,1104,1,0,0,0,1102,1104,3,162,81,0,1103,1092,1,0,0,0,1103,
  	1093,1,0,0,0,1103,1094,1,0,0,0,1103,1098,1,0,0,0,1103,1102,1,0,0,0,1104,
  	159,1,0,0,0,1105,1106,3,310,155,0,1106,161,1,0,0,0,1107,1108,5,35,0,0,
  	1108,1109,5,67,0,0,1109,1110,3,310,155,0,1110,163,1,0,0,0,1111,1112,5,
  	16,0,0,1112,1121,5,17,0,0,1113,1114,5,16,0,0,1114,1116,3,166,83,0,1115,
  	1117,5,18,0,0,1116,1115,1,0,0,0,1116,1117,1,0,0,0,1117,1118,1,0,0,0,1118,
  	1119,5,17,0,0,1119,1121,1,0,0,0,1120,1111,1,0,0,0,1120,1113,1,0,0,0,1121,
  	165,1,0,0,0,1122,1127,3,168,84,0,1123,1124,5,18,0,0,1124,1126,3,168,84,
  	0,1125,1123,1,0,0,0,1126,1129,1,0,0,0,1127,1125,1,0,0,0,1127,1128,1,0,
  	0,0,1128,167,1,0,0,0,1129,1127,1,0,0,0,1130,1136,3,310,155,0,1131,1132,
  	3,314,157,0,1132,1133,5,67,0,0,1133,1134,3,310,155,0,1134,1136,1,0,0,
  	0,1135,1130,1,0,0,0,1135,1131,1,0,0,0,1136,169,1,0,0,0,1137,1138,5,133,
  	0,0,1138,171,1,0,0,0,1139,1140,5,68,0,0,1140,1141,3,174,87,0,1141,1142,
  	5,66,0,0,1142,1143,3,170,85,0,1143,1144,5,31,0,0,1144,1165,1,0,0,0,1145,
  	1146,5,68,0,0,1146,1147,3,174,87,0,1147,1148,5,31,0,0,1148,1165,1,0,0,
  	0,1149,1150,5,68,0,0,1150,1165,3,100,50,0,1151,1152,5,68,0,0,1152,1165,
  	3,62,31,0,1153,1154,5,68,0,0,1154,1155,5,59,0,0,1155,1165,3,64,32,0,1156,
  	1157,5,68,0,0,1157,1158,5,59,0,0,1158,1165,3,74,37,0,1159,1160,5,68,0,
  	0,1160,1161,5,59,0,0,1161,1162,3,182,91,0,1162,1163,5,31,0,0,1163,1165,
  	1,0,0,0,1164,1139,1,0,0,0,1164,1145,1,0,0,0,1164,1149,1,0,0,0,1164,1151,
  	1,0,0,0,1164,1153,1,0,0,0,1164,1156,1,0,0,0,1164,1159,1,0,0,0,1165,173,
  	1,0,0,0,1166,1167,5,16,0,0,1167,1180,5,17,0,0,1168,1169,5,16,0,0,1169,
  	1171,3,176,88,0,1170,1172,5,18,0,0,1171,1170,1,0,0,0,1171,1172,1,0,0,
  	0,1172,1173,1,0,0,0,1173,1174,5,17,0,0,1174,1180,1,0,0,0,1175,1180,5,
  	35,0,0,1176,1177,5,35,0,0,1177,1178,5,67,0,0,1178,1180,3,314,157,0,1179,
  	1166,1,0,0,0,1179,1168,1,0,0,0,1179,1175,1,0,0,0,1179,1176,1,0,0,0,1180,
  	175,1,0,0,0,1181,1186,3,178,89,0,1182,1183,5,18,0,0,1183,1185,3,178,89,
  	0,1184,1182,1,0,0,0,1185,1188,1,0,0,0,1186,1184,1,0,0,0,1186,1187,1,0,
  	0,0,1187,177,1,0,0,0,1188,1186,1,0,0,0,1189,1195,3,314,157,0,1190,1191,
  	3,314,157,0,1191,1192,5,67,0,0,1192,1193,3,314,157,0,1193,1195,1,0,0,
  	0,1194,1189,1,0,0,0,1194,1190,1,0,0,0,1195,179,1,0,0,0,1196,1201,3,182,
  	91,0,1197,1198,5,18,0,0,1198,1200,3,182,91,0,1199,1197,1,0,0,0,1200,1203,
  	1,0,0,0,1201,1199,1,0,0,0,1201,1202,1,0,0,0,1202,181,1,0,0,0,1203,1201,
  	1,0,0,0,1204,1213,3,186,93,0,1205,1213,3,272,136,0,1206,1213,3,264,132,
  	0,1207,1213,3,266,133,0,1208,1209,3,216,108,0,1209,1210,3,184,92,0,1210,
  	1211,3,182,91,0,1211,1213,1,0,0,0,1212,1204,1,0,0,0,1212,1205,1,0,0,0,
  	1212,1206,1,0,0,0,1212,1207,1,0,0,0,1212,1208,1,0,0,0,1213,183,1,0,0,
  	0,1214,1215,7,5,0,0,1215,185,1,0,0,0,1216,1222,3,188,94,0,1217,1218,5,
  	85,0,0,1218,1219,3,182,91,0,1219,1220,5,19,0,0,1220,1221,3,182,91,0,1221,
  	1223,1,0,0,0,1222,1217,1,0,0,0,1222,1223,1,0,0,0,1223,187,1,0,0,0,1224,
  	1227,3,190,95,0,1225,1226,5,86,0,0,1226,1228,3,188,94,0,1227,1225,1,0,
  	0,0,1227,1228,1,0,0,0,1228,189,1,0,0,0,1229,1234,3,192,96,0,1230,1231,
  	5,87,0,0,1231,1233,3,192,96,0,1232,1230,1,0,0,0,1233,1236,1,0,0,0,1234,
  	1232,1,0,0,0,1234,1235,1,0,0,0,1235,191,1,0,0,0,1236,1234,1,0,0,0,1237,
  	1242,3,194,97,0,1238,1239,5,88,0,0,1239,1241,3,194,97,0,1240,1238,1,0,
  	0,0,1241,1244,1,0,0,0,1242,1240,1,0,0,0,1242,1243,1,0,0,0,1243,193,1,
  	0,0,0,1244,1242,1,0,0,0,1245,1250,3,196,98,0,1246,1247,5,89,0,0,1247,
  	1249,3,196,98,0,1248,1246,1,0,0,0,1249,1252,1,0,0,0,1250,1248,1,0,0,0,
  	1250,1251,1,0,0,0,1251,195,1,0,0,0,1252,1250,1,0,0,0,1253,1258,3,198,
  	99,0,1254,1255,5,90,0,0,1255,1257,3,198,99,0,1256,1254,1,0,0,0,1257,1260,
  	1,0,0,0,1258,1256,1,0,0,0,1258,1259,1,0,0,0,1259,197,1,0,0,0,1260,1258,
  	1,0,0,0,1261,1266,3,200,100,0,1262,1263,5,91,0,0,1263,1265,3,200,100,
  	0,1264,1262,1,0,0,0,1265,1268,1,0,0,0,1266,1264,1,0,0,0,1266,1267,1,0,
  	0,0,1267,199,1,0,0,0,1268,1266,1,0,0,0,1269,1274,3,202,101,0,1270,1271,
  	7,6,0,0,1271,1273,3,202,101,0,1272,1270,1,0,0,0,1273,1276,1,0,0,0,1274,
  	1272,1,0,0,0,1274,1275,1,0,0,0,1275,201,1,0,0,0,1276,1274,1,0,0,0,1277,
  	1282,3,204,102,0,1278,1279,7,7,0,0,1279,1281,3,204,102,0,1280,1278,1,
  	0,0,0,1281,1284,1,0,0,0,1282,1280,1,0,0,0,1282,1283,1,0,0,0,1283,203,
  	1,0,0,0,1284,1282,1,0,0,0,1285,1290,3,206,103,0,1286,1287,7,8,0,0,1287,
  	1289,3,206,103,0,1288,1286,1,0,0,0,1289,1292,1,0,0,0,1290,1288,1,0,0,
  	0,1290,1291,1,0,0,0,1291,205,1,0,0,0,1292,1290,1,0,0,0,1293,1298,3,208,
  	104,0,1294,1295,7,9,0,0,1295,1297,3,208,104,0,1296,1294,1,0,0,0,1297,
  	1300,1,0,0,0,1298,1296,1,0,0,0,1298,1299,1,0,0,0,1299,207,1,0,0,0,1300,
  	1298,1,0,0,0,1301,1306,3,210,105,0,1302,1303,7,10,0,0,1303,1305,3,210,
  	105,0,1304,1302,1,0,0,0,1305,1308,1,0,0,0,1306,1304,1,0,0,0,1306,1307,
  	1,0,0,0,1307,209,1,0,0,0,1308,1306,1,0,0,0,1309,1312,3,212,106,0,1310,
  	1311,5,107,0,0,1311,1313,3,210,105,0,1312,1310,1,0,0,0,1312,1313,1,0,
  	0,0,1313,211,1,0,0,0,1314,1332,3,214,107,0,1315,1316,5,108,0,0,1316,1332,
  	3,212,106,0,1317,1318,5,109,0,0,1318,1332,3,212,106,0,1319,1320,5,110,
  	0,0,1320,1332,3,212,106,0,1321,1322,5,104,0,0,1322,1332,3,212,106,0,1323,
  	1324,5,32,0,0,1324,1332,3,212,106,0,1325,1326,5,111,0,0,1326,1332,3,212,
  	106,0,1327,1328,5,112,0,0,1328,1332,3,212,106,0,1329,1330,5,51,0,0,1330,
  	1332,3,212,106,0,1331,1314,1,0,0,0,1331,1315,1,0,0,0,1331,1317,1,0,0,
  	0,1331,1319,1,0,0,0,1331,1321,1,0,0,0,1331,1323,1,0,0,0,1331,1325,1,0,
  	0,0,1331,1327,1,0,0,0,1331,1329,1,0,0,0,1332,213,1,0,0,0,1333,1345,3,
  	216,108,0,1334,1335,3,216,108,0,1335,1336,5,113,0,0,1336,1345,1,0,0,0,
  	1337,1338,3,216,108,0,1338,1339,5,114,0,0,1339,1345,1,0,0,0,1340,1341,
  	5,113,0,0,1341,1345,3,212,106,0,1342,1343,5,114,0,0,1343,1345,3,212,106,
  	0,1344,1333,1,0,0,0,1344,1334,1,0,0,0,1344,1337,1,0,0,0,1344,1340,1,0,
  	0,0,1344,1342,1,0,0,0,1345,215,1,0,0,0,1346,1349,3,218,109,0,1347,1349,
  	3,16,8,0,1348,1346,1,0,0,0,1348,1347,1,0,0,0,1349,217,1,0,0,0,1350,1354,
  	3,14,7,0,1351,1352,5,9,0,0,1352,1354,3,218,109,0,1353,1350,1,0,0,0,1353,
  	1351,1,0,0,0,1354,219,1,0,0,0,1355,1356,5,8,0,0,1356,1357,3,224,112,0,
  	1357,221,1,0,0,0,1358,1359,5,65,0,0,1359,1360,5,12,0,0,1360,1361,3,182,
  	91,0,1361,1362,5,13,0,0,1362,223,1,0,0,0,1363,1365,5,12,0,0,1364,1366,
  	3,226,113,0,1365,1364,1,0,0,0,1365,1366,1,0,0,0,1366,1367,1,0,0,0,1367,
  	1368,5,13,0,0,1368,225,1,0,0,0,1369,1374,3,228,114,0,1370,1371,5,18,0,
  	0,1371,1373,3,228,114,0,1372,1370,1,0,0,0,1373,1376,1,0,0,0,1374,1372,
  	1,0,0,0,1374,1375,1,0,0,0,1375,227,1,0,0,0,1376,1374,1,0,0,0,1377,1381,
  	3,182,91,0,1378,1379,5,115,0,0,1379,1381,3,182,91,0,1380,1377,1,0,0,0,
  	1380,1378,1,0,0,0,1381,229,1,0,0,0,1382,1383,5,9,0,0,1383,1384,5,4,0,
  	0,1384,1389,5,20,0,0,1385,1386,5,65,0,0,1386,1387,5,4,0,0,1387,1389,5,
  	116,0,0,1388,1382,1,0,0,0,1388,1385,1,0,0,0,1389,231,1,0,0,0,1390,1391,
  	5,12,0,0,1391,1392,3,180,90,0,1392,1393,5,13,0,0,1393,233,1,0,0,0,1394,
  	1395,5,117,0,0,1395,235,1,0,0,0,1396,1397,7,11,0,0,1397,237,1,0,0,0,1398,
  	1399,7,12,0,0,1399,239,1,0,0,0,1400,1401,5,133,0,0,1401,241,1,0,0,0,1402,
  	1404,5,6,0,0,1403,1405,3,244,122,0,1404,1403,1,0,0,0,1404,1405,1,0,0,
  	0,1405,1406,1,0,0,0,1406,1407,5,7,0,0,1407,243,1,0,0,0,1408,1413,3,246,
  	123,0,1409,1410,5,18,0,0,1410,1412,3,246,123,0,1411,1409,1,0,0,0,1412,
  	1415,1,0,0,0,1413,1411,1,0,0,0,1413,1414,1,0,0,0,1414,245,1,0,0,0,1415,
  	1413,1,0,0,0,1416,1421,3,182,91,0,1417,1418,5,115,0,0,1418,1421,3,182,
  	91,0,1419,1421,1,0,0,0,1420,1416,1,0,0,0,1420,1417,1,0,0,0,1420,1419,
  	1,0,0,0,1421,247,1,0,0,0,1422,1424,5,16,0,0,1423,1425,3,250,125,0,1424,
  	1423,1,0,0,0,1424,1425,1,0,0,0,1425,1426,1,0,0,0,1426,1433,5,17,0,0,1427,
  	1428,5,16,0,0,1428,1429,3,250,125,0,1429,1430,5,18,0,0,1430,1431,5,17,
  	0,0,1431,1433,1,0,0,0,1432,1422,1,0,0,0,1432,1427,1,0,0,0,1433,249,1,
  	0,0,0,1434,1439,3,252,126,0,1435,1436,5,18,0,0,1436,1438,3,252,126,0,
  	1437,1435,1,0,0,0,1438,1441,1,0,0,0,1439,1437,1,0,0,0,1439,1440,1,0,0,
  	0,1440,251,1,0,0,0,1441,1439,1,0,0,0,1442,1451,3,314,157,0,1443,1444,
  	3,40,20,0,1444,1445,5,19,0,0,1445,1446,3,182,91,0,1446,1451,1,0,0,0,1447,
  	1451,3,82,41,0,1448,1449,5,115,0,0,1449,1451,3,182,91,0,1450,1442,1,0,
  	0,0,1450,1443,1,0,0,0,1450,1447,1,0,0,0,1450,1448,1,0,0,0,1451,253,1,
  	0,0,0,1452,1454,5,34,0,0,1453,1455,3,312,156,0,1454,1453,1,0,0,0,1454,
  	1455,1,0,0,0,1455,1456,1,0,0,0,1456,1458,5,12,0,0,1457,1459,3,284,142,
  	0,1458,1457,1,0,0,0,1458,1459,1,0,0,0,1459,1460,1,0,0,0,1460,1461,5,13,
  	0,0,1461,1462,5,16,0,0,1462,1463,3,306,153,0,1463,1464,5,17,0,0,1464,
  	255,1,0,0,0,1465,1466,5,34,0,0,1466,1468,5,35,0,0,1467,1469,3,312,156,
  	0,1468,1467,1,0,0,0,1468,1469,1,0,0,0,1469,1470,1,0,0,0,1470,1472,5,12,
  	0,0,1471,1473,3,284,142,0,1472,1471,1,0,0,0,1472,1473,1,0,0,0,1473,1474,
  	1,0,0,0,1474,1475,5,13,0,0,1475,1476,5,16,0,0,1476,1477,3,306,153,0,1477,
  	1478,5,17,0,0,1478,257,1,0,0,0,1479,1480,5,36,0,0,1480,1482,5,34,0,0,
  	1481,1483,3,312,156,0,1482,1481,1,0,0,0,1482,1483,1,0,0,0,1483,1484,1,
  	0,0,0,1484,1486,5,12,0,0,1485,1487,3,284,142,0,1486,1485,1,0,0,0,1486,
  	1487,1,0,0,0,1487,1488,1,0,0,0,1488,1489,5,13,0,0,1489,1490,5,16,0,0,
  	1490,1491,3,306,153,0,1491,1492,5,17,0,0,1492,259,1,0,0,0,1493,1494,5,
  	36,0,0,1494,1495,5,34,0,0,1495,1497,5,35,0,0,1496,1498,3,312,156,0,1497,
  	1496,1,0,0,0,1497,1498,1,0,0,0,1498,1499,1,0,0,0,1499,1501,5,12,0,0,1500,
  	1502,3,284,142,0,1501,1500,1,0,0,0,1501,1502,1,0,0,0,1502,1503,1,0,0,
  	0,1503,1504,5,13,0,0,1504,1505,5,16,0,0,1505,1506,3,306,153,0,1506,1507,
  	5,17,0,0,1507,261,1,0,0,0,1508,1510,5,37,0,0,1509,1511,3,312,156,0,1510,
  	1509,1,0,0,0,1510,1511,1,0,0,0,1511,1513,1,0,0,0,1512,1514,3,76,38,0,
  	1513,1512,1,0,0,0,1513,1514,1,0,0,0,1514,1515,1,0,0,0,1515,1516,5,16,
  	0,0,1516,1517,3,78,39,0,1517,1518,5,17,0,0,1518,263,1,0,0,0,1519,1520,
  	3,268,134,0,1520,1521,5,120,0,0,1521,1522,3,270,135,0,1522,265,1,0,0,
  	0,1523,1524,5,36,0,0,1524,1525,3,268,134,0,1525,1526,5,120,0,0,1526,1527,
  	3,270,135,0,1527,267,1,0,0,0,1528,1535,3,310,155,0,1529,1531,5,12,0,0,
  	1530,1532,3,284,142,0,1531,1530,1,0,0,0,1531,1532,1,0,0,0,1532,1533,1,
  	0,0,0,1533,1535,5,13,0,0,1534,1528,1,0,0,0,1534,1529,1,0,0,0,1535,269,
  	1,0,0,0,1536,1542,3,182,91,0,1537,1538,5,16,0,0,1538,1539,3,306,153,0,
  	1539,1540,5,17,0,0,1540,1542,1,0,0,0,1541,1536,1,0,0,0,1541,1537,1,0,
  	0,0,1542,271,1,0,0,0,1543,1550,5,121,0,0,1544,1545,5,121,0,0,1545,1550,
  	3,182,91,0,1546,1547,5,121,0,0,1547,1548,5,35,0,0,1548,1550,3,182,91,
  	0,1549,1543,1,0,0,0,1549,1544,1,0,0,0,1549,1546,1,0,0,0,1550,273,1,0,
  	0,0,1551,1553,5,122,0,0,1552,1554,3,276,138,0,1553,1552,1,0,0,0,1553,
  	1554,1,0,0,0,1554,1555,1,0,0,0,1555,1556,5,122,0,0,1556,275,1,0,0,0,1557,
  	1559,3,278,139,0,1558,1557,1,0,0,0,1559,1560,1,0,0,0,1560,1558,1,0,0,
  	0,1560,1561,1,0,0,0,1561,277,1,0,0,0,1562,1574,5,141,0,0,1563,1564,5,
  	142,0,0,1564,1568,3,180,90,0,1565,1567,3,280,140,0,1566,1565,1,0,0,0,
  	1567,1570,1,0,0,0,1568,1566,1,0,0,0,1568,1569,1,0,0,0,1569,1571,1,0,0,
  	0,1570,1568,1,0,0,0,1571,1572,5,144,0,0,1572,1574,1,0,0,0,1573,1562,1,
  	0,0,0,1573,1563,1,0,0,0,1574,279,1,0,0,0,1575,1576,5,143,0,0,1576,1577,
  	3,180,90,0,1577,281,1,0,0,0,1578,1579,5,145,0,0,1579,283,1,0,0,0,1580,
  	1585,3,286,143,0,1581,1582,5,18,0,0,1582,1584,3,286,143,0,1583,1581,1,
  	0,0,0,1584,1587,1,0,0,0,1585,1583,1,0,0,0,1585,1586,1,0,0,0,1586,1590,
  	1,0,0,0,1587,1585,1,0,0,0,1588,1589,5,18,0,0,1589,1591,3,288,144,0,1590,
  	1588,1,0,0,0,1590,1591,1,0,0,0,1591,1594,1,0,0,0,1592,1594,3,288,144,
  	0,1593,1580,1,0,0,0,1593,1592,1,0,0,0,1594,285,1,0,0,0,1595,1596,3,290,
  	145,0,1596,287,1,0,0,0,1597,1598,5,115,0,0,1598,1602,3,310,155,0,1599,
  	1600,5,115,0,0,1600,1602,3,292,146,0,1601,1597,1,0,0,0,1601,1599,1,0,
  	0,0,1602,289,1,0,0,0,1603,1605,3,310,155,0,1604,1606,3,308,154,0,1605,
  	1604,1,0,0,0,1605,1606,1,0,0,0,1606,1612,1,0,0,0,1607,1609,3,292,146,
  	0,1608,1610,3,308,154,0,1609,1608,1,0,0,0,1609,1610,1,0,0,0,1610,1612,
  	1,0,0,0,1611,1603,1,0,0,0,1611,1607,1,0,0,0,1612,291,1,0,0,0,1613,1616,
  	3,294,147,0,1614,1616,3,300,150,0,1615,1613,1,0,0,0,1615,1614,1,0,0,0,
  	1616,293,1,0,0,0,1617,1619,5,16,0,0,1618,1620,3,296,148,0,1619,1618,1,
  	0,0,0,1619,1620,1,0,0,0,1620,1621,1,0,0,0,1621,1628,5,17,0,0,1622,1623,
  	5,16,0,0,1623,1624,3,296,148,0,1624,1625,5,18,0,0,1625,1626,5,17,0,0,
  	1626,1628,1,0,0,0,1627,1617,1,0,0,0,1627,1622,1,0,0,0,1628,295,1,0,0,
  	0,1629,1634,3,298,149,0,1630,1631,5,18,0,0,1631,1633,3,298,149,0,1632,
  	1630,1,0,0,0,1633,1636,1,0,0,0,1634,1632,1,0,0,0,1634,1635,1,0,0,0,1635,
  	297,1,0,0,0,1636,1634,1,0,0,0,1637,1645,3,310,155,0,1638,1639,3,40,20,
  	0,1639,1640,5,19,0,0,1640,1641,3,290,145,0,1641,1645,1,0,0,0,1642,1643,
  	5,115,0,0,1643,1645,3,310,155,0,1644,1637,1,0,0,0,1644,1638,1,0,0,0,1644,
  	1642,1,0,0,0,1645,299,1,0,0,0,1646,1648,5,6,0,0,1647,1649,3,302,151,0,
  	1648,1647,1,0,0,0,1648,1649,1,0,0,0,1649,1650,1,0,0,0,1650,1651,5,7,0,
  	0,1651,301,1,0,0,0,1652,1654,3,304,152,0,1653,1652,1,0,0,0,1653,1654,
  	1,0,0,0,1654,1655,1,0,0,0,1655,1663,3,290,145,0,1656,1658,5,18,0,0,1657,
  	1659,3,304,152,0,1658,1657,1,0,0,0,1658,1659,1,0,0,0,1659,1660,1,0,0,
  	0,1660,1662,3,290,145,0,1661,1656,1,0,0,0,1662,1665,1,0,0,0,1663,1661,
  	1,0,0,0,1663,1664,1,0,0,0,1664,1670,1,0,0,0,1665,1663,1,0,0,0,1666,1668,
  	5,18,0,0,1667,1669,3,304,152,0,1668,1667,1,0,0,0,1668,1669,1,0,0,0,1669,
  	1671,1,0,0,0,1670,1666,1,0,0,0,1670,1671,1,0,0,0,1671,303,1,0,0,0,1672,
  	1673,5,18,0,0,1673,305,1,0,0,0,1674,1676,3,58,29,0,1675,1674,1,0,0,0,
  	1675,1676,1,0,0,0,1676,307,1,0,0,0,1677,1678,5,69,0,0,1678,1679,3,182,
  	91,0,1679,309,1,0,0,0,1680,1684,3,312,156,0,1681,1684,5,121,0,0,1682,
  	1684,5,51,0,0,1683,1680,1,0,0,0,1683,1681,1,0,0,0,1683,1682,1,0,0,0,1684,
  	311,1,0,0,0,1685,1686,7,13,0,0,1686,313,1,0,0,0,1687,1690,5,132,0,0,1688,
  	1690,3,316,158,0,1689,1687,1,0,0,0,1689,1688,1,0,0,0,1690,315,1,0,0,0,
  	1691,1696,3,318,159,0,1692,1696,3,320,160,0,1693,1696,3,234,117,0,1694,
  	1696,3,236,118,0,1695,1691,1,0,0,0,1695,1692,1,0,0,0,1695,1693,1,0,0,
  	0,1695,1694,1,0,0,0,1696,317,1,0,0,0,1697,1698,7,14,0,0,1698,319,1,0,
  	0,0,1699,1700,7,15,0,0,1700,321,1,0,0,0,160,336,344,352,355,368,375,392,
  	416,418,428,468,470,487,495,503,512,515,523,534,568,570,576,585,592,599,
  	604,613,622,633,642,647,654,658,663,669,675,687,699,712,722,734,744,749,
  	777,788,800,807,811,824,829,834,853,857,864,875,880,885,899,906,925,929,
  	933,942,954,968,980,984,990,996,1018,1022,1027,1036,1041,1050,1053,1059,
  	1066,1072,1090,1103,1116,1120,1127,1135,1164,1171,1179,1186,1194,1201,
  	1212,1222,1227,1234,1242,1250,1258,1266,1274,1282,1290,1298,1306,1312,
  	1331,1344,1348,1353,1365,1374,1380,1388,1404,1413,1420,1424,1432,1439,
  	1450,1454,1458,1468,1472,1482,1486,1497,1501,1510,1513,1531,1534,1541,
  	1549,1553,1560,1568,1573,1585,1590,1593,1601,1605,1609,1611,1615,1619,
  	1627,1634,1644,1648,1653,1658,1663,1668,1670,1675,1683,1689,1695
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  chtljavascriptParserStaticData = staticData.release();
}

}

CHTLJavaScriptParser::CHTLJavaScriptParser(TokenStream *input) : CHTLJavaScriptParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

CHTLJavaScriptParser::CHTLJavaScriptParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  CHTLJavaScriptParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *chtljavascriptParserStaticData->atn, chtljavascriptParserStaticData->decisionToDFA, chtljavascriptParserStaticData->sharedContextCache, options);
}

CHTLJavaScriptParser::~CHTLJavaScriptParser() {
  delete _interpreter;
}

const atn::ATN& CHTLJavaScriptParser::getATN() const {
  return *chtljavascriptParserStaticData->atn;
}

std::string CHTLJavaScriptParser::getGrammarFileName() const {
  return "CHTLJavaScript.g4";
}

const std::vector<std::string>& CHTLJavaScriptParser::getRuleNames() const {
  return chtljavascriptParserStaticData->ruleNames;
}

const dfa::Vocabulary& CHTLJavaScriptParser::getVocabulary() const {
  return chtljavascriptParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CHTLJavaScriptParser::getSerializedATN() const {
  return chtljavascriptParserStaticData->serializedATN;
}


//----------------- PrimaryExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::PrimaryExpressionContext::PrimaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::IdentifierContext* CHTLJavaScriptParser::PrimaryExpressionContext::identifier() {
  return getRuleContext<CHTLJavaScriptParser::IdentifierContext>(0);
}

CHTLJavaScriptParser::LiteralContext* CHTLJavaScriptParser::PrimaryExpressionContext::literal() {
  return getRuleContext<CHTLJavaScriptParser::LiteralContext>(0);
}

CHTLJavaScriptParser::ArrayLiteralContext* CHTLJavaScriptParser::PrimaryExpressionContext::arrayLiteral() {
  return getRuleContext<CHTLJavaScriptParser::ArrayLiteralContext>(0);
}

CHTLJavaScriptParser::ObjectLiteralContext* CHTLJavaScriptParser::PrimaryExpressionContext::objectLiteral() {
  return getRuleContext<CHTLJavaScriptParser::ObjectLiteralContext>(0);
}

CHTLJavaScriptParser::FunctionExpressionContext* CHTLJavaScriptParser::PrimaryExpressionContext::functionExpression() {
  return getRuleContext<CHTLJavaScriptParser::FunctionExpressionContext>(0);
}

CHTLJavaScriptParser::ClassExpressionContext* CHTLJavaScriptParser::PrimaryExpressionContext::classExpression() {
  return getRuleContext<CHTLJavaScriptParser::ClassExpressionContext>(0);
}

CHTLJavaScriptParser::GeneratorExpressionContext* CHTLJavaScriptParser::PrimaryExpressionContext::generatorExpression() {
  return getRuleContext<CHTLJavaScriptParser::GeneratorExpressionContext>(0);
}

CHTLJavaScriptParser::AsyncFunctionExpressionContext* CHTLJavaScriptParser::PrimaryExpressionContext::asyncFunctionExpression() {
  return getRuleContext<CHTLJavaScriptParser::AsyncFunctionExpressionContext>(0);
}

CHTLJavaScriptParser::AsyncGeneratorExpressionContext* CHTLJavaScriptParser::PrimaryExpressionContext::asyncGeneratorExpression() {
  return getRuleContext<CHTLJavaScriptParser::AsyncGeneratorExpressionContext>(0);
}

CHTLJavaScriptParser::RegularExpressionLiteralContext* CHTLJavaScriptParser::PrimaryExpressionContext::regularExpressionLiteral() {
  return getRuleContext<CHTLJavaScriptParser::RegularExpressionLiteralContext>(0);
}

CHTLJavaScriptParser::TemplateLiteralContext* CHTLJavaScriptParser::PrimaryExpressionContext::templateLiteral() {
  return getRuleContext<CHTLJavaScriptParser::TemplateLiteralContext>(0);
}

CHTLJavaScriptParser::ParenthesizedExpressionContext* CHTLJavaScriptParser::PrimaryExpressionContext::parenthesizedExpression() {
  return getRuleContext<CHTLJavaScriptParser::ParenthesizedExpressionContext>(0);
}

CHTLJavaScriptParser::ChtlSelectorContext* CHTLJavaScriptParser::PrimaryExpressionContext::chtlSelector() {
  return getRuleContext<CHTLJavaScriptParser::ChtlSelectorContext>(0);
}


size_t CHTLJavaScriptParser::PrimaryExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RulePrimaryExpression;
}

void CHTLJavaScriptParser::PrimaryExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryExpression(this);
}

void CHTLJavaScriptParser::PrimaryExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryExpression(this);
}

CHTLJavaScriptParser::PrimaryExpressionContext* CHTLJavaScriptParser::primaryExpression() {
  PrimaryExpressionContext *_localctx = _tracker.createInstance<PrimaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 0, CHTLJavaScriptParser::RulePrimaryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(336);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(322);
      match(CHTLJavaScriptParser::T__0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(323);
      identifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(324);
      literal();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(325);
      arrayLiteral();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(326);
      objectLiteral();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(327);
      functionExpression();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(328);
      classExpression();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(329);
      generatorExpression();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(330);
      asyncFunctionExpression();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(331);
      asyncGeneratorExpression();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(332);
      regularExpressionLiteral();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(333);
      templateLiteral();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(334);
      parenthesizedExpression();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(335);
      chtlSelector();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ChtlSelectorContext ------------------------------------------------------------------

CHTLJavaScriptParser::ChtlSelectorContext::ChtlSelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::SelectorExpressionContext* CHTLJavaScriptParser::ChtlSelectorContext::selectorExpression() {
  return getRuleContext<CHTLJavaScriptParser::SelectorExpressionContext>(0);
}


size_t CHTLJavaScriptParser::ChtlSelectorContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleChtlSelector;
}

void CHTLJavaScriptParser::ChtlSelectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChtlSelector(this);
}

void CHTLJavaScriptParser::ChtlSelectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChtlSelector(this);
}

CHTLJavaScriptParser::ChtlSelectorContext* CHTLJavaScriptParser::chtlSelector() {
  ChtlSelectorContext *_localctx = _tracker.createInstance<ChtlSelectorContext>(_ctx, getState());
  enterRule(_localctx, 2, CHTLJavaScriptParser::RuleChtlSelector);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(338);
    match(CHTLJavaScriptParser::T__1);
    setState(339);
    selectorExpression();
    setState(340);
    match(CHTLJavaScriptParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectorExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::SelectorExpressionContext::SelectorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::SelectorIdentifierContext* CHTLJavaScriptParser::SelectorExpressionContext::selectorIdentifier() {
  return getRuleContext<CHTLJavaScriptParser::SelectorIdentifierContext>(0);
}

CHTLJavaScriptParser::SelectorIndexContext* CHTLJavaScriptParser::SelectorExpressionContext::selectorIndex() {
  return getRuleContext<CHTLJavaScriptParser::SelectorIndexContext>(0);
}

CHTLJavaScriptParser::ComplexSelectorContext* CHTLJavaScriptParser::SelectorExpressionContext::complexSelector() {
  return getRuleContext<CHTLJavaScriptParser::ComplexSelectorContext>(0);
}


size_t CHTLJavaScriptParser::SelectorExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleSelectorExpression;
}

void CHTLJavaScriptParser::SelectorExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectorExpression(this);
}

void CHTLJavaScriptParser::SelectorExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectorExpression(this);
}

CHTLJavaScriptParser::SelectorExpressionContext* CHTLJavaScriptParser::selectorExpression() {
  SelectorExpressionContext *_localctx = _tracker.createInstance<SelectorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 4, CHTLJavaScriptParser::RuleSelectorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(355);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(342);
      selectorIdentifier();
      setState(344);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CHTLJavaScriptParser::T__5) {
        setState(343);
        selectorIndex();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(346);
      match(CHTLJavaScriptParser::T__3);
      setState(347);
      selectorIdentifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(348);
      match(CHTLJavaScriptParser::T__4);
      setState(349);
      selectorIdentifier();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(350);
      selectorIdentifier();
      setState(352);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CHTLJavaScriptParser::T__5) {
        setState(351);
        selectorIndex();
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(354);
      complexSelector();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectorIdentifierContext ------------------------------------------------------------------

CHTLJavaScriptParser::SelectorIdentifierContext::SelectorIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CHTLJavaScriptParser::SelectorIdentifierContext::IDENTIFIER() {
  return getToken(CHTLJavaScriptParser::IDENTIFIER, 0);
}


size_t CHTLJavaScriptParser::SelectorIdentifierContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleSelectorIdentifier;
}

void CHTLJavaScriptParser::SelectorIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectorIdentifier(this);
}

void CHTLJavaScriptParser::SelectorIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectorIdentifier(this);
}

CHTLJavaScriptParser::SelectorIdentifierContext* CHTLJavaScriptParser::selectorIdentifier() {
  SelectorIdentifierContext *_localctx = _tracker.createInstance<SelectorIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 6, CHTLJavaScriptParser::RuleSelectorIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(357);
    match(CHTLJavaScriptParser::IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectorIndexContext ------------------------------------------------------------------

CHTLJavaScriptParser::SelectorIndexContext::SelectorIndexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CHTLJavaScriptParser::SelectorIndexContext::NUMBER() {
  return getToken(CHTLJavaScriptParser::NUMBER, 0);
}


size_t CHTLJavaScriptParser::SelectorIndexContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleSelectorIndex;
}

void CHTLJavaScriptParser::SelectorIndexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectorIndex(this);
}

void CHTLJavaScriptParser::SelectorIndexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectorIndex(this);
}

CHTLJavaScriptParser::SelectorIndexContext* CHTLJavaScriptParser::selectorIndex() {
  SelectorIndexContext *_localctx = _tracker.createInstance<SelectorIndexContext>(_ctx, getState());
  enterRule(_localctx, 8, CHTLJavaScriptParser::RuleSelectorIndex);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(359);
    match(CHTLJavaScriptParser::T__5);
    setState(360);
    match(CHTLJavaScriptParser::NUMBER);
    setState(361);
    match(CHTLJavaScriptParser::T__6);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComplexSelectorContext ------------------------------------------------------------------

CHTLJavaScriptParser::ComplexSelectorContext::ComplexSelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::SelectorPartContext *> CHTLJavaScriptParser::ComplexSelectorContext::selectorPart() {
  return getRuleContexts<CHTLJavaScriptParser::SelectorPartContext>();
}

CHTLJavaScriptParser::SelectorPartContext* CHTLJavaScriptParser::ComplexSelectorContext::selectorPart(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::SelectorPartContext>(i);
}

std::vector<tree::TerminalNode *> CHTLJavaScriptParser::ComplexSelectorContext::WS() {
  return getTokens(CHTLJavaScriptParser::WS);
}

tree::TerminalNode* CHTLJavaScriptParser::ComplexSelectorContext::WS(size_t i) {
  return getToken(CHTLJavaScriptParser::WS, i);
}


size_t CHTLJavaScriptParser::ComplexSelectorContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleComplexSelector;
}

void CHTLJavaScriptParser::ComplexSelectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComplexSelector(this);
}

void CHTLJavaScriptParser::ComplexSelectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComplexSelector(this);
}

CHTLJavaScriptParser::ComplexSelectorContext* CHTLJavaScriptParser::complexSelector() {
  ComplexSelectorContext *_localctx = _tracker.createInstance<ComplexSelectorContext>(_ctx, getState());
  enterRule(_localctx, 10, CHTLJavaScriptParser::RuleComplexSelector);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(363);
    selectorPart();
    setState(366); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(364);
      match(CHTLJavaScriptParser::WS);
      setState(365);
      selectorPart();
      setState(368); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == CHTLJavaScriptParser::WS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectorPartContext ------------------------------------------------------------------

CHTLJavaScriptParser::SelectorPartContext::SelectorPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::SelectorIdentifierContext* CHTLJavaScriptParser::SelectorPartContext::selectorIdentifier() {
  return getRuleContext<CHTLJavaScriptParser::SelectorIdentifierContext>(0);
}


size_t CHTLJavaScriptParser::SelectorPartContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleSelectorPart;
}

void CHTLJavaScriptParser::SelectorPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectorPart(this);
}

void CHTLJavaScriptParser::SelectorPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectorPart(this);
}

CHTLJavaScriptParser::SelectorPartContext* CHTLJavaScriptParser::selectorPart() {
  SelectorPartContext *_localctx = _tracker.createInstance<SelectorPartContext>(_ctx, getState());
  enterRule(_localctx, 12, CHTLJavaScriptParser::RuleSelectorPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(375);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CHTLJavaScriptParser::T__3: {
        enterOuterAlt(_localctx, 1);
        setState(370);
        match(CHTLJavaScriptParser::T__3);
        setState(371);
        selectorIdentifier();
        break;
      }

      case CHTLJavaScriptParser::T__4: {
        enterOuterAlt(_localctx, 2);
        setState(372);
        match(CHTLJavaScriptParser::T__4);
        setState(373);
        selectorIdentifier();
        break;
      }

      case CHTLJavaScriptParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 3);
        setState(374);
        selectorIdentifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemberExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::MemberExpressionContext::MemberExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::PrimaryExpressionContext* CHTLJavaScriptParser::MemberExpressionContext::primaryExpression() {
  return getRuleContext<CHTLJavaScriptParser::PrimaryExpressionContext>(0);
}

CHTLJavaScriptParser::ExpressionContext* CHTLJavaScriptParser::MemberExpressionContext::expression() {
  return getRuleContext<CHTLJavaScriptParser::ExpressionContext>(0);
}

CHTLJavaScriptParser::IdentifierNameContext* CHTLJavaScriptParser::MemberExpressionContext::identifierName() {
  return getRuleContext<CHTLJavaScriptParser::IdentifierNameContext>(0);
}

CHTLJavaScriptParser::MetaPropertyContext* CHTLJavaScriptParser::MemberExpressionContext::metaProperty() {
  return getRuleContext<CHTLJavaScriptParser::MetaPropertyContext>(0);
}

CHTLJavaScriptParser::MemberExpressionContext* CHTLJavaScriptParser::MemberExpressionContext::memberExpression() {
  return getRuleContext<CHTLJavaScriptParser::MemberExpressionContext>(0);
}

CHTLJavaScriptParser::ArgumentsContext* CHTLJavaScriptParser::MemberExpressionContext::arguments() {
  return getRuleContext<CHTLJavaScriptParser::ArgumentsContext>(0);
}

tree::TerminalNode* CHTLJavaScriptParser::MemberExpressionContext::ARROW() {
  return getToken(CHTLJavaScriptParser::ARROW, 0);
}

CHTLJavaScriptParser::TemplateLiteralContext* CHTLJavaScriptParser::MemberExpressionContext::templateLiteral() {
  return getRuleContext<CHTLJavaScriptParser::TemplateLiteralContext>(0);
}


size_t CHTLJavaScriptParser::MemberExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleMemberExpression;
}

void CHTLJavaScriptParser::MemberExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemberExpression(this);
}

void CHTLJavaScriptParser::MemberExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemberExpression(this);
}


CHTLJavaScriptParser::MemberExpressionContext* CHTLJavaScriptParser::memberExpression() {
   return memberExpression(0);
}

CHTLJavaScriptParser::MemberExpressionContext* CHTLJavaScriptParser::memberExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CHTLJavaScriptParser::MemberExpressionContext *_localctx = _tracker.createInstance<MemberExpressionContext>(_ctx, parentState);
  CHTLJavaScriptParser::MemberExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 14;
  enterRecursionRule(_localctx, 14, CHTLJavaScriptParser::RuleMemberExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(392);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
    case 1: {
      setState(378);
      primaryExpression();
      break;
    }

    case 2: {
      setState(379);
      match(CHTLJavaScriptParser::T__7);
      setState(380);
      match(CHTLJavaScriptParser::T__5);
      setState(381);
      expression();
      setState(382);
      match(CHTLJavaScriptParser::T__6);
      break;
    }

    case 3: {
      setState(384);
      match(CHTLJavaScriptParser::T__7);
      setState(385);
      match(CHTLJavaScriptParser::T__3);
      setState(386);
      identifierName();
      break;
    }

    case 4: {
      setState(387);
      metaProperty();
      break;
    }

    case 5: {
      setState(388);
      match(CHTLJavaScriptParser::T__8);
      setState(389);
      memberExpression(0);
      setState(390);
      arguments();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(418);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(416);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<MemberExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleMemberExpression);
          setState(394);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
          setState(395);
          match(CHTLJavaScriptParser::T__5);
          setState(396);
          expression();
          setState(397);
          match(CHTLJavaScriptParser::T__6);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<MemberExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleMemberExpression);
          setState(399);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(400);
          match(CHTLJavaScriptParser::T__3);
          setState(401);
          identifierName();
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<MemberExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleMemberExpression);
          setState(402);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(403);
          match(CHTLJavaScriptParser::ARROW);
          setState(404);
          identifierName();
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<MemberExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleMemberExpression);
          setState(405);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(406);
          templateLiteral();
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<MemberExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleMemberExpression);
          setState(407);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(408);
          match(CHTLJavaScriptParser::T__9);
          setState(409);
          identifierName();
          break;
        }

        case 6: {
          _localctx = _tracker.createInstance<MemberExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleMemberExpression);
          setState(410);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(411);
          match(CHTLJavaScriptParser::T__9);
          setState(412);
          match(CHTLJavaScriptParser::T__5);
          setState(413);
          expression();
          setState(414);
          match(CHTLJavaScriptParser::T__6);
          break;
        }

        default:
          break;
        } 
      }
      setState(420);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- CallExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::CallExpressionContext::CallExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::MemberExpressionContext* CHTLJavaScriptParser::CallExpressionContext::memberExpression() {
  return getRuleContext<CHTLJavaScriptParser::MemberExpressionContext>(0);
}

CHTLJavaScriptParser::ArgumentsContext* CHTLJavaScriptParser::CallExpressionContext::arguments() {
  return getRuleContext<CHTLJavaScriptParser::ArgumentsContext>(0);
}

CHTLJavaScriptParser::SuperCallContext* CHTLJavaScriptParser::CallExpressionContext::superCall() {
  return getRuleContext<CHTLJavaScriptParser::SuperCallContext>(0);
}

CHTLJavaScriptParser::ImportCallContext* CHTLJavaScriptParser::CallExpressionContext::importCall() {
  return getRuleContext<CHTLJavaScriptParser::ImportCallContext>(0);
}

CHTLJavaScriptParser::AnimateCallContext* CHTLJavaScriptParser::CallExpressionContext::animateCall() {
  return getRuleContext<CHTLJavaScriptParser::AnimateCallContext>(0);
}

CHTLJavaScriptParser::CallExpressionContext* CHTLJavaScriptParser::CallExpressionContext::callExpression() {
  return getRuleContext<CHTLJavaScriptParser::CallExpressionContext>(0);
}

CHTLJavaScriptParser::ExpressionContext* CHTLJavaScriptParser::CallExpressionContext::expression() {
  return getRuleContext<CHTLJavaScriptParser::ExpressionContext>(0);
}

CHTLJavaScriptParser::IdentifierNameContext* CHTLJavaScriptParser::CallExpressionContext::identifierName() {
  return getRuleContext<CHTLJavaScriptParser::IdentifierNameContext>(0);
}

tree::TerminalNode* CHTLJavaScriptParser::CallExpressionContext::ARROW() {
  return getToken(CHTLJavaScriptParser::ARROW, 0);
}

CHTLJavaScriptParser::TemplateLiteralContext* CHTLJavaScriptParser::CallExpressionContext::templateLiteral() {
  return getRuleContext<CHTLJavaScriptParser::TemplateLiteralContext>(0);
}

CHTLJavaScriptParser::ListenConfigContext* CHTLJavaScriptParser::CallExpressionContext::listenConfig() {
  return getRuleContext<CHTLJavaScriptParser::ListenConfigContext>(0);
}

CHTLJavaScriptParser::DelegateConfigContext* CHTLJavaScriptParser::CallExpressionContext::delegateConfig() {
  return getRuleContext<CHTLJavaScriptParser::DelegateConfigContext>(0);
}


size_t CHTLJavaScriptParser::CallExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleCallExpression;
}

void CHTLJavaScriptParser::CallExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCallExpression(this);
}

void CHTLJavaScriptParser::CallExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCallExpression(this);
}


CHTLJavaScriptParser::CallExpressionContext* CHTLJavaScriptParser::callExpression() {
   return callExpression(0);
}

CHTLJavaScriptParser::CallExpressionContext* CHTLJavaScriptParser::callExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CHTLJavaScriptParser::CallExpressionContext *_localctx = _tracker.createInstance<CallExpressionContext>(_ctx, parentState);
  CHTLJavaScriptParser::CallExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 16;
  enterRecursionRule(_localctx, 16, CHTLJavaScriptParser::RuleCallExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(428);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      setState(422);
      memberExpression(0);
      setState(423);
      arguments();
      break;
    }

    case 2: {
      setState(425);
      superCall();
      break;
    }

    case 3: {
      setState(426);
      importCall();
      break;
    }

    case 4: {
      setState(427);
      animateCall();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(470);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(468);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<CallExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleCallExpression);
          setState(430);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
          setState(431);
          arguments();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<CallExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleCallExpression);
          setState(432);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(433);
          match(CHTLJavaScriptParser::T__5);
          setState(434);
          expression();
          setState(435);
          match(CHTLJavaScriptParser::T__6);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<CallExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleCallExpression);
          setState(437);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(438);
          match(CHTLJavaScriptParser::T__3);
          setState(439);
          identifierName();
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<CallExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleCallExpression);
          setState(440);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(441);
          match(CHTLJavaScriptParser::ARROW);
          setState(442);
          identifierName();
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<CallExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleCallExpression);
          setState(443);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(444);
          templateLiteral();
          break;
        }

        case 6: {
          _localctx = _tracker.createInstance<CallExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleCallExpression);
          setState(445);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(446);
          match(CHTLJavaScriptParser::T__9);
          setState(447);
          identifierName();
          break;
        }

        case 7: {
          _localctx = _tracker.createInstance<CallExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleCallExpression);
          setState(448);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(449);
          match(CHTLJavaScriptParser::T__9);
          setState(450);
          match(CHTLJavaScriptParser::T__5);
          setState(451);
          expression();
          setState(452);
          match(CHTLJavaScriptParser::T__6);
          break;
        }

        case 8: {
          _localctx = _tracker.createInstance<CallExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleCallExpression);
          setState(454);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(455);
          match(CHTLJavaScriptParser::ARROW);
          setState(456);
          match(CHTLJavaScriptParser::T__10);
          setState(457);
          match(CHTLJavaScriptParser::T__11);
          setState(458);
          listenConfig();
          setState(459);
          match(CHTLJavaScriptParser::T__12);
          break;
        }

        case 9: {
          _localctx = _tracker.createInstance<CallExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleCallExpression);
          setState(461);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(462);
          match(CHTLJavaScriptParser::ARROW);
          setState(463);
          match(CHTLJavaScriptParser::T__13);
          setState(464);
          match(CHTLJavaScriptParser::T__11);
          setState(465);
          delegateConfig();
          setState(466);
          match(CHTLJavaScriptParser::T__12);
          break;
        }

        default:
          break;
        } 
      }
      setState(472);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AnimateCallContext ------------------------------------------------------------------

CHTLJavaScriptParser::AnimateCallContext::AnimateCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::AnimateConfigContext* CHTLJavaScriptParser::AnimateCallContext::animateConfig() {
  return getRuleContext<CHTLJavaScriptParser::AnimateConfigContext>(0);
}


size_t CHTLJavaScriptParser::AnimateCallContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleAnimateCall;
}

void CHTLJavaScriptParser::AnimateCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnimateCall(this);
}

void CHTLJavaScriptParser::AnimateCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnimateCall(this);
}

CHTLJavaScriptParser::AnimateCallContext* CHTLJavaScriptParser::animateCall() {
  AnimateCallContext *_localctx = _tracker.createInstance<AnimateCallContext>(_ctx, getState());
  enterRule(_localctx, 18, CHTLJavaScriptParser::RuleAnimateCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(473);
    match(CHTLJavaScriptParser::T__14);
    setState(474);
    match(CHTLJavaScriptParser::T__11);
    setState(475);
    animateConfig();
    setState(476);
    match(CHTLJavaScriptParser::T__12);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListenConfigContext ------------------------------------------------------------------

CHTLJavaScriptParser::ListenConfigContext::ListenConfigContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::EventHandlerListContext* CHTLJavaScriptParser::ListenConfigContext::eventHandlerList() {
  return getRuleContext<CHTLJavaScriptParser::EventHandlerListContext>(0);
}


size_t CHTLJavaScriptParser::ListenConfigContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleListenConfig;
}

void CHTLJavaScriptParser::ListenConfigContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterListenConfig(this);
}

void CHTLJavaScriptParser::ListenConfigContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitListenConfig(this);
}

CHTLJavaScriptParser::ListenConfigContext* CHTLJavaScriptParser::listenConfig() {
  ListenConfigContext *_localctx = _tracker.createInstance<ListenConfigContext>(_ctx, getState());
  enterRule(_localctx, 20, CHTLJavaScriptParser::RuleListenConfig);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(478);
    match(CHTLJavaScriptParser::T__15);
    setState(479);
    eventHandlerList();
    setState(480);
    match(CHTLJavaScriptParser::T__16);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EventHandlerListContext ------------------------------------------------------------------

CHTLJavaScriptParser::EventHandlerListContext::EventHandlerListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::EventHandlerContext *> CHTLJavaScriptParser::EventHandlerListContext::eventHandler() {
  return getRuleContexts<CHTLJavaScriptParser::EventHandlerContext>();
}

CHTLJavaScriptParser::EventHandlerContext* CHTLJavaScriptParser::EventHandlerListContext::eventHandler(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::EventHandlerContext>(i);
}


size_t CHTLJavaScriptParser::EventHandlerListContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleEventHandlerList;
}

void CHTLJavaScriptParser::EventHandlerListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEventHandlerList(this);
}

void CHTLJavaScriptParser::EventHandlerListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEventHandlerList(this);
}

CHTLJavaScriptParser::EventHandlerListContext* CHTLJavaScriptParser::eventHandlerList() {
  EventHandlerListContext *_localctx = _tracker.createInstance<EventHandlerListContext>(_ctx, getState());
  enterRule(_localctx, 22, CHTLJavaScriptParser::RuleEventHandlerList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(482);
    eventHandler();
    setState(487);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CHTLJavaScriptParser::T__17) {
      setState(483);
      match(CHTLJavaScriptParser::T__17);
      setState(484);
      eventHandler();
      setState(489);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EventHandlerContext ------------------------------------------------------------------

CHTLJavaScriptParser::EventHandlerContext::EventHandlerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CHTLJavaScriptParser::EventHandlerContext::IDENTIFIER() {
  return getToken(CHTLJavaScriptParser::IDENTIFIER, 0);
}

CHTLJavaScriptParser::AssignmentExpressionContext* CHTLJavaScriptParser::EventHandlerContext::assignmentExpression() {
  return getRuleContext<CHTLJavaScriptParser::AssignmentExpressionContext>(0);
}

CHTLJavaScriptParser::ArrowFunctionContext* CHTLJavaScriptParser::EventHandlerContext::arrowFunction() {
  return getRuleContext<CHTLJavaScriptParser::ArrowFunctionContext>(0);
}

CHTLJavaScriptParser::FunctionExpressionContext* CHTLJavaScriptParser::EventHandlerContext::functionExpression() {
  return getRuleContext<CHTLJavaScriptParser::FunctionExpressionContext>(0);
}


size_t CHTLJavaScriptParser::EventHandlerContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleEventHandler;
}

void CHTLJavaScriptParser::EventHandlerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEventHandler(this);
}

void CHTLJavaScriptParser::EventHandlerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEventHandler(this);
}

CHTLJavaScriptParser::EventHandlerContext* CHTLJavaScriptParser::eventHandler() {
  EventHandlerContext *_localctx = _tracker.createInstance<EventHandlerContext>(_ctx, getState());
  enterRule(_localctx, 24, CHTLJavaScriptParser::RuleEventHandler);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(490);
    match(CHTLJavaScriptParser::IDENTIFIER);
    setState(491);
    match(CHTLJavaScriptParser::T__18);
    setState(495);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      setState(492);
      assignmentExpression();
      break;
    }

    case 2: {
      setState(493);
      arrowFunction();
      break;
    }

    case 3: {
      setState(494);
      functionExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DelegateConfigContext ------------------------------------------------------------------

CHTLJavaScriptParser::DelegateConfigContext::DelegateConfigContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::DelegatePropertyContext *> CHTLJavaScriptParser::DelegateConfigContext::delegateProperty() {
  return getRuleContexts<CHTLJavaScriptParser::DelegatePropertyContext>();
}

CHTLJavaScriptParser::DelegatePropertyContext* CHTLJavaScriptParser::DelegateConfigContext::delegateProperty(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::DelegatePropertyContext>(i);
}


size_t CHTLJavaScriptParser::DelegateConfigContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleDelegateConfig;
}

void CHTLJavaScriptParser::DelegateConfigContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDelegateConfig(this);
}

void CHTLJavaScriptParser::DelegateConfigContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDelegateConfig(this);
}

CHTLJavaScriptParser::DelegateConfigContext* CHTLJavaScriptParser::delegateConfig() {
  DelegateConfigContext *_localctx = _tracker.createInstance<DelegateConfigContext>(_ctx, getState());
  enterRule(_localctx, 26, CHTLJavaScriptParser::RuleDelegateConfig);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(497);
    match(CHTLJavaScriptParser::T__15);
    setState(498);
    delegateProperty();
    setState(503);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CHTLJavaScriptParser::T__17) {
      setState(499);
      match(CHTLJavaScriptParser::T__17);
      setState(500);
      delegateProperty();
      setState(505);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(506);
    match(CHTLJavaScriptParser::T__16);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DelegatePropertyContext ------------------------------------------------------------------

CHTLJavaScriptParser::DelegatePropertyContext::DelegatePropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ChtlSelectorContext* CHTLJavaScriptParser::DelegatePropertyContext::chtlSelector() {
  return getRuleContext<CHTLJavaScriptParser::ChtlSelectorContext>(0);
}

CHTLJavaScriptParser::SelectorArrayContext* CHTLJavaScriptParser::DelegatePropertyContext::selectorArray() {
  return getRuleContext<CHTLJavaScriptParser::SelectorArrayContext>(0);
}

CHTLJavaScriptParser::EventHandlerContext* CHTLJavaScriptParser::DelegatePropertyContext::eventHandler() {
  return getRuleContext<CHTLJavaScriptParser::EventHandlerContext>(0);
}


size_t CHTLJavaScriptParser::DelegatePropertyContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleDelegateProperty;
}

void CHTLJavaScriptParser::DelegatePropertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDelegateProperty(this);
}

void CHTLJavaScriptParser::DelegatePropertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDelegateProperty(this);
}

CHTLJavaScriptParser::DelegatePropertyContext* CHTLJavaScriptParser::delegateProperty() {
  DelegatePropertyContext *_localctx = _tracker.createInstance<DelegatePropertyContext>(_ctx, getState());
  enterRule(_localctx, 28, CHTLJavaScriptParser::RuleDelegateProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(515);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CHTLJavaScriptParser::T__19: {
        enterOuterAlt(_localctx, 1);
        setState(508);
        match(CHTLJavaScriptParser::T__19);
        setState(509);
        match(CHTLJavaScriptParser::T__18);
        setState(512);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case CHTLJavaScriptParser::T__1: {
            setState(510);
            chtlSelector();
            break;
          }

          case CHTLJavaScriptParser::T__5: {
            setState(511);
            selectorArray();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case CHTLJavaScriptParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(514);
        eventHandler();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectorArrayContext ------------------------------------------------------------------

CHTLJavaScriptParser::SelectorArrayContext::SelectorArrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::ChtlSelectorContext *> CHTLJavaScriptParser::SelectorArrayContext::chtlSelector() {
  return getRuleContexts<CHTLJavaScriptParser::ChtlSelectorContext>();
}

CHTLJavaScriptParser::ChtlSelectorContext* CHTLJavaScriptParser::SelectorArrayContext::chtlSelector(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::ChtlSelectorContext>(i);
}


size_t CHTLJavaScriptParser::SelectorArrayContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleSelectorArray;
}

void CHTLJavaScriptParser::SelectorArrayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectorArray(this);
}

void CHTLJavaScriptParser::SelectorArrayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectorArray(this);
}

CHTLJavaScriptParser::SelectorArrayContext* CHTLJavaScriptParser::selectorArray() {
  SelectorArrayContext *_localctx = _tracker.createInstance<SelectorArrayContext>(_ctx, getState());
  enterRule(_localctx, 30, CHTLJavaScriptParser::RuleSelectorArray);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(517);
    match(CHTLJavaScriptParser::T__5);
    setState(518);
    chtlSelector();
    setState(523);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CHTLJavaScriptParser::T__17) {
      setState(519);
      match(CHTLJavaScriptParser::T__17);
      setState(520);
      chtlSelector();
      setState(525);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(526);
    match(CHTLJavaScriptParser::T__6);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnimateConfigContext ------------------------------------------------------------------

CHTLJavaScriptParser::AnimateConfigContext::AnimateConfigContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::AnimatePropertyContext *> CHTLJavaScriptParser::AnimateConfigContext::animateProperty() {
  return getRuleContexts<CHTLJavaScriptParser::AnimatePropertyContext>();
}

CHTLJavaScriptParser::AnimatePropertyContext* CHTLJavaScriptParser::AnimateConfigContext::animateProperty(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::AnimatePropertyContext>(i);
}


size_t CHTLJavaScriptParser::AnimateConfigContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleAnimateConfig;
}

void CHTLJavaScriptParser::AnimateConfigContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnimateConfig(this);
}

void CHTLJavaScriptParser::AnimateConfigContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnimateConfig(this);
}

CHTLJavaScriptParser::AnimateConfigContext* CHTLJavaScriptParser::animateConfig() {
  AnimateConfigContext *_localctx = _tracker.createInstance<AnimateConfigContext>(_ctx, getState());
  enterRule(_localctx, 32, CHTLJavaScriptParser::RuleAnimateConfig);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(528);
    match(CHTLJavaScriptParser::T__15);
    setState(529);
    animateProperty();
    setState(534);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CHTLJavaScriptParser::T__17) {
      setState(530);
      match(CHTLJavaScriptParser::T__17);
      setState(531);
      animateProperty();
      setState(536);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(537);
    match(CHTLJavaScriptParser::T__16);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnimatePropertyContext ------------------------------------------------------------------

CHTLJavaScriptParser::AnimatePropertyContext::AnimatePropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CHTLJavaScriptParser::AnimatePropertyContext::NUMBER() {
  return getToken(CHTLJavaScriptParser::NUMBER, 0);
}

tree::TerminalNode* CHTLJavaScriptParser::AnimatePropertyContext::IDENTIFIER() {
  return getToken(CHTLJavaScriptParser::IDENTIFIER, 0);
}

tree::TerminalNode* CHTLJavaScriptParser::AnimatePropertyContext::STRING_LITERAL() {
  return getToken(CHTLJavaScriptParser::STRING_LITERAL, 0);
}

CHTLJavaScriptParser::CssBlockContext* CHTLJavaScriptParser::AnimatePropertyContext::cssBlock() {
  return getRuleContext<CHTLJavaScriptParser::CssBlockContext>(0);
}

CHTLJavaScriptParser::WhenArrayContext* CHTLJavaScriptParser::AnimatePropertyContext::whenArray() {
  return getRuleContext<CHTLJavaScriptParser::WhenArrayContext>(0);
}

CHTLJavaScriptParser::AssignmentExpressionContext* CHTLJavaScriptParser::AnimatePropertyContext::assignmentExpression() {
  return getRuleContext<CHTLJavaScriptParser::AssignmentExpressionContext>(0);
}

CHTLJavaScriptParser::ArrowFunctionContext* CHTLJavaScriptParser::AnimatePropertyContext::arrowFunction() {
  return getRuleContext<CHTLJavaScriptParser::ArrowFunctionContext>(0);
}

CHTLJavaScriptParser::FunctionExpressionContext* CHTLJavaScriptParser::AnimatePropertyContext::functionExpression() {
  return getRuleContext<CHTLJavaScriptParser::FunctionExpressionContext>(0);
}


size_t CHTLJavaScriptParser::AnimatePropertyContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleAnimateProperty;
}

void CHTLJavaScriptParser::AnimatePropertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnimateProperty(this);
}

void CHTLJavaScriptParser::AnimatePropertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnimateProperty(this);
}

CHTLJavaScriptParser::AnimatePropertyContext* CHTLJavaScriptParser::animateProperty() {
  AnimatePropertyContext *_localctx = _tracker.createInstance<AnimatePropertyContext>(_ctx, getState());
  enterRule(_localctx, 34, CHTLJavaScriptParser::RuleAnimateProperty);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(570);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CHTLJavaScriptParser::T__20: {
        enterOuterAlt(_localctx, 1);
        setState(539);
        match(CHTLJavaScriptParser::T__20);
        setState(540);
        match(CHTLJavaScriptParser::T__18);
        setState(541);
        match(CHTLJavaScriptParser::NUMBER);
        break;
      }

      case CHTLJavaScriptParser::T__21: {
        enterOuterAlt(_localctx, 2);
        setState(542);
        match(CHTLJavaScriptParser::T__21);
        setState(543);
        match(CHTLJavaScriptParser::T__18);
        setState(544);
        _la = _input->LA(1);
        if (!(_la == CHTLJavaScriptParser::IDENTIFIER

        || _la == CHTLJavaScriptParser::STRING_LITERAL)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case CHTLJavaScriptParser::T__22: {
        enterOuterAlt(_localctx, 3);
        setState(545);
        match(CHTLJavaScriptParser::T__22);
        setState(546);
        match(CHTLJavaScriptParser::T__18);
        setState(547);
        cssBlock();
        break;
      }

      case CHTLJavaScriptParser::T__23: {
        enterOuterAlt(_localctx, 4);
        setState(548);
        match(CHTLJavaScriptParser::T__23);
        setState(549);
        match(CHTLJavaScriptParser::T__18);
        setState(550);
        whenArray();
        break;
      }

      case CHTLJavaScriptParser::T__24: {
        enterOuterAlt(_localctx, 5);
        setState(551);
        match(CHTLJavaScriptParser::T__24);
        setState(552);
        match(CHTLJavaScriptParser::T__18);
        setState(553);
        cssBlock();
        break;
      }

      case CHTLJavaScriptParser::T__25: {
        enterOuterAlt(_localctx, 6);
        setState(554);
        match(CHTLJavaScriptParser::T__25);
        setState(555);
        match(CHTLJavaScriptParser::T__18);
        setState(556);
        _la = _input->LA(1);
        if (!(_la == CHTLJavaScriptParser::T__26 || _la == CHTLJavaScriptParser::NUMBER)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case CHTLJavaScriptParser::T__27: {
        enterOuterAlt(_localctx, 7);
        setState(557);
        match(CHTLJavaScriptParser::T__27);
        setState(558);
        match(CHTLJavaScriptParser::T__18);
        setState(559);
        _la = _input->LA(1);
        if (!(_la == CHTLJavaScriptParser::IDENTIFIER

        || _la == CHTLJavaScriptParser::STRING_LITERAL)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case CHTLJavaScriptParser::T__28: {
        enterOuterAlt(_localctx, 8);
        setState(560);
        match(CHTLJavaScriptParser::T__28);
        setState(561);
        match(CHTLJavaScriptParser::T__18);
        setState(562);
        match(CHTLJavaScriptParser::NUMBER);
        break;
      }

      case CHTLJavaScriptParser::T__29: {
        enterOuterAlt(_localctx, 9);
        setState(563);
        match(CHTLJavaScriptParser::T__29);
        setState(564);
        match(CHTLJavaScriptParser::T__18);
        setState(568);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
        case 1: {
          setState(565);
          assignmentExpression();
          break;
        }

        case 2: {
          setState(566);
          arrowFunction();
          break;
        }

        case 3: {
          setState(567);
          functionExpression();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CssBlockContext ------------------------------------------------------------------

CHTLJavaScriptParser::CssBlockContext::CssBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::CssPropertyContext *> CHTLJavaScriptParser::CssBlockContext::cssProperty() {
  return getRuleContexts<CHTLJavaScriptParser::CssPropertyContext>();
}

CHTLJavaScriptParser::CssPropertyContext* CHTLJavaScriptParser::CssBlockContext::cssProperty(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::CssPropertyContext>(i);
}


size_t CHTLJavaScriptParser::CssBlockContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleCssBlock;
}

void CHTLJavaScriptParser::CssBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCssBlock(this);
}

void CHTLJavaScriptParser::CssBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCssBlock(this);
}

CHTLJavaScriptParser::CssBlockContext* CHTLJavaScriptParser::cssBlock() {
  CssBlockContext *_localctx = _tracker.createInstance<CssBlockContext>(_ctx, getState());
  enterRule(_localctx, 36, CHTLJavaScriptParser::RuleCssBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(572);
    match(CHTLJavaScriptParser::T__15);
    setState(576);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CHTLJavaScriptParser::IDENTIFIER) {
      setState(573);
      cssProperty();
      setState(578);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(579);
    match(CHTLJavaScriptParser::T__16);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CssPropertyContext ------------------------------------------------------------------

CHTLJavaScriptParser::CssPropertyContext::CssPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::PropertyNameContext* CHTLJavaScriptParser::CssPropertyContext::propertyName() {
  return getRuleContext<CHTLJavaScriptParser::PropertyNameContext>(0);
}

CHTLJavaScriptParser::PropertyValueContext* CHTLJavaScriptParser::CssPropertyContext::propertyValue() {
  return getRuleContext<CHTLJavaScriptParser::PropertyValueContext>(0);
}


size_t CHTLJavaScriptParser::CssPropertyContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleCssProperty;
}

void CHTLJavaScriptParser::CssPropertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCssProperty(this);
}

void CHTLJavaScriptParser::CssPropertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCssProperty(this);
}

CHTLJavaScriptParser::CssPropertyContext* CHTLJavaScriptParser::cssProperty() {
  CssPropertyContext *_localctx = _tracker.createInstance<CssPropertyContext>(_ctx, getState());
  enterRule(_localctx, 38, CHTLJavaScriptParser::RuleCssProperty);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(581);
    propertyName();
    setState(582);
    match(CHTLJavaScriptParser::T__18);
    setState(583);
    propertyValue();
    setState(585);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      setState(584);
      _la = _input->LA(1);
      if (!(_la == CHTLJavaScriptParser::T__17

      || _la == CHTLJavaScriptParser::T__30)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyNameContext ------------------------------------------------------------------

CHTLJavaScriptParser::PropertyNameContext::PropertyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CHTLJavaScriptParser::PropertyNameContext::IDENTIFIER() {
  return getTokens(CHTLJavaScriptParser::IDENTIFIER);
}

tree::TerminalNode* CHTLJavaScriptParser::PropertyNameContext::IDENTIFIER(size_t i) {
  return getToken(CHTLJavaScriptParser::IDENTIFIER, i);
}


size_t CHTLJavaScriptParser::PropertyNameContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RulePropertyName;
}

void CHTLJavaScriptParser::PropertyNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPropertyName(this);
}

void CHTLJavaScriptParser::PropertyNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPropertyName(this);
}

CHTLJavaScriptParser::PropertyNameContext* CHTLJavaScriptParser::propertyName() {
  PropertyNameContext *_localctx = _tracker.createInstance<PropertyNameContext>(_ctx, getState());
  enterRule(_localctx, 40, CHTLJavaScriptParser::RulePropertyName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(587);
    match(CHTLJavaScriptParser::IDENTIFIER);
    setState(592);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CHTLJavaScriptParser::T__31) {
      setState(588);
      match(CHTLJavaScriptParser::T__31);
      setState(589);
      match(CHTLJavaScriptParser::IDENTIFIER);
      setState(594);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyValueContext ------------------------------------------------------------------

CHTLJavaScriptParser::PropertyValueContext::PropertyValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CHTLJavaScriptParser::PropertyValueContext::STRING_LITERAL() {
  return getToken(CHTLJavaScriptParser::STRING_LITERAL, 0);
}

tree::TerminalNode* CHTLJavaScriptParser::PropertyValueContext::NUMBER() {
  return getToken(CHTLJavaScriptParser::NUMBER, 0);
}

tree::TerminalNode* CHTLJavaScriptParser::PropertyValueContext::IDENTIFIER() {
  return getToken(CHTLJavaScriptParser::IDENTIFIER, 0);
}

CHTLJavaScriptParser::CssFunctionContext* CHTLJavaScriptParser::PropertyValueContext::cssFunction() {
  return getRuleContext<CHTLJavaScriptParser::CssFunctionContext>(0);
}


size_t CHTLJavaScriptParser::PropertyValueContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RulePropertyValue;
}

void CHTLJavaScriptParser::PropertyValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPropertyValue(this);
}

void CHTLJavaScriptParser::PropertyValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPropertyValue(this);
}

CHTLJavaScriptParser::PropertyValueContext* CHTLJavaScriptParser::propertyValue() {
  PropertyValueContext *_localctx = _tracker.createInstance<PropertyValueContext>(_ctx, getState());
  enterRule(_localctx, 42, CHTLJavaScriptParser::RulePropertyValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(599);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(595);
      match(CHTLJavaScriptParser::STRING_LITERAL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(596);
      match(CHTLJavaScriptParser::NUMBER);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(597);
      match(CHTLJavaScriptParser::IDENTIFIER);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(598);
      cssFunction();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CssFunctionContext ------------------------------------------------------------------

CHTLJavaScriptParser::CssFunctionContext::CssFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CHTLJavaScriptParser::CssFunctionContext::IDENTIFIER() {
  return getToken(CHTLJavaScriptParser::IDENTIFIER, 0);
}

CHTLJavaScriptParser::CssFunctionArgumentsContext* CHTLJavaScriptParser::CssFunctionContext::cssFunctionArguments() {
  return getRuleContext<CHTLJavaScriptParser::CssFunctionArgumentsContext>(0);
}


size_t CHTLJavaScriptParser::CssFunctionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleCssFunction;
}

void CHTLJavaScriptParser::CssFunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCssFunction(this);
}

void CHTLJavaScriptParser::CssFunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCssFunction(this);
}

CHTLJavaScriptParser::CssFunctionContext* CHTLJavaScriptParser::cssFunction() {
  CssFunctionContext *_localctx = _tracker.createInstance<CssFunctionContext>(_ctx, getState());
  enterRule(_localctx, 44, CHTLJavaScriptParser::RuleCssFunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(601);
    match(CHTLJavaScriptParser::IDENTIFIER);
    setState(602);
    match(CHTLJavaScriptParser::T__11);
    setState(604);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 131) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 131)) & 7) != 0)) {
      setState(603);
      cssFunctionArguments();
    }
    setState(606);
    match(CHTLJavaScriptParser::T__12);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CssFunctionArgumentsContext ------------------------------------------------------------------

CHTLJavaScriptParser::CssFunctionArgumentsContext::CssFunctionArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::PropertyValueContext *> CHTLJavaScriptParser::CssFunctionArgumentsContext::propertyValue() {
  return getRuleContexts<CHTLJavaScriptParser::PropertyValueContext>();
}

CHTLJavaScriptParser::PropertyValueContext* CHTLJavaScriptParser::CssFunctionArgumentsContext::propertyValue(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::PropertyValueContext>(i);
}


size_t CHTLJavaScriptParser::CssFunctionArgumentsContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleCssFunctionArguments;
}

void CHTLJavaScriptParser::CssFunctionArgumentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCssFunctionArguments(this);
}

void CHTLJavaScriptParser::CssFunctionArgumentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCssFunctionArguments(this);
}

CHTLJavaScriptParser::CssFunctionArgumentsContext* CHTLJavaScriptParser::cssFunctionArguments() {
  CssFunctionArgumentsContext *_localctx = _tracker.createInstance<CssFunctionArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 46, CHTLJavaScriptParser::RuleCssFunctionArguments);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(608);
    propertyValue();
    setState(613);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CHTLJavaScriptParser::T__17) {
      setState(609);
      match(CHTLJavaScriptParser::T__17);
      setState(610);
      propertyValue();
      setState(615);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhenArrayContext ------------------------------------------------------------------

CHTLJavaScriptParser::WhenArrayContext::WhenArrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::WhenItemContext *> CHTLJavaScriptParser::WhenArrayContext::whenItem() {
  return getRuleContexts<CHTLJavaScriptParser::WhenItemContext>();
}

CHTLJavaScriptParser::WhenItemContext* CHTLJavaScriptParser::WhenArrayContext::whenItem(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::WhenItemContext>(i);
}


size_t CHTLJavaScriptParser::WhenArrayContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleWhenArray;
}

void CHTLJavaScriptParser::WhenArrayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhenArray(this);
}

void CHTLJavaScriptParser::WhenArrayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhenArray(this);
}

CHTLJavaScriptParser::WhenArrayContext* CHTLJavaScriptParser::whenArray() {
  WhenArrayContext *_localctx = _tracker.createInstance<WhenArrayContext>(_ctx, getState());
  enterRule(_localctx, 48, CHTLJavaScriptParser::RuleWhenArray);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(616);
    match(CHTLJavaScriptParser::T__5);
    setState(617);
    whenItem();
    setState(622);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CHTLJavaScriptParser::T__17) {
      setState(618);
      match(CHTLJavaScriptParser::T__17);
      setState(619);
      whenItem();
      setState(624);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(625);
    match(CHTLJavaScriptParser::T__6);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhenItemContext ------------------------------------------------------------------

CHTLJavaScriptParser::WhenItemContext::WhenItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::WhenPropertyContext *> CHTLJavaScriptParser::WhenItemContext::whenProperty() {
  return getRuleContexts<CHTLJavaScriptParser::WhenPropertyContext>();
}

CHTLJavaScriptParser::WhenPropertyContext* CHTLJavaScriptParser::WhenItemContext::whenProperty(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::WhenPropertyContext>(i);
}


size_t CHTLJavaScriptParser::WhenItemContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleWhenItem;
}

void CHTLJavaScriptParser::WhenItemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhenItem(this);
}

void CHTLJavaScriptParser::WhenItemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhenItem(this);
}

CHTLJavaScriptParser::WhenItemContext* CHTLJavaScriptParser::whenItem() {
  WhenItemContext *_localctx = _tracker.createInstance<WhenItemContext>(_ctx, getState());
  enterRule(_localctx, 50, CHTLJavaScriptParser::RuleWhenItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(627);
    match(CHTLJavaScriptParser::T__15);
    setState(628);
    whenProperty();
    setState(633);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CHTLJavaScriptParser::T__17) {
      setState(629);
      match(CHTLJavaScriptParser::T__17);
      setState(630);
      whenProperty();
      setState(635);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(636);
    match(CHTLJavaScriptParser::T__16);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhenPropertyContext ------------------------------------------------------------------

CHTLJavaScriptParser::WhenPropertyContext::WhenPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CHTLJavaScriptParser::WhenPropertyContext::NUMBER() {
  return getToken(CHTLJavaScriptParser::NUMBER, 0);
}

CHTLJavaScriptParser::CssPropertyContext* CHTLJavaScriptParser::WhenPropertyContext::cssProperty() {
  return getRuleContext<CHTLJavaScriptParser::CssPropertyContext>(0);
}


size_t CHTLJavaScriptParser::WhenPropertyContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleWhenProperty;
}

void CHTLJavaScriptParser::WhenPropertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhenProperty(this);
}

void CHTLJavaScriptParser::WhenPropertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhenProperty(this);
}

CHTLJavaScriptParser::WhenPropertyContext* CHTLJavaScriptParser::whenProperty() {
  WhenPropertyContext *_localctx = _tracker.createInstance<WhenPropertyContext>(_ctx, getState());
  enterRule(_localctx, 52, CHTLJavaScriptParser::RuleWhenProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(642);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CHTLJavaScriptParser::T__32: {
        enterOuterAlt(_localctx, 1);
        setState(638);
        match(CHTLJavaScriptParser::T__32);
        setState(639);
        match(CHTLJavaScriptParser::T__18);
        setState(640);
        match(CHTLJavaScriptParser::NUMBER);
        break;
      }

      case CHTLJavaScriptParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(641);
        cssProperty();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

CHTLJavaScriptParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CHTLJavaScriptParser::LiteralContext::DecimalLiteral() {
  return getToken(CHTLJavaScriptParser::DecimalLiteral, 0);
}

tree::TerminalNode* CHTLJavaScriptParser::LiteralContext::HexIntegerLiteral() {
  return getToken(CHTLJavaScriptParser::HexIntegerLiteral, 0);
}

tree::TerminalNode* CHTLJavaScriptParser::LiteralContext::OctalIntegerLiteral() {
  return getToken(CHTLJavaScriptParser::OctalIntegerLiteral, 0);
}

tree::TerminalNode* CHTLJavaScriptParser::LiteralContext::OctalIntegerLiteral2() {
  return getToken(CHTLJavaScriptParser::OctalIntegerLiteral2, 0);
}

tree::TerminalNode* CHTLJavaScriptParser::LiteralContext::BinaryIntegerLiteral() {
  return getToken(CHTLJavaScriptParser::BinaryIntegerLiteral, 0);
}

tree::TerminalNode* CHTLJavaScriptParser::LiteralContext::BooleanLiteral() {
  return getToken(CHTLJavaScriptParser::BooleanLiteral, 0);
}

tree::TerminalNode* CHTLJavaScriptParser::LiteralContext::StringLiteral() {
  return getToken(CHTLJavaScriptParser::StringLiteral, 0);
}

tree::TerminalNode* CHTLJavaScriptParser::LiteralContext::NullLiteral() {
  return getToken(CHTLJavaScriptParser::NullLiteral, 0);
}

tree::TerminalNode* CHTLJavaScriptParser::LiteralContext::UnquotedLiteral() {
  return getToken(CHTLJavaScriptParser::UnquotedLiteral, 0);
}


size_t CHTLJavaScriptParser::LiteralContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleLiteral;
}

void CHTLJavaScriptParser::LiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral(this);
}

void CHTLJavaScriptParser::LiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral(this);
}

CHTLJavaScriptParser::LiteralContext* CHTLJavaScriptParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 54, CHTLJavaScriptParser::RuleLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(644);
    _la = _input->LA(1);
    if (!(((((_la - 135) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 135)) & 4177921) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramContext ------------------------------------------------------------------

CHTLJavaScriptParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CHTLJavaScriptParser::ProgramContext::EOF() {
  return getToken(CHTLJavaScriptParser::EOF, 0);
}

CHTLJavaScriptParser::SourceElementsContext* CHTLJavaScriptParser::ProgramContext::sourceElements() {
  return getRuleContext<CHTLJavaScriptParser::SourceElementsContext>(0);
}


size_t CHTLJavaScriptParser::ProgramContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleProgram;
}

void CHTLJavaScriptParser::ProgramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram(this);
}

void CHTLJavaScriptParser::ProgramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram(this);
}

CHTLJavaScriptParser::ProgramContext* CHTLJavaScriptParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 56, CHTLJavaScriptParser::RuleProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(647);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3741290853428204358) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 434580871366836243) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 132)) & 33431561) != 0)) {
      setState(646);
      sourceElements();
    }
    setState(649);
    match(CHTLJavaScriptParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SourceElementsContext ------------------------------------------------------------------

CHTLJavaScriptParser::SourceElementsContext::SourceElementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::SourceElementContext *> CHTLJavaScriptParser::SourceElementsContext::sourceElement() {
  return getRuleContexts<CHTLJavaScriptParser::SourceElementContext>();
}

CHTLJavaScriptParser::SourceElementContext* CHTLJavaScriptParser::SourceElementsContext::sourceElement(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::SourceElementContext>(i);
}


size_t CHTLJavaScriptParser::SourceElementsContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleSourceElements;
}

void CHTLJavaScriptParser::SourceElementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSourceElements(this);
}

void CHTLJavaScriptParser::SourceElementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSourceElements(this);
}

CHTLJavaScriptParser::SourceElementsContext* CHTLJavaScriptParser::sourceElements() {
  SourceElementsContext *_localctx = _tracker.createInstance<SourceElementsContext>(_ctx, getState());
  enterRule(_localctx, 58, CHTLJavaScriptParser::RuleSourceElements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(652); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(651);
      sourceElement();
      setState(654); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3741290853428204358) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 434580871366836243) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 132)) & 33431561) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SourceElementContext ------------------------------------------------------------------

CHTLJavaScriptParser::SourceElementContext::SourceElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::StatementContext* CHTLJavaScriptParser::SourceElementContext::statement() {
  return getRuleContext<CHTLJavaScriptParser::StatementContext>(0);
}

CHTLJavaScriptParser::DeclarationContext* CHTLJavaScriptParser::SourceElementContext::declaration() {
  return getRuleContext<CHTLJavaScriptParser::DeclarationContext>(0);
}


size_t CHTLJavaScriptParser::SourceElementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleSourceElement;
}

void CHTLJavaScriptParser::SourceElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSourceElement(this);
}

void CHTLJavaScriptParser::SourceElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSourceElement(this);
}

CHTLJavaScriptParser::SourceElementContext* CHTLJavaScriptParser::sourceElement() {
  SourceElementContext *_localctx = _tracker.createInstance<SourceElementContext>(_ctx, getState());
  enterRule(_localctx, 60, CHTLJavaScriptParser::RuleSourceElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(658);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(656);
      statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(657);
      declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationContext ------------------------------------------------------------------

CHTLJavaScriptParser::DeclarationContext::DeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::HoistableDeclarationContext* CHTLJavaScriptParser::DeclarationContext::hoistableDeclaration() {
  return getRuleContext<CHTLJavaScriptParser::HoistableDeclarationContext>(0);
}

CHTLJavaScriptParser::ClassDeclarationContext* CHTLJavaScriptParser::DeclarationContext::classDeclaration() {
  return getRuleContext<CHTLJavaScriptParser::ClassDeclarationContext>(0);
}

CHTLJavaScriptParser::LexicalDeclarationContext* CHTLJavaScriptParser::DeclarationContext::lexicalDeclaration() {
  return getRuleContext<CHTLJavaScriptParser::LexicalDeclarationContext>(0);
}


size_t CHTLJavaScriptParser::DeclarationContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleDeclaration;
}

void CHTLJavaScriptParser::DeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclaration(this);
}

void CHTLJavaScriptParser::DeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclaration(this);
}

CHTLJavaScriptParser::DeclarationContext* CHTLJavaScriptParser::declaration() {
  DeclarationContext *_localctx = _tracker.createInstance<DeclarationContext>(_ctx, getState());
  enterRule(_localctx, 62, CHTLJavaScriptParser::RuleDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(663);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CHTLJavaScriptParser::T__33:
      case CHTLJavaScriptParser::T__35: {
        enterOuterAlt(_localctx, 1);
        setState(660);
        hoistableDeclaration();
        break;
      }

      case CHTLJavaScriptParser::T__36: {
        enterOuterAlt(_localctx, 2);
        setState(661);
        classDeclaration();
        break;
      }

      case CHTLJavaScriptParser::T__41:
      case CHTLJavaScriptParser::T__42: {
        enterOuterAlt(_localctx, 3);
        setState(662);
        lexicalDeclaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HoistableDeclarationContext ------------------------------------------------------------------

CHTLJavaScriptParser::HoistableDeclarationContext::HoistableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::FunctionDeclarationContext* CHTLJavaScriptParser::HoistableDeclarationContext::functionDeclaration() {
  return getRuleContext<CHTLJavaScriptParser::FunctionDeclarationContext>(0);
}

CHTLJavaScriptParser::GeneratorDeclarationContext* CHTLJavaScriptParser::HoistableDeclarationContext::generatorDeclaration() {
  return getRuleContext<CHTLJavaScriptParser::GeneratorDeclarationContext>(0);
}

CHTLJavaScriptParser::AsyncFunctionDeclarationContext* CHTLJavaScriptParser::HoistableDeclarationContext::asyncFunctionDeclaration() {
  return getRuleContext<CHTLJavaScriptParser::AsyncFunctionDeclarationContext>(0);
}

CHTLJavaScriptParser::AsyncGeneratorDeclarationContext* CHTLJavaScriptParser::HoistableDeclarationContext::asyncGeneratorDeclaration() {
  return getRuleContext<CHTLJavaScriptParser::AsyncGeneratorDeclarationContext>(0);
}


size_t CHTLJavaScriptParser::HoistableDeclarationContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleHoistableDeclaration;
}

void CHTLJavaScriptParser::HoistableDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHoistableDeclaration(this);
}

void CHTLJavaScriptParser::HoistableDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHoistableDeclaration(this);
}

CHTLJavaScriptParser::HoistableDeclarationContext* CHTLJavaScriptParser::hoistableDeclaration() {
  HoistableDeclarationContext *_localctx = _tracker.createInstance<HoistableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 64, CHTLJavaScriptParser::RuleHoistableDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(669);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(665);
      functionDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(666);
      generatorDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(667);
      asyncFunctionDeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(668);
      asyncGeneratorDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionDeclarationContext ------------------------------------------------------------------

CHTLJavaScriptParser::FunctionDeclarationContext::FunctionDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::IdentifierContext* CHTLJavaScriptParser::FunctionDeclarationContext::identifier() {
  return getRuleContext<CHTLJavaScriptParser::IdentifierContext>(0);
}

CHTLJavaScriptParser::FunctionBodyContext* CHTLJavaScriptParser::FunctionDeclarationContext::functionBody() {
  return getRuleContext<CHTLJavaScriptParser::FunctionBodyContext>(0);
}

CHTLJavaScriptParser::FormalParameterListContext* CHTLJavaScriptParser::FunctionDeclarationContext::formalParameterList() {
  return getRuleContext<CHTLJavaScriptParser::FormalParameterListContext>(0);
}


size_t CHTLJavaScriptParser::FunctionDeclarationContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleFunctionDeclaration;
}

void CHTLJavaScriptParser::FunctionDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionDeclaration(this);
}

void CHTLJavaScriptParser::FunctionDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionDeclaration(this);
}

CHTLJavaScriptParser::FunctionDeclarationContext* CHTLJavaScriptParser::functionDeclaration() {
  FunctionDeclarationContext *_localctx = _tracker.createInstance<FunctionDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 66, CHTLJavaScriptParser::RuleFunctionDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(671);
    match(CHTLJavaScriptParser::T__33);
    setState(672);
    identifier();
    setState(673);
    match(CHTLJavaScriptParser::T__11);
    setState(675);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251799813750848) != 0) || ((((_la - 115) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 115)) & 131137) != 0)) {
      setState(674);
      formalParameterList();
    }
    setState(677);
    match(CHTLJavaScriptParser::T__12);
    setState(678);
    match(CHTLJavaScriptParser::T__15);
    setState(679);
    functionBody();
    setState(680);
    match(CHTLJavaScriptParser::T__16);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GeneratorDeclarationContext ------------------------------------------------------------------

CHTLJavaScriptParser::GeneratorDeclarationContext::GeneratorDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::IdentifierContext* CHTLJavaScriptParser::GeneratorDeclarationContext::identifier() {
  return getRuleContext<CHTLJavaScriptParser::IdentifierContext>(0);
}

CHTLJavaScriptParser::FunctionBodyContext* CHTLJavaScriptParser::GeneratorDeclarationContext::functionBody() {
  return getRuleContext<CHTLJavaScriptParser::FunctionBodyContext>(0);
}

CHTLJavaScriptParser::FormalParameterListContext* CHTLJavaScriptParser::GeneratorDeclarationContext::formalParameterList() {
  return getRuleContext<CHTLJavaScriptParser::FormalParameterListContext>(0);
}


size_t CHTLJavaScriptParser::GeneratorDeclarationContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleGeneratorDeclaration;
}

void CHTLJavaScriptParser::GeneratorDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneratorDeclaration(this);
}

void CHTLJavaScriptParser::GeneratorDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneratorDeclaration(this);
}

CHTLJavaScriptParser::GeneratorDeclarationContext* CHTLJavaScriptParser::generatorDeclaration() {
  GeneratorDeclarationContext *_localctx = _tracker.createInstance<GeneratorDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 68, CHTLJavaScriptParser::RuleGeneratorDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(682);
    match(CHTLJavaScriptParser::T__33);
    setState(683);
    match(CHTLJavaScriptParser::T__34);
    setState(684);
    identifier();
    setState(685);
    match(CHTLJavaScriptParser::T__11);
    setState(687);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251799813750848) != 0) || ((((_la - 115) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 115)) & 131137) != 0)) {
      setState(686);
      formalParameterList();
    }
    setState(689);
    match(CHTLJavaScriptParser::T__12);
    setState(690);
    match(CHTLJavaScriptParser::T__15);
    setState(691);
    functionBody();
    setState(692);
    match(CHTLJavaScriptParser::T__16);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AsyncFunctionDeclarationContext ------------------------------------------------------------------

CHTLJavaScriptParser::AsyncFunctionDeclarationContext::AsyncFunctionDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::IdentifierContext* CHTLJavaScriptParser::AsyncFunctionDeclarationContext::identifier() {
  return getRuleContext<CHTLJavaScriptParser::IdentifierContext>(0);
}

CHTLJavaScriptParser::FunctionBodyContext* CHTLJavaScriptParser::AsyncFunctionDeclarationContext::functionBody() {
  return getRuleContext<CHTLJavaScriptParser::FunctionBodyContext>(0);
}

CHTLJavaScriptParser::FormalParameterListContext* CHTLJavaScriptParser::AsyncFunctionDeclarationContext::formalParameterList() {
  return getRuleContext<CHTLJavaScriptParser::FormalParameterListContext>(0);
}


size_t CHTLJavaScriptParser::AsyncFunctionDeclarationContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleAsyncFunctionDeclaration;
}

void CHTLJavaScriptParser::AsyncFunctionDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAsyncFunctionDeclaration(this);
}

void CHTLJavaScriptParser::AsyncFunctionDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAsyncFunctionDeclaration(this);
}

CHTLJavaScriptParser::AsyncFunctionDeclarationContext* CHTLJavaScriptParser::asyncFunctionDeclaration() {
  AsyncFunctionDeclarationContext *_localctx = _tracker.createInstance<AsyncFunctionDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 70, CHTLJavaScriptParser::RuleAsyncFunctionDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(694);
    match(CHTLJavaScriptParser::T__35);
    setState(695);
    match(CHTLJavaScriptParser::T__33);
    setState(696);
    identifier();
    setState(697);
    match(CHTLJavaScriptParser::T__11);
    setState(699);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251799813750848) != 0) || ((((_la - 115) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 115)) & 131137) != 0)) {
      setState(698);
      formalParameterList();
    }
    setState(701);
    match(CHTLJavaScriptParser::T__12);
    setState(702);
    match(CHTLJavaScriptParser::T__15);
    setState(703);
    functionBody();
    setState(704);
    match(CHTLJavaScriptParser::T__16);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AsyncGeneratorDeclarationContext ------------------------------------------------------------------

CHTLJavaScriptParser::AsyncGeneratorDeclarationContext::AsyncGeneratorDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::IdentifierContext* CHTLJavaScriptParser::AsyncGeneratorDeclarationContext::identifier() {
  return getRuleContext<CHTLJavaScriptParser::IdentifierContext>(0);
}

CHTLJavaScriptParser::FunctionBodyContext* CHTLJavaScriptParser::AsyncGeneratorDeclarationContext::functionBody() {
  return getRuleContext<CHTLJavaScriptParser::FunctionBodyContext>(0);
}

CHTLJavaScriptParser::FormalParameterListContext* CHTLJavaScriptParser::AsyncGeneratorDeclarationContext::formalParameterList() {
  return getRuleContext<CHTLJavaScriptParser::FormalParameterListContext>(0);
}


size_t CHTLJavaScriptParser::AsyncGeneratorDeclarationContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleAsyncGeneratorDeclaration;
}

void CHTLJavaScriptParser::AsyncGeneratorDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAsyncGeneratorDeclaration(this);
}

void CHTLJavaScriptParser::AsyncGeneratorDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAsyncGeneratorDeclaration(this);
}

CHTLJavaScriptParser::AsyncGeneratorDeclarationContext* CHTLJavaScriptParser::asyncGeneratorDeclaration() {
  AsyncGeneratorDeclarationContext *_localctx = _tracker.createInstance<AsyncGeneratorDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 72, CHTLJavaScriptParser::RuleAsyncGeneratorDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(706);
    match(CHTLJavaScriptParser::T__35);
    setState(707);
    match(CHTLJavaScriptParser::T__33);
    setState(708);
    match(CHTLJavaScriptParser::T__34);
    setState(709);
    identifier();
    setState(710);
    match(CHTLJavaScriptParser::T__11);
    setState(712);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251799813750848) != 0) || ((((_la - 115) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 115)) & 131137) != 0)) {
      setState(711);
      formalParameterList();
    }
    setState(714);
    match(CHTLJavaScriptParser::T__12);
    setState(715);
    match(CHTLJavaScriptParser::T__15);
    setState(716);
    functionBody();
    setState(717);
    match(CHTLJavaScriptParser::T__16);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassDeclarationContext ------------------------------------------------------------------

CHTLJavaScriptParser::ClassDeclarationContext::ClassDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::IdentifierContext* CHTLJavaScriptParser::ClassDeclarationContext::identifier() {
  return getRuleContext<CHTLJavaScriptParser::IdentifierContext>(0);
}

CHTLJavaScriptParser::ClassBodyContext* CHTLJavaScriptParser::ClassDeclarationContext::classBody() {
  return getRuleContext<CHTLJavaScriptParser::ClassBodyContext>(0);
}

CHTLJavaScriptParser::ClassExtendsContext* CHTLJavaScriptParser::ClassDeclarationContext::classExtends() {
  return getRuleContext<CHTLJavaScriptParser::ClassExtendsContext>(0);
}


size_t CHTLJavaScriptParser::ClassDeclarationContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleClassDeclaration;
}

void CHTLJavaScriptParser::ClassDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassDeclaration(this);
}

void CHTLJavaScriptParser::ClassDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassDeclaration(this);
}

CHTLJavaScriptParser::ClassDeclarationContext* CHTLJavaScriptParser::classDeclaration() {
  ClassDeclarationContext *_localctx = _tracker.createInstance<ClassDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 74, CHTLJavaScriptParser::RuleClassDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(719);
    match(CHTLJavaScriptParser::T__36);
    setState(720);
    identifier();
    setState(722);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CHTLJavaScriptParser::T__37) {
      setState(721);
      classExtends();
    }
    setState(724);
    match(CHTLJavaScriptParser::T__15);
    setState(725);
    classBody();
    setState(726);
    match(CHTLJavaScriptParser::T__16);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassExtendsContext ------------------------------------------------------------------

CHTLJavaScriptParser::ClassExtendsContext::ClassExtendsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::LeftHandSideExpressionContext* CHTLJavaScriptParser::ClassExtendsContext::leftHandSideExpression() {
  return getRuleContext<CHTLJavaScriptParser::LeftHandSideExpressionContext>(0);
}


size_t CHTLJavaScriptParser::ClassExtendsContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleClassExtends;
}

void CHTLJavaScriptParser::ClassExtendsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassExtends(this);
}

void CHTLJavaScriptParser::ClassExtendsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassExtends(this);
}

CHTLJavaScriptParser::ClassExtendsContext* CHTLJavaScriptParser::classExtends() {
  ClassExtendsContext *_localctx = _tracker.createInstance<ClassExtendsContext>(_ctx, getState());
  enterRule(_localctx, 76, CHTLJavaScriptParser::RuleClassExtends);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(728);
    match(CHTLJavaScriptParser::T__37);
    setState(729);
    leftHandSideExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassBodyContext ------------------------------------------------------------------

CHTLJavaScriptParser::ClassBodyContext::ClassBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::ClassElementContext *> CHTLJavaScriptParser::ClassBodyContext::classElement() {
  return getRuleContexts<CHTLJavaScriptParser::ClassElementContext>();
}

CHTLJavaScriptParser::ClassElementContext* CHTLJavaScriptParser::ClassBodyContext::classElement(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::ClassElementContext>(i);
}


size_t CHTLJavaScriptParser::ClassBodyContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleClassBody;
}

void CHTLJavaScriptParser::ClassBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassBody(this);
}

void CHTLJavaScriptParser::ClassBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassBody(this);
}

CHTLJavaScriptParser::ClassBodyContext* CHTLJavaScriptParser::classBody() {
  ClassBodyContext *_localctx = _tracker.createInstance<ClassBodyContext>(_ctx, getState());
  enterRule(_localctx, 78, CHTLJavaScriptParser::RuleClassBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(734);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3953517395968) != 0) || _la == CHTLJavaScriptParser::IDENTIFIER) {
      setState(731);
      classElement();
      setState(736);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassElementContext ------------------------------------------------------------------

CHTLJavaScriptParser::ClassElementContext::ClassElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::MethodDefinitionContext* CHTLJavaScriptParser::ClassElementContext::methodDefinition() {
  return getRuleContext<CHTLJavaScriptParser::MethodDefinitionContext>(0);
}

CHTLJavaScriptParser::FieldDefinitionContext* CHTLJavaScriptParser::ClassElementContext::fieldDefinition() {
  return getRuleContext<CHTLJavaScriptParser::FieldDefinitionContext>(0);
}


size_t CHTLJavaScriptParser::ClassElementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleClassElement;
}

void CHTLJavaScriptParser::ClassElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassElement(this);
}

void CHTLJavaScriptParser::ClassElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassElement(this);
}

CHTLJavaScriptParser::ClassElementContext* CHTLJavaScriptParser::classElement() {
  ClassElementContext *_localctx = _tracker.createInstance<ClassElementContext>(_ctx, getState());
  enterRule(_localctx, 80, CHTLJavaScriptParser::RuleClassElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(744);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(737);
      methodDefinition();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(738);
      match(CHTLJavaScriptParser::T__38);
      setState(739);
      methodDefinition();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(740);
      fieldDefinition();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(741);
      match(CHTLJavaScriptParser::T__38);
      setState(742);
      fieldDefinition();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(743);
      match(CHTLJavaScriptParser::T__30);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodDefinitionContext ------------------------------------------------------------------

CHTLJavaScriptParser::MethodDefinitionContext::MethodDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::PropertyNameContext* CHTLJavaScriptParser::MethodDefinitionContext::propertyName() {
  return getRuleContext<CHTLJavaScriptParser::PropertyNameContext>(0);
}

CHTLJavaScriptParser::FunctionBodyContext* CHTLJavaScriptParser::MethodDefinitionContext::functionBody() {
  return getRuleContext<CHTLJavaScriptParser::FunctionBodyContext>(0);
}

CHTLJavaScriptParser::FormalParameterListContext* CHTLJavaScriptParser::MethodDefinitionContext::formalParameterList() {
  return getRuleContext<CHTLJavaScriptParser::FormalParameterListContext>(0);
}

CHTLJavaScriptParser::FormalParameterContext* CHTLJavaScriptParser::MethodDefinitionContext::formalParameter() {
  return getRuleContext<CHTLJavaScriptParser::FormalParameterContext>(0);
}


size_t CHTLJavaScriptParser::MethodDefinitionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleMethodDefinition;
}

void CHTLJavaScriptParser::MethodDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodDefinition(this);
}

void CHTLJavaScriptParser::MethodDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodDefinition(this);
}

CHTLJavaScriptParser::MethodDefinitionContext* CHTLJavaScriptParser::methodDefinition() {
  MethodDefinitionContext *_localctx = _tracker.createInstance<MethodDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 82, CHTLJavaScriptParser::RuleMethodDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(807);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(746);
      propertyName();
      setState(747);
      match(CHTLJavaScriptParser::T__11);
      setState(749);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 2251799813750848) != 0) || ((((_la - 115) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 115)) & 131137) != 0)) {
        setState(748);
        formalParameterList();
      }
      setState(751);
      match(CHTLJavaScriptParser::T__12);
      setState(752);
      match(CHTLJavaScriptParser::T__15);
      setState(753);
      functionBody();
      setState(754);
      match(CHTLJavaScriptParser::T__16);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(756);
      match(CHTLJavaScriptParser::T__39);
      setState(757);
      propertyName();
      setState(758);
      match(CHTLJavaScriptParser::T__11);
      setState(759);
      match(CHTLJavaScriptParser::T__12);
      setState(760);
      match(CHTLJavaScriptParser::T__15);
      setState(761);
      functionBody();
      setState(762);
      match(CHTLJavaScriptParser::T__16);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(764);
      match(CHTLJavaScriptParser::T__40);
      setState(765);
      propertyName();
      setState(766);
      match(CHTLJavaScriptParser::T__11);
      setState(767);
      formalParameter();
      setState(768);
      match(CHTLJavaScriptParser::T__12);
      setState(769);
      match(CHTLJavaScriptParser::T__15);
      setState(770);
      functionBody();
      setState(771);
      match(CHTLJavaScriptParser::T__16);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(773);
      match(CHTLJavaScriptParser::T__35);
      setState(774);
      propertyName();
      setState(775);
      match(CHTLJavaScriptParser::T__11);
      setState(777);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 2251799813750848) != 0) || ((((_la - 115) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 115)) & 131137) != 0)) {
        setState(776);
        formalParameterList();
      }
      setState(779);
      match(CHTLJavaScriptParser::T__12);
      setState(780);
      match(CHTLJavaScriptParser::T__15);
      setState(781);
      functionBody();
      setState(782);
      match(CHTLJavaScriptParser::T__16);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(784);
      match(CHTLJavaScriptParser::T__34);
      setState(785);
      propertyName();
      setState(786);
      match(CHTLJavaScriptParser::T__11);
      setState(788);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 2251799813750848) != 0) || ((((_la - 115) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 115)) & 131137) != 0)) {
        setState(787);
        formalParameterList();
      }
      setState(790);
      match(CHTLJavaScriptParser::T__12);
      setState(791);
      match(CHTLJavaScriptParser::T__15);
      setState(792);
      functionBody();
      setState(793);
      match(CHTLJavaScriptParser::T__16);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(795);
      match(CHTLJavaScriptParser::T__35);
      setState(796);
      match(CHTLJavaScriptParser::T__34);
      setState(797);
      propertyName();
      setState(798);
      match(CHTLJavaScriptParser::T__11);
      setState(800);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 2251799813750848) != 0) || ((((_la - 115) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 115)) & 131137) != 0)) {
        setState(799);
        formalParameterList();
      }
      setState(802);
      match(CHTLJavaScriptParser::T__12);
      setState(803);
      match(CHTLJavaScriptParser::T__15);
      setState(804);
      functionBody();
      setState(805);
      match(CHTLJavaScriptParser::T__16);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldDefinitionContext ------------------------------------------------------------------

CHTLJavaScriptParser::FieldDefinitionContext::FieldDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::PropertyNameContext* CHTLJavaScriptParser::FieldDefinitionContext::propertyName() {
  return getRuleContext<CHTLJavaScriptParser::PropertyNameContext>(0);
}

CHTLJavaScriptParser::InitializerContext* CHTLJavaScriptParser::FieldDefinitionContext::initializer() {
  return getRuleContext<CHTLJavaScriptParser::InitializerContext>(0);
}


size_t CHTLJavaScriptParser::FieldDefinitionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleFieldDefinition;
}

void CHTLJavaScriptParser::FieldDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldDefinition(this);
}

void CHTLJavaScriptParser::FieldDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldDefinition(this);
}

CHTLJavaScriptParser::FieldDefinitionContext* CHTLJavaScriptParser::fieldDefinition() {
  FieldDefinitionContext *_localctx = _tracker.createInstance<FieldDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 84, CHTLJavaScriptParser::RuleFieldDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(809);
    propertyName();
    setState(811);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CHTLJavaScriptParser::T__68) {
      setState(810);
      initializer();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LexicalDeclarationContext ------------------------------------------------------------------

CHTLJavaScriptParser::LexicalDeclarationContext::LexicalDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::LetOrConstContext* CHTLJavaScriptParser::LexicalDeclarationContext::letOrConst() {
  return getRuleContext<CHTLJavaScriptParser::LetOrConstContext>(0);
}

CHTLJavaScriptParser::BindingListContext* CHTLJavaScriptParser::LexicalDeclarationContext::bindingList() {
  return getRuleContext<CHTLJavaScriptParser::BindingListContext>(0);
}


size_t CHTLJavaScriptParser::LexicalDeclarationContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleLexicalDeclaration;
}

void CHTLJavaScriptParser::LexicalDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLexicalDeclaration(this);
}

void CHTLJavaScriptParser::LexicalDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLexicalDeclaration(this);
}

CHTLJavaScriptParser::LexicalDeclarationContext* CHTLJavaScriptParser::lexicalDeclaration() {
  LexicalDeclarationContext *_localctx = _tracker.createInstance<LexicalDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 86, CHTLJavaScriptParser::RuleLexicalDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(813);
    letOrConst();
    setState(814);
    bindingList();
    setState(815);
    match(CHTLJavaScriptParser::T__30);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LetOrConstContext ------------------------------------------------------------------

CHTLJavaScriptParser::LetOrConstContext::LetOrConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CHTLJavaScriptParser::LetOrConstContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleLetOrConst;
}

void CHTLJavaScriptParser::LetOrConstContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLetOrConst(this);
}

void CHTLJavaScriptParser::LetOrConstContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLetOrConst(this);
}

CHTLJavaScriptParser::LetOrConstContext* CHTLJavaScriptParser::letOrConst() {
  LetOrConstContext *_localctx = _tracker.createInstance<LetOrConstContext>(_ctx, getState());
  enterRule(_localctx, 88, CHTLJavaScriptParser::RuleLetOrConst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(817);
    _la = _input->LA(1);
    if (!(_la == CHTLJavaScriptParser::T__41

    || _la == CHTLJavaScriptParser::T__42)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingListContext ------------------------------------------------------------------

CHTLJavaScriptParser::BindingListContext::BindingListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::LexicalBindingContext *> CHTLJavaScriptParser::BindingListContext::lexicalBinding() {
  return getRuleContexts<CHTLJavaScriptParser::LexicalBindingContext>();
}

CHTLJavaScriptParser::LexicalBindingContext* CHTLJavaScriptParser::BindingListContext::lexicalBinding(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::LexicalBindingContext>(i);
}


size_t CHTLJavaScriptParser::BindingListContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleBindingList;
}

void CHTLJavaScriptParser::BindingListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBindingList(this);
}

void CHTLJavaScriptParser::BindingListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBindingList(this);
}

CHTLJavaScriptParser::BindingListContext* CHTLJavaScriptParser::bindingList() {
  BindingListContext *_localctx = _tracker.createInstance<BindingListContext>(_ctx, getState());
  enterRule(_localctx, 90, CHTLJavaScriptParser::RuleBindingList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(819);
    lexicalBinding();
    setState(824);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CHTLJavaScriptParser::T__17) {
      setState(820);
      match(CHTLJavaScriptParser::T__17);
      setState(821);
      lexicalBinding();
      setState(826);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LexicalBindingContext ------------------------------------------------------------------

CHTLJavaScriptParser::LexicalBindingContext::LexicalBindingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::BindingIdentifierContext* CHTLJavaScriptParser::LexicalBindingContext::bindingIdentifier() {
  return getRuleContext<CHTLJavaScriptParser::BindingIdentifierContext>(0);
}

CHTLJavaScriptParser::InitializerContext* CHTLJavaScriptParser::LexicalBindingContext::initializer() {
  return getRuleContext<CHTLJavaScriptParser::InitializerContext>(0);
}

CHTLJavaScriptParser::BindingPatternContext* CHTLJavaScriptParser::LexicalBindingContext::bindingPattern() {
  return getRuleContext<CHTLJavaScriptParser::BindingPatternContext>(0);
}


size_t CHTLJavaScriptParser::LexicalBindingContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleLexicalBinding;
}

void CHTLJavaScriptParser::LexicalBindingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLexicalBinding(this);
}

void CHTLJavaScriptParser::LexicalBindingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLexicalBinding(this);
}

CHTLJavaScriptParser::LexicalBindingContext* CHTLJavaScriptParser::lexicalBinding() {
  LexicalBindingContext *_localctx = _tracker.createInstance<LexicalBindingContext>(_ctx, getState());
  enterRule(_localctx, 92, CHTLJavaScriptParser::RuleLexicalBinding);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(834);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CHTLJavaScriptParser::T__50:
      case CHTLJavaScriptParser::T__120:
      case CHTLJavaScriptParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(827);
        bindingIdentifier();
        setState(829);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CHTLJavaScriptParser::T__68) {
          setState(828);
          initializer();
        }
        break;
      }

      case CHTLJavaScriptParser::T__5:
      case CHTLJavaScriptParser::T__15: {
        enterOuterAlt(_localctx, 2);
        setState(831);
        bindingPattern();
        setState(832);
        initializer();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::BlockStatementContext* CHTLJavaScriptParser::StatementContext::blockStatement() {
  return getRuleContext<CHTLJavaScriptParser::BlockStatementContext>(0);
}

CHTLJavaScriptParser::VariableStatementContext* CHTLJavaScriptParser::StatementContext::variableStatement() {
  return getRuleContext<CHTLJavaScriptParser::VariableStatementContext>(0);
}

CHTLJavaScriptParser::EmptyStatementContext* CHTLJavaScriptParser::StatementContext::emptyStatement() {
  return getRuleContext<CHTLJavaScriptParser::EmptyStatementContext>(0);
}

CHTLJavaScriptParser::ExpressionStatementContext* CHTLJavaScriptParser::StatementContext::expressionStatement() {
  return getRuleContext<CHTLJavaScriptParser::ExpressionStatementContext>(0);
}

CHTLJavaScriptParser::IfStatementContext* CHTLJavaScriptParser::StatementContext::ifStatement() {
  return getRuleContext<CHTLJavaScriptParser::IfStatementContext>(0);
}

CHTLJavaScriptParser::IterationStatementContext* CHTLJavaScriptParser::StatementContext::iterationStatement() {
  return getRuleContext<CHTLJavaScriptParser::IterationStatementContext>(0);
}

CHTLJavaScriptParser::ContinueStatementContext* CHTLJavaScriptParser::StatementContext::continueStatement() {
  return getRuleContext<CHTLJavaScriptParser::ContinueStatementContext>(0);
}

CHTLJavaScriptParser::BreakStatementContext* CHTLJavaScriptParser::StatementContext::breakStatement() {
  return getRuleContext<CHTLJavaScriptParser::BreakStatementContext>(0);
}

CHTLJavaScriptParser::ReturnStatementContext* CHTLJavaScriptParser::StatementContext::returnStatement() {
  return getRuleContext<CHTLJavaScriptParser::ReturnStatementContext>(0);
}

CHTLJavaScriptParser::WithStatementContext* CHTLJavaScriptParser::StatementContext::withStatement() {
  return getRuleContext<CHTLJavaScriptParser::WithStatementContext>(0);
}

CHTLJavaScriptParser::LabelledStatementContext* CHTLJavaScriptParser::StatementContext::labelledStatement() {
  return getRuleContext<CHTLJavaScriptParser::LabelledStatementContext>(0);
}

CHTLJavaScriptParser::SwitchStatementContext* CHTLJavaScriptParser::StatementContext::switchStatement() {
  return getRuleContext<CHTLJavaScriptParser::SwitchStatementContext>(0);
}

CHTLJavaScriptParser::ThrowStatementContext* CHTLJavaScriptParser::StatementContext::throwStatement() {
  return getRuleContext<CHTLJavaScriptParser::ThrowStatementContext>(0);
}

CHTLJavaScriptParser::TryStatementContext* CHTLJavaScriptParser::StatementContext::tryStatement() {
  return getRuleContext<CHTLJavaScriptParser::TryStatementContext>(0);
}

CHTLJavaScriptParser::DebuggerStatementContext* CHTLJavaScriptParser::StatementContext::debuggerStatement() {
  return getRuleContext<CHTLJavaScriptParser::DebuggerStatementContext>(0);
}

CHTLJavaScriptParser::ImportStatementContext* CHTLJavaScriptParser::StatementContext::importStatement() {
  return getRuleContext<CHTLJavaScriptParser::ImportStatementContext>(0);
}

CHTLJavaScriptParser::ExportStatementContext* CHTLJavaScriptParser::StatementContext::exportStatement() {
  return getRuleContext<CHTLJavaScriptParser::ExportStatementContext>(0);
}


size_t CHTLJavaScriptParser::StatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleStatement;
}

void CHTLJavaScriptParser::StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement(this);
}

void CHTLJavaScriptParser::StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement(this);
}

CHTLJavaScriptParser::StatementContext* CHTLJavaScriptParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 94, CHTLJavaScriptParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(853);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(836);
      blockStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(837);
      variableStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(838);
      emptyStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(839);
      expressionStatement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(840);
      ifStatement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(841);
      iterationStatement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(842);
      continueStatement();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(843);
      breakStatement();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(844);
      returnStatement();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(845);
      withStatement();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(846);
      labelledStatement();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(847);
      switchStatement();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(848);
      throwStatement();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(849);
      tryStatement();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(850);
      debuggerStatement();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(851);
      importStatement();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(852);
      exportStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockStatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::BlockStatementContext::BlockStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::StatementListContext* CHTLJavaScriptParser::BlockStatementContext::statementList() {
  return getRuleContext<CHTLJavaScriptParser::StatementListContext>(0);
}


size_t CHTLJavaScriptParser::BlockStatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleBlockStatement;
}

void CHTLJavaScriptParser::BlockStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockStatement(this);
}

void CHTLJavaScriptParser::BlockStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockStatement(this);
}

CHTLJavaScriptParser::BlockStatementContext* CHTLJavaScriptParser::blockStatement() {
  BlockStatementContext *_localctx = _tracker.createInstance<BlockStatementContext>(_ctx, getState());
  enterRule(_localctx, 96, CHTLJavaScriptParser::RuleBlockStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(855);
    match(CHTLJavaScriptParser::T__15);
    setState(857);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3741277659288671046) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 434580871366836243) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 132)) & 33431561) != 0)) {
      setState(856);
      statementList();
    }
    setState(859);
    match(CHTLJavaScriptParser::T__16);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementListContext ------------------------------------------------------------------

CHTLJavaScriptParser::StatementListContext::StatementListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::StatementContext *> CHTLJavaScriptParser::StatementListContext::statement() {
  return getRuleContexts<CHTLJavaScriptParser::StatementContext>();
}

CHTLJavaScriptParser::StatementContext* CHTLJavaScriptParser::StatementListContext::statement(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::StatementContext>(i);
}


size_t CHTLJavaScriptParser::StatementListContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleStatementList;
}

void CHTLJavaScriptParser::StatementListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementList(this);
}

void CHTLJavaScriptParser::StatementListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementList(this);
}

CHTLJavaScriptParser::StatementListContext* CHTLJavaScriptParser::statementList() {
  StatementListContext *_localctx = _tracker.createInstance<StatementListContext>(_ctx, getState());
  enterRule(_localctx, 98, CHTLJavaScriptParser::RuleStatementList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(862); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(861);
      statement();
      setState(864); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3741277659288671046) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 434580871366836243) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 132)) & 33431561) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableStatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::VariableStatementContext::VariableStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::VariableDeclarationListContext* CHTLJavaScriptParser::VariableStatementContext::variableDeclarationList() {
  return getRuleContext<CHTLJavaScriptParser::VariableDeclarationListContext>(0);
}


size_t CHTLJavaScriptParser::VariableStatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleVariableStatement;
}

void CHTLJavaScriptParser::VariableStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableStatement(this);
}

void CHTLJavaScriptParser::VariableStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableStatement(this);
}

CHTLJavaScriptParser::VariableStatementContext* CHTLJavaScriptParser::variableStatement() {
  VariableStatementContext *_localctx = _tracker.createInstance<VariableStatementContext>(_ctx, getState());
  enterRule(_localctx, 100, CHTLJavaScriptParser::RuleVariableStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(866);
    match(CHTLJavaScriptParser::T__43);
    setState(867);
    variableDeclarationList();
    setState(868);
    match(CHTLJavaScriptParser::T__30);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclarationListContext ------------------------------------------------------------------

CHTLJavaScriptParser::VariableDeclarationListContext::VariableDeclarationListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::VariableDeclarationContext *> CHTLJavaScriptParser::VariableDeclarationListContext::variableDeclaration() {
  return getRuleContexts<CHTLJavaScriptParser::VariableDeclarationContext>();
}

CHTLJavaScriptParser::VariableDeclarationContext* CHTLJavaScriptParser::VariableDeclarationListContext::variableDeclaration(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::VariableDeclarationContext>(i);
}


size_t CHTLJavaScriptParser::VariableDeclarationListContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleVariableDeclarationList;
}

void CHTLJavaScriptParser::VariableDeclarationListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableDeclarationList(this);
}

void CHTLJavaScriptParser::VariableDeclarationListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableDeclarationList(this);
}

CHTLJavaScriptParser::VariableDeclarationListContext* CHTLJavaScriptParser::variableDeclarationList() {
  VariableDeclarationListContext *_localctx = _tracker.createInstance<VariableDeclarationListContext>(_ctx, getState());
  enterRule(_localctx, 102, CHTLJavaScriptParser::RuleVariableDeclarationList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(870);
    variableDeclaration();
    setState(875);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CHTLJavaScriptParser::T__17) {
      setState(871);
      match(CHTLJavaScriptParser::T__17);
      setState(872);
      variableDeclaration();
      setState(877);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclarationContext ------------------------------------------------------------------

CHTLJavaScriptParser::VariableDeclarationContext::VariableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::BindingIdentifierContext* CHTLJavaScriptParser::VariableDeclarationContext::bindingIdentifier() {
  return getRuleContext<CHTLJavaScriptParser::BindingIdentifierContext>(0);
}

CHTLJavaScriptParser::InitializerContext* CHTLJavaScriptParser::VariableDeclarationContext::initializer() {
  return getRuleContext<CHTLJavaScriptParser::InitializerContext>(0);
}

CHTLJavaScriptParser::BindingPatternContext* CHTLJavaScriptParser::VariableDeclarationContext::bindingPattern() {
  return getRuleContext<CHTLJavaScriptParser::BindingPatternContext>(0);
}


size_t CHTLJavaScriptParser::VariableDeclarationContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleVariableDeclaration;
}

void CHTLJavaScriptParser::VariableDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableDeclaration(this);
}

void CHTLJavaScriptParser::VariableDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableDeclaration(this);
}

CHTLJavaScriptParser::VariableDeclarationContext* CHTLJavaScriptParser::variableDeclaration() {
  VariableDeclarationContext *_localctx = _tracker.createInstance<VariableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 104, CHTLJavaScriptParser::RuleVariableDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(885);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CHTLJavaScriptParser::T__50:
      case CHTLJavaScriptParser::T__120:
      case CHTLJavaScriptParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(878);
        bindingIdentifier();
        setState(880);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CHTLJavaScriptParser::T__68) {
          setState(879);
          initializer();
        }
        break;
      }

      case CHTLJavaScriptParser::T__5:
      case CHTLJavaScriptParser::T__15: {
        enterOuterAlt(_localctx, 2);
        setState(882);
        bindingPattern();
        setState(883);
        initializer();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmptyStatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::EmptyStatementContext::EmptyStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CHTLJavaScriptParser::EmptyStatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleEmptyStatement;
}

void CHTLJavaScriptParser::EmptyStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEmptyStatement(this);
}

void CHTLJavaScriptParser::EmptyStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEmptyStatement(this);
}

CHTLJavaScriptParser::EmptyStatementContext* CHTLJavaScriptParser::emptyStatement() {
  EmptyStatementContext *_localctx = _tracker.createInstance<EmptyStatementContext>(_ctx, getState());
  enterRule(_localctx, 106, CHTLJavaScriptParser::RuleEmptyStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(887);
    match(CHTLJavaScriptParser::T__30);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionStatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::ExpressionStatementContext::ExpressionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ExpressionContext* CHTLJavaScriptParser::ExpressionStatementContext::expression() {
  return getRuleContext<CHTLJavaScriptParser::ExpressionContext>(0);
}


size_t CHTLJavaScriptParser::ExpressionStatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleExpressionStatement;
}

void CHTLJavaScriptParser::ExpressionStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionStatement(this);
}

void CHTLJavaScriptParser::ExpressionStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionStatement(this);
}

CHTLJavaScriptParser::ExpressionStatementContext* CHTLJavaScriptParser::expressionStatement() {
  ExpressionStatementContext *_localctx = _tracker.createInstance<ExpressionStatementContext>(_ctx, getState());
  enterRule(_localctx, 108, CHTLJavaScriptParser::RuleExpressionStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(889);
    expression();
    setState(890);
    match(CHTLJavaScriptParser::T__30);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfStatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::IfStatementContext::IfStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ExpressionContext* CHTLJavaScriptParser::IfStatementContext::expression() {
  return getRuleContext<CHTLJavaScriptParser::ExpressionContext>(0);
}

std::vector<CHTLJavaScriptParser::StatementContext *> CHTLJavaScriptParser::IfStatementContext::statement() {
  return getRuleContexts<CHTLJavaScriptParser::StatementContext>();
}

CHTLJavaScriptParser::StatementContext* CHTLJavaScriptParser::IfStatementContext::statement(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::StatementContext>(i);
}


size_t CHTLJavaScriptParser::IfStatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleIfStatement;
}

void CHTLJavaScriptParser::IfStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfStatement(this);
}

void CHTLJavaScriptParser::IfStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfStatement(this);
}

CHTLJavaScriptParser::IfStatementContext* CHTLJavaScriptParser::ifStatement() {
  IfStatementContext *_localctx = _tracker.createInstance<IfStatementContext>(_ctx, getState());
  enterRule(_localctx, 110, CHTLJavaScriptParser::RuleIfStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(892);
    match(CHTLJavaScriptParser::T__44);
    setState(893);
    match(CHTLJavaScriptParser::T__11);
    setState(894);
    expression();
    setState(895);
    match(CHTLJavaScriptParser::T__12);
    setState(896);
    statement();
    setState(899);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
    case 1: {
      setState(897);
      match(CHTLJavaScriptParser::T__45);
      setState(898);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IterationStatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::IterationStatementContext::IterationStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::DoWhileStatementContext* CHTLJavaScriptParser::IterationStatementContext::doWhileStatement() {
  return getRuleContext<CHTLJavaScriptParser::DoWhileStatementContext>(0);
}

CHTLJavaScriptParser::WhileStatementContext* CHTLJavaScriptParser::IterationStatementContext::whileStatement() {
  return getRuleContext<CHTLJavaScriptParser::WhileStatementContext>(0);
}

CHTLJavaScriptParser::ForStatementContext* CHTLJavaScriptParser::IterationStatementContext::forStatement() {
  return getRuleContext<CHTLJavaScriptParser::ForStatementContext>(0);
}

CHTLJavaScriptParser::ForInStatementContext* CHTLJavaScriptParser::IterationStatementContext::forInStatement() {
  return getRuleContext<CHTLJavaScriptParser::ForInStatementContext>(0);
}

CHTLJavaScriptParser::ForOfStatementContext* CHTLJavaScriptParser::IterationStatementContext::forOfStatement() {
  return getRuleContext<CHTLJavaScriptParser::ForOfStatementContext>(0);
}


size_t CHTLJavaScriptParser::IterationStatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleIterationStatement;
}

void CHTLJavaScriptParser::IterationStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIterationStatement(this);
}

void CHTLJavaScriptParser::IterationStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIterationStatement(this);
}

CHTLJavaScriptParser::IterationStatementContext* CHTLJavaScriptParser::iterationStatement() {
  IterationStatementContext *_localctx = _tracker.createInstance<IterationStatementContext>(_ctx, getState());
  enterRule(_localctx, 112, CHTLJavaScriptParser::RuleIterationStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(906);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(901);
      doWhileStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(902);
      whileStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(903);
      forStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(904);
      forInStatement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(905);
      forOfStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DoWhileStatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::DoWhileStatementContext::DoWhileStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::StatementContext* CHTLJavaScriptParser::DoWhileStatementContext::statement() {
  return getRuleContext<CHTLJavaScriptParser::StatementContext>(0);
}

CHTLJavaScriptParser::ExpressionContext* CHTLJavaScriptParser::DoWhileStatementContext::expression() {
  return getRuleContext<CHTLJavaScriptParser::ExpressionContext>(0);
}


size_t CHTLJavaScriptParser::DoWhileStatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleDoWhileStatement;
}

void CHTLJavaScriptParser::DoWhileStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoWhileStatement(this);
}

void CHTLJavaScriptParser::DoWhileStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoWhileStatement(this);
}

CHTLJavaScriptParser::DoWhileStatementContext* CHTLJavaScriptParser::doWhileStatement() {
  DoWhileStatementContext *_localctx = _tracker.createInstance<DoWhileStatementContext>(_ctx, getState());
  enterRule(_localctx, 114, CHTLJavaScriptParser::RuleDoWhileStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(908);
    match(CHTLJavaScriptParser::T__46);
    setState(909);
    statement();
    setState(910);
    match(CHTLJavaScriptParser::T__47);
    setState(911);
    match(CHTLJavaScriptParser::T__11);
    setState(912);
    expression();
    setState(913);
    match(CHTLJavaScriptParser::T__12);
    setState(914);
    match(CHTLJavaScriptParser::T__30);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::WhileStatementContext::WhileStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ExpressionContext* CHTLJavaScriptParser::WhileStatementContext::expression() {
  return getRuleContext<CHTLJavaScriptParser::ExpressionContext>(0);
}

CHTLJavaScriptParser::StatementContext* CHTLJavaScriptParser::WhileStatementContext::statement() {
  return getRuleContext<CHTLJavaScriptParser::StatementContext>(0);
}


size_t CHTLJavaScriptParser::WhileStatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleWhileStatement;
}

void CHTLJavaScriptParser::WhileStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhileStatement(this);
}

void CHTLJavaScriptParser::WhileStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhileStatement(this);
}

CHTLJavaScriptParser::WhileStatementContext* CHTLJavaScriptParser::whileStatement() {
  WhileStatementContext *_localctx = _tracker.createInstance<WhileStatementContext>(_ctx, getState());
  enterRule(_localctx, 116, CHTLJavaScriptParser::RuleWhileStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(916);
    match(CHTLJavaScriptParser::T__47);
    setState(917);
    match(CHTLJavaScriptParser::T__11);
    setState(918);
    expression();
    setState(919);
    match(CHTLJavaScriptParser::T__12);
    setState(920);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::ForStatementContext::ForStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::StatementContext* CHTLJavaScriptParser::ForStatementContext::statement() {
  return getRuleContext<CHTLJavaScriptParser::StatementContext>(0);
}

CHTLJavaScriptParser::ForInitContext* CHTLJavaScriptParser::ForStatementContext::forInit() {
  return getRuleContext<CHTLJavaScriptParser::ForInitContext>(0);
}

std::vector<CHTLJavaScriptParser::ExpressionContext *> CHTLJavaScriptParser::ForStatementContext::expression() {
  return getRuleContexts<CHTLJavaScriptParser::ExpressionContext>();
}

CHTLJavaScriptParser::ExpressionContext* CHTLJavaScriptParser::ForStatementContext::expression(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::ExpressionContext>(i);
}


size_t CHTLJavaScriptParser::ForStatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleForStatement;
}

void CHTLJavaScriptParser::ForStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForStatement(this);
}

void CHTLJavaScriptParser::ForStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForStatement(this);
}

CHTLJavaScriptParser::ForStatementContext* CHTLJavaScriptParser::forStatement() {
  ForStatementContext *_localctx = _tracker.createInstance<ForStatementContext>(_ctx, getState());
  enterRule(_localctx, 118, CHTLJavaScriptParser::RuleForStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(922);
    match(CHTLJavaScriptParser::T__48);
    setState(923);
    match(CHTLJavaScriptParser::T__11);
    setState(925);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2282813772632902) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 217290435683418113) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 132)) & 33431561) != 0)) {
      setState(924);
      forInit();
    }
    setState(927);
    match(CHTLJavaScriptParser::T__30);
    setState(929);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2252027447055174) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 217290435683418113) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 132)) & 33431561) != 0)) {
      setState(928);
      expression();
    }
    setState(931);
    match(CHTLJavaScriptParser::T__30);
    setState(933);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2252027447055174) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 217290435683418113) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 132)) & 33431561) != 0)) {
      setState(932);
      expression();
    }
    setState(935);
    match(CHTLJavaScriptParser::T__12);
    setState(936);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForInitContext ------------------------------------------------------------------

CHTLJavaScriptParser::ForInitContext::ForInitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ExpressionContext* CHTLJavaScriptParser::ForInitContext::expression() {
  return getRuleContext<CHTLJavaScriptParser::ExpressionContext>(0);
}

CHTLJavaScriptParser::VariableDeclarationListContext* CHTLJavaScriptParser::ForInitContext::variableDeclarationList() {
  return getRuleContext<CHTLJavaScriptParser::VariableDeclarationListContext>(0);
}

CHTLJavaScriptParser::LexicalDeclarationContext* CHTLJavaScriptParser::ForInitContext::lexicalDeclaration() {
  return getRuleContext<CHTLJavaScriptParser::LexicalDeclarationContext>(0);
}


size_t CHTLJavaScriptParser::ForInitContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleForInit;
}

void CHTLJavaScriptParser::ForInitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForInit(this);
}

void CHTLJavaScriptParser::ForInitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForInit(this);
}

CHTLJavaScriptParser::ForInitContext* CHTLJavaScriptParser::forInit() {
  ForInitContext *_localctx = _tracker.createInstance<ForInitContext>(_ctx, getState());
  enterRule(_localctx, 120, CHTLJavaScriptParser::RuleForInit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(942);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CHTLJavaScriptParser::T__0:
      case CHTLJavaScriptParser::T__1:
      case CHTLJavaScriptParser::T__5:
      case CHTLJavaScriptParser::T__7:
      case CHTLJavaScriptParser::T__8:
      case CHTLJavaScriptParser::T__11:
      case CHTLJavaScriptParser::T__14:
      case CHTLJavaScriptParser::T__15:
      case CHTLJavaScriptParser::T__31:
      case CHTLJavaScriptParser::T__33:
      case CHTLJavaScriptParser::T__35:
      case CHTLJavaScriptParser::T__36:
      case CHTLJavaScriptParser::T__50:
      case CHTLJavaScriptParser::T__64:
      case CHTLJavaScriptParser::T__103:
      case CHTLJavaScriptParser::T__107:
      case CHTLJavaScriptParser::T__108:
      case CHTLJavaScriptParser::T__109:
      case CHTLJavaScriptParser::T__110:
      case CHTLJavaScriptParser::T__111:
      case CHTLJavaScriptParser::T__112:
      case CHTLJavaScriptParser::T__113:
      case CHTLJavaScriptParser::T__120:
      case CHTLJavaScriptParser::T__121:
      case CHTLJavaScriptParser::IDENTIFIER:
      case CHTLJavaScriptParser::UnquotedLiteral:
      case CHTLJavaScriptParser::REGEX_LITERAL:
      case CHTLJavaScriptParser::DecimalLiteral:
      case CHTLJavaScriptParser::HexIntegerLiteral:
      case CHTLJavaScriptParser::OctalIntegerLiteral:
      case CHTLJavaScriptParser::OctalIntegerLiteral2:
      case CHTLJavaScriptParser::BinaryIntegerLiteral:
      case CHTLJavaScriptParser::BooleanLiteral:
      case CHTLJavaScriptParser::StringLiteral:
      case CHTLJavaScriptParser::NullLiteral: {
        enterOuterAlt(_localctx, 1);
        setState(938);
        expression();
        break;
      }

      case CHTLJavaScriptParser::T__43: {
        enterOuterAlt(_localctx, 2);
        setState(939);
        match(CHTLJavaScriptParser::T__43);
        setState(940);
        variableDeclarationList();
        break;
      }

      case CHTLJavaScriptParser::T__41:
      case CHTLJavaScriptParser::T__42: {
        enterOuterAlt(_localctx, 3);
        setState(941);
        lexicalDeclaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForInStatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::ForInStatementContext::ForInStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ForInBindingContext* CHTLJavaScriptParser::ForInStatementContext::forInBinding() {
  return getRuleContext<CHTLJavaScriptParser::ForInBindingContext>(0);
}

CHTLJavaScriptParser::ExpressionContext* CHTLJavaScriptParser::ForInStatementContext::expression() {
  return getRuleContext<CHTLJavaScriptParser::ExpressionContext>(0);
}

CHTLJavaScriptParser::StatementContext* CHTLJavaScriptParser::ForInStatementContext::statement() {
  return getRuleContext<CHTLJavaScriptParser::StatementContext>(0);
}


size_t CHTLJavaScriptParser::ForInStatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleForInStatement;
}

void CHTLJavaScriptParser::ForInStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForInStatement(this);
}

void CHTLJavaScriptParser::ForInStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForInStatement(this);
}

CHTLJavaScriptParser::ForInStatementContext* CHTLJavaScriptParser::forInStatement() {
  ForInStatementContext *_localctx = _tracker.createInstance<ForInStatementContext>(_ctx, getState());
  enterRule(_localctx, 122, CHTLJavaScriptParser::RuleForInStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(944);
    match(CHTLJavaScriptParser::T__48);
    setState(945);
    match(CHTLJavaScriptParser::T__11);
    setState(946);
    forInBinding();
    setState(947);
    match(CHTLJavaScriptParser::T__49);
    setState(948);
    expression();
    setState(949);
    match(CHTLJavaScriptParser::T__12);
    setState(950);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForOfStatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::ForOfStatementContext::ForOfStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ForInBindingContext* CHTLJavaScriptParser::ForOfStatementContext::forInBinding() {
  return getRuleContext<CHTLJavaScriptParser::ForInBindingContext>(0);
}

CHTLJavaScriptParser::ExpressionContext* CHTLJavaScriptParser::ForOfStatementContext::expression() {
  return getRuleContext<CHTLJavaScriptParser::ExpressionContext>(0);
}

CHTLJavaScriptParser::StatementContext* CHTLJavaScriptParser::ForOfStatementContext::statement() {
  return getRuleContext<CHTLJavaScriptParser::StatementContext>(0);
}


size_t CHTLJavaScriptParser::ForOfStatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleForOfStatement;
}

void CHTLJavaScriptParser::ForOfStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForOfStatement(this);
}

void CHTLJavaScriptParser::ForOfStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForOfStatement(this);
}

CHTLJavaScriptParser::ForOfStatementContext* CHTLJavaScriptParser::forOfStatement() {
  ForOfStatementContext *_localctx = _tracker.createInstance<ForOfStatementContext>(_ctx, getState());
  enterRule(_localctx, 124, CHTLJavaScriptParser::RuleForOfStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(952);
    match(CHTLJavaScriptParser::T__48);
    setState(954);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CHTLJavaScriptParser::T__50) {
      setState(953);
      match(CHTLJavaScriptParser::T__50);
    }
    setState(956);
    match(CHTLJavaScriptParser::T__11);
    setState(957);
    forInBinding();
    setState(958);
    match(CHTLJavaScriptParser::T__51);
    setState(959);
    expression();
    setState(960);
    match(CHTLJavaScriptParser::T__12);
    setState(961);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForInBindingContext ------------------------------------------------------------------

CHTLJavaScriptParser::ForInBindingContext::ForInBindingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::BindingIdentifierContext* CHTLJavaScriptParser::ForInBindingContext::bindingIdentifier() {
  return getRuleContext<CHTLJavaScriptParser::BindingIdentifierContext>(0);
}

CHTLJavaScriptParser::BindingPatternContext* CHTLJavaScriptParser::ForInBindingContext::bindingPattern() {
  return getRuleContext<CHTLJavaScriptParser::BindingPatternContext>(0);
}

CHTLJavaScriptParser::InitializerContext* CHTLJavaScriptParser::ForInBindingContext::initializer() {
  return getRuleContext<CHTLJavaScriptParser::InitializerContext>(0);
}

CHTLJavaScriptParser::LetOrConstContext* CHTLJavaScriptParser::ForInBindingContext::letOrConst() {
  return getRuleContext<CHTLJavaScriptParser::LetOrConstContext>(0);
}


size_t CHTLJavaScriptParser::ForInBindingContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleForInBinding;
}

void CHTLJavaScriptParser::ForInBindingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForInBinding(this);
}

void CHTLJavaScriptParser::ForInBindingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForInBinding(this);
}

CHTLJavaScriptParser::ForInBindingContext* CHTLJavaScriptParser::forInBinding() {
  ForInBindingContext *_localctx = _tracker.createInstance<ForInBindingContext>(_ctx, getState());
  enterRule(_localctx, 126, CHTLJavaScriptParser::RuleForInBinding);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(980);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(963);
      bindingIdentifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(964);
      bindingPattern();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(965);
      match(CHTLJavaScriptParser::T__43);
      setState(966);
      bindingIdentifier();
      setState(968);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CHTLJavaScriptParser::T__68) {
        setState(967);
        initializer();
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(970);
      match(CHTLJavaScriptParser::T__43);
      setState(971);
      bindingPattern();
      setState(972);
      initializer();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(974);
      letOrConst();
      setState(975);
      bindingIdentifier();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(977);
      letOrConst();
      setState(978);
      bindingPattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ContinueStatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::ContinueStatementContext::ContinueStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::IdentifierContext* CHTLJavaScriptParser::ContinueStatementContext::identifier() {
  return getRuleContext<CHTLJavaScriptParser::IdentifierContext>(0);
}


size_t CHTLJavaScriptParser::ContinueStatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleContinueStatement;
}

void CHTLJavaScriptParser::ContinueStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContinueStatement(this);
}

void CHTLJavaScriptParser::ContinueStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContinueStatement(this);
}

CHTLJavaScriptParser::ContinueStatementContext* CHTLJavaScriptParser::continueStatement() {
  ContinueStatementContext *_localctx = _tracker.createInstance<ContinueStatementContext>(_ctx, getState());
  enterRule(_localctx, 128, CHTLJavaScriptParser::RuleContinueStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(982);
    match(CHTLJavaScriptParser::T__52);
    setState(984);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CHTLJavaScriptParser::T__50 || _la == CHTLJavaScriptParser::T__120

    || _la == CHTLJavaScriptParser::IDENTIFIER) {
      setState(983);
      identifier();
    }
    setState(986);
    match(CHTLJavaScriptParser::T__30);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BreakStatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::BreakStatementContext::BreakStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::IdentifierContext* CHTLJavaScriptParser::BreakStatementContext::identifier() {
  return getRuleContext<CHTLJavaScriptParser::IdentifierContext>(0);
}


size_t CHTLJavaScriptParser::BreakStatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleBreakStatement;
}

void CHTLJavaScriptParser::BreakStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBreakStatement(this);
}

void CHTLJavaScriptParser::BreakStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBreakStatement(this);
}

CHTLJavaScriptParser::BreakStatementContext* CHTLJavaScriptParser::breakStatement() {
  BreakStatementContext *_localctx = _tracker.createInstance<BreakStatementContext>(_ctx, getState());
  enterRule(_localctx, 130, CHTLJavaScriptParser::RuleBreakStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(988);
    match(CHTLJavaScriptParser::T__53);
    setState(990);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CHTLJavaScriptParser::T__50 || _la == CHTLJavaScriptParser::T__120

    || _la == CHTLJavaScriptParser::IDENTIFIER) {
      setState(989);
      identifier();
    }
    setState(992);
    match(CHTLJavaScriptParser::T__30);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnStatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::ReturnStatementContext::ReturnStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ExpressionContext* CHTLJavaScriptParser::ReturnStatementContext::expression() {
  return getRuleContext<CHTLJavaScriptParser::ExpressionContext>(0);
}


size_t CHTLJavaScriptParser::ReturnStatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleReturnStatement;
}

void CHTLJavaScriptParser::ReturnStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturnStatement(this);
}

void CHTLJavaScriptParser::ReturnStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturnStatement(this);
}

CHTLJavaScriptParser::ReturnStatementContext* CHTLJavaScriptParser::returnStatement() {
  ReturnStatementContext *_localctx = _tracker.createInstance<ReturnStatementContext>(_ctx, getState());
  enterRule(_localctx, 132, CHTLJavaScriptParser::RuleReturnStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(994);
    match(CHTLJavaScriptParser::T__54);
    setState(996);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2252027447055174) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 217290435683418113) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 132)) & 33431561) != 0)) {
      setState(995);
      expression();
    }
    setState(998);
    match(CHTLJavaScriptParser::T__30);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithStatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::WithStatementContext::WithStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ExpressionContext* CHTLJavaScriptParser::WithStatementContext::expression() {
  return getRuleContext<CHTLJavaScriptParser::ExpressionContext>(0);
}

CHTLJavaScriptParser::StatementContext* CHTLJavaScriptParser::WithStatementContext::statement() {
  return getRuleContext<CHTLJavaScriptParser::StatementContext>(0);
}


size_t CHTLJavaScriptParser::WithStatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleWithStatement;
}

void CHTLJavaScriptParser::WithStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWithStatement(this);
}

void CHTLJavaScriptParser::WithStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWithStatement(this);
}

CHTLJavaScriptParser::WithStatementContext* CHTLJavaScriptParser::withStatement() {
  WithStatementContext *_localctx = _tracker.createInstance<WithStatementContext>(_ctx, getState());
  enterRule(_localctx, 134, CHTLJavaScriptParser::RuleWithStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1000);
    match(CHTLJavaScriptParser::T__55);
    setState(1001);
    match(CHTLJavaScriptParser::T__11);
    setState(1002);
    expression();
    setState(1003);
    match(CHTLJavaScriptParser::T__12);
    setState(1004);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelledStatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::LabelledStatementContext::LabelledStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::IdentifierContext* CHTLJavaScriptParser::LabelledStatementContext::identifier() {
  return getRuleContext<CHTLJavaScriptParser::IdentifierContext>(0);
}

CHTLJavaScriptParser::StatementContext* CHTLJavaScriptParser::LabelledStatementContext::statement() {
  return getRuleContext<CHTLJavaScriptParser::StatementContext>(0);
}


size_t CHTLJavaScriptParser::LabelledStatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleLabelledStatement;
}

void CHTLJavaScriptParser::LabelledStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabelledStatement(this);
}

void CHTLJavaScriptParser::LabelledStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabelledStatement(this);
}

CHTLJavaScriptParser::LabelledStatementContext* CHTLJavaScriptParser::labelledStatement() {
  LabelledStatementContext *_localctx = _tracker.createInstance<LabelledStatementContext>(_ctx, getState());
  enterRule(_localctx, 136, CHTLJavaScriptParser::RuleLabelledStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1006);
    identifier();
    setState(1007);
    match(CHTLJavaScriptParser::T__18);
    setState(1008);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchStatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::SwitchStatementContext::SwitchStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ExpressionContext* CHTLJavaScriptParser::SwitchStatementContext::expression() {
  return getRuleContext<CHTLJavaScriptParser::ExpressionContext>(0);
}

std::vector<CHTLJavaScriptParser::CaseClauseContext *> CHTLJavaScriptParser::SwitchStatementContext::caseClause() {
  return getRuleContexts<CHTLJavaScriptParser::CaseClauseContext>();
}

CHTLJavaScriptParser::CaseClauseContext* CHTLJavaScriptParser::SwitchStatementContext::caseClause(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::CaseClauseContext>(i);
}

CHTLJavaScriptParser::DefaultClauseContext* CHTLJavaScriptParser::SwitchStatementContext::defaultClause() {
  return getRuleContext<CHTLJavaScriptParser::DefaultClauseContext>(0);
}


size_t CHTLJavaScriptParser::SwitchStatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleSwitchStatement;
}

void CHTLJavaScriptParser::SwitchStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchStatement(this);
}

void CHTLJavaScriptParser::SwitchStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchStatement(this);
}

CHTLJavaScriptParser::SwitchStatementContext* CHTLJavaScriptParser::switchStatement() {
  SwitchStatementContext *_localctx = _tracker.createInstance<SwitchStatementContext>(_ctx, getState());
  enterRule(_localctx, 138, CHTLJavaScriptParser::RuleSwitchStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1010);
    match(CHTLJavaScriptParser::T__56);
    setState(1011);
    match(CHTLJavaScriptParser::T__11);
    setState(1012);
    expression();
    setState(1013);
    match(CHTLJavaScriptParser::T__12);
    setState(1014);
    match(CHTLJavaScriptParser::T__15);
    setState(1018);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1015);
        caseClause(); 
      }
      setState(1020);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    }
    setState(1022);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CHTLJavaScriptParser::T__58) {
      setState(1021);
      defaultClause();
    }
    setState(1027);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CHTLJavaScriptParser::T__57) {
      setState(1024);
      caseClause();
      setState(1029);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1030);
    match(CHTLJavaScriptParser::T__16);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseClauseContext ------------------------------------------------------------------

CHTLJavaScriptParser::CaseClauseContext::CaseClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ExpressionContext* CHTLJavaScriptParser::CaseClauseContext::expression() {
  return getRuleContext<CHTLJavaScriptParser::ExpressionContext>(0);
}

CHTLJavaScriptParser::StatementListContext* CHTLJavaScriptParser::CaseClauseContext::statementList() {
  return getRuleContext<CHTLJavaScriptParser::StatementListContext>(0);
}


size_t CHTLJavaScriptParser::CaseClauseContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleCaseClause;
}

void CHTLJavaScriptParser::CaseClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaseClause(this);
}

void CHTLJavaScriptParser::CaseClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaseClause(this);
}

CHTLJavaScriptParser::CaseClauseContext* CHTLJavaScriptParser::caseClause() {
  CaseClauseContext *_localctx = _tracker.createInstance<CaseClauseContext>(_ctx, getState());
  enterRule(_localctx, 140, CHTLJavaScriptParser::RuleCaseClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1032);
    match(CHTLJavaScriptParser::T__57);
    setState(1033);
    expression();
    setState(1034);
    match(CHTLJavaScriptParser::T__18);
    setState(1036);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3741277659288671046) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 434580871366836243) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 132)) & 33431561) != 0)) {
      setState(1035);
      statementList();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultClauseContext ------------------------------------------------------------------

CHTLJavaScriptParser::DefaultClauseContext::DefaultClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::StatementListContext* CHTLJavaScriptParser::DefaultClauseContext::statementList() {
  return getRuleContext<CHTLJavaScriptParser::StatementListContext>(0);
}


size_t CHTLJavaScriptParser::DefaultClauseContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleDefaultClause;
}

void CHTLJavaScriptParser::DefaultClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefaultClause(this);
}

void CHTLJavaScriptParser::DefaultClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefaultClause(this);
}

CHTLJavaScriptParser::DefaultClauseContext* CHTLJavaScriptParser::defaultClause() {
  DefaultClauseContext *_localctx = _tracker.createInstance<DefaultClauseContext>(_ctx, getState());
  enterRule(_localctx, 142, CHTLJavaScriptParser::RuleDefaultClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1038);
    match(CHTLJavaScriptParser::T__58);
    setState(1039);
    match(CHTLJavaScriptParser::T__18);
    setState(1041);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3741277659288671046) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 434580871366836243) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 132)) & 33431561) != 0)) {
      setState(1040);
      statementList();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThrowStatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::ThrowStatementContext::ThrowStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ExpressionContext* CHTLJavaScriptParser::ThrowStatementContext::expression() {
  return getRuleContext<CHTLJavaScriptParser::ExpressionContext>(0);
}


size_t CHTLJavaScriptParser::ThrowStatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleThrowStatement;
}

void CHTLJavaScriptParser::ThrowStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrowStatement(this);
}

void CHTLJavaScriptParser::ThrowStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrowStatement(this);
}

CHTLJavaScriptParser::ThrowStatementContext* CHTLJavaScriptParser::throwStatement() {
  ThrowStatementContext *_localctx = _tracker.createInstance<ThrowStatementContext>(_ctx, getState());
  enterRule(_localctx, 144, CHTLJavaScriptParser::RuleThrowStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1043);
    match(CHTLJavaScriptParser::T__59);
    setState(1044);
    expression();
    setState(1045);
    match(CHTLJavaScriptParser::T__30);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryStatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::TryStatementContext::TryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::BlockStatementContext* CHTLJavaScriptParser::TryStatementContext::blockStatement() {
  return getRuleContext<CHTLJavaScriptParser::BlockStatementContext>(0);
}

CHTLJavaScriptParser::CatchClauseContext* CHTLJavaScriptParser::TryStatementContext::catchClause() {
  return getRuleContext<CHTLJavaScriptParser::CatchClauseContext>(0);
}

CHTLJavaScriptParser::FinallyClauseContext* CHTLJavaScriptParser::TryStatementContext::finallyClause() {
  return getRuleContext<CHTLJavaScriptParser::FinallyClauseContext>(0);
}


size_t CHTLJavaScriptParser::TryStatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleTryStatement;
}

void CHTLJavaScriptParser::TryStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTryStatement(this);
}

void CHTLJavaScriptParser::TryStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTryStatement(this);
}

CHTLJavaScriptParser::TryStatementContext* CHTLJavaScriptParser::tryStatement() {
  TryStatementContext *_localctx = _tracker.createInstance<TryStatementContext>(_ctx, getState());
  enterRule(_localctx, 146, CHTLJavaScriptParser::RuleTryStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1059);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1047);
      match(CHTLJavaScriptParser::T__60);
      setState(1048);
      blockStatement();
      setState(1050);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CHTLJavaScriptParser::T__61) {
        setState(1049);
        catchClause();
      }
      setState(1053);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CHTLJavaScriptParser::T__62) {
        setState(1052);
        finallyClause();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1055);
      match(CHTLJavaScriptParser::T__60);
      setState(1056);
      blockStatement();
      setState(1057);
      finallyClause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchClauseContext ------------------------------------------------------------------

CHTLJavaScriptParser::CatchClauseContext::CatchClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::BlockStatementContext* CHTLJavaScriptParser::CatchClauseContext::blockStatement() {
  return getRuleContext<CHTLJavaScriptParser::BlockStatementContext>(0);
}

CHTLJavaScriptParser::CatchParameterContext* CHTLJavaScriptParser::CatchClauseContext::catchParameter() {
  return getRuleContext<CHTLJavaScriptParser::CatchParameterContext>(0);
}


size_t CHTLJavaScriptParser::CatchClauseContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleCatchClause;
}

void CHTLJavaScriptParser::CatchClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatchClause(this);
}

void CHTLJavaScriptParser::CatchClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatchClause(this);
}

CHTLJavaScriptParser::CatchClauseContext* CHTLJavaScriptParser::catchClause() {
  CatchClauseContext *_localctx = _tracker.createInstance<CatchClauseContext>(_ctx, getState());
  enterRule(_localctx, 148, CHTLJavaScriptParser::RuleCatchClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1061);
    match(CHTLJavaScriptParser::T__61);
    setState(1066);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CHTLJavaScriptParser::T__11) {
      setState(1062);
      match(CHTLJavaScriptParser::T__11);
      setState(1063);
      catchParameter();
      setState(1064);
      match(CHTLJavaScriptParser::T__12);
    }
    setState(1068);
    blockStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchParameterContext ------------------------------------------------------------------

CHTLJavaScriptParser::CatchParameterContext::CatchParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::BindingIdentifierContext* CHTLJavaScriptParser::CatchParameterContext::bindingIdentifier() {
  return getRuleContext<CHTLJavaScriptParser::BindingIdentifierContext>(0);
}

CHTLJavaScriptParser::BindingPatternContext* CHTLJavaScriptParser::CatchParameterContext::bindingPattern() {
  return getRuleContext<CHTLJavaScriptParser::BindingPatternContext>(0);
}


size_t CHTLJavaScriptParser::CatchParameterContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleCatchParameter;
}

void CHTLJavaScriptParser::CatchParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatchParameter(this);
}

void CHTLJavaScriptParser::CatchParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatchParameter(this);
}

CHTLJavaScriptParser::CatchParameterContext* CHTLJavaScriptParser::catchParameter() {
  CatchParameterContext *_localctx = _tracker.createInstance<CatchParameterContext>(_ctx, getState());
  enterRule(_localctx, 150, CHTLJavaScriptParser::RuleCatchParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1072);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CHTLJavaScriptParser::T__50:
      case CHTLJavaScriptParser::T__120:
      case CHTLJavaScriptParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1070);
        bindingIdentifier();
        break;
      }

      case CHTLJavaScriptParser::T__5:
      case CHTLJavaScriptParser::T__15: {
        enterOuterAlt(_localctx, 2);
        setState(1071);
        bindingPattern();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FinallyClauseContext ------------------------------------------------------------------

CHTLJavaScriptParser::FinallyClauseContext::FinallyClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::BlockStatementContext* CHTLJavaScriptParser::FinallyClauseContext::blockStatement() {
  return getRuleContext<CHTLJavaScriptParser::BlockStatementContext>(0);
}


size_t CHTLJavaScriptParser::FinallyClauseContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleFinallyClause;
}

void CHTLJavaScriptParser::FinallyClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFinallyClause(this);
}

void CHTLJavaScriptParser::FinallyClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFinallyClause(this);
}

CHTLJavaScriptParser::FinallyClauseContext* CHTLJavaScriptParser::finallyClause() {
  FinallyClauseContext *_localctx = _tracker.createInstance<FinallyClauseContext>(_ctx, getState());
  enterRule(_localctx, 152, CHTLJavaScriptParser::RuleFinallyClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1074);
    match(CHTLJavaScriptParser::T__62);
    setState(1075);
    blockStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DebuggerStatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::DebuggerStatementContext::DebuggerStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CHTLJavaScriptParser::DebuggerStatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleDebuggerStatement;
}

void CHTLJavaScriptParser::DebuggerStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDebuggerStatement(this);
}

void CHTLJavaScriptParser::DebuggerStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDebuggerStatement(this);
}

CHTLJavaScriptParser::DebuggerStatementContext* CHTLJavaScriptParser::debuggerStatement() {
  DebuggerStatementContext *_localctx = _tracker.createInstance<DebuggerStatementContext>(_ctx, getState());
  enterRule(_localctx, 154, CHTLJavaScriptParser::RuleDebuggerStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1077);
    match(CHTLJavaScriptParser::T__63);
    setState(1078);
    match(CHTLJavaScriptParser::T__30);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportStatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::ImportStatementContext::ImportStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ImportClauseContext* CHTLJavaScriptParser::ImportStatementContext::importClause() {
  return getRuleContext<CHTLJavaScriptParser::ImportClauseContext>(0);
}

CHTLJavaScriptParser::ModuleSpecifierContext* CHTLJavaScriptParser::ImportStatementContext::moduleSpecifier() {
  return getRuleContext<CHTLJavaScriptParser::ModuleSpecifierContext>(0);
}


size_t CHTLJavaScriptParser::ImportStatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleImportStatement;
}

void CHTLJavaScriptParser::ImportStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportStatement(this);
}

void CHTLJavaScriptParser::ImportStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportStatement(this);
}

CHTLJavaScriptParser::ImportStatementContext* CHTLJavaScriptParser::importStatement() {
  ImportStatementContext *_localctx = _tracker.createInstance<ImportStatementContext>(_ctx, getState());
  enterRule(_localctx, 156, CHTLJavaScriptParser::RuleImportStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1090);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1080);
      match(CHTLJavaScriptParser::T__64);
      setState(1081);
      importClause();
      setState(1082);
      match(CHTLJavaScriptParser::T__65);
      setState(1083);
      moduleSpecifier();
      setState(1084);
      match(CHTLJavaScriptParser::T__30);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1086);
      match(CHTLJavaScriptParser::T__64);
      setState(1087);
      moduleSpecifier();
      setState(1088);
      match(CHTLJavaScriptParser::T__30);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportClauseContext ------------------------------------------------------------------

CHTLJavaScriptParser::ImportClauseContext::ImportClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ImportedDefaultBindingContext* CHTLJavaScriptParser::ImportClauseContext::importedDefaultBinding() {
  return getRuleContext<CHTLJavaScriptParser::ImportedDefaultBindingContext>(0);
}

CHTLJavaScriptParser::NamedImportsContext* CHTLJavaScriptParser::ImportClauseContext::namedImports() {
  return getRuleContext<CHTLJavaScriptParser::NamedImportsContext>(0);
}

CHTLJavaScriptParser::NamespaceImportContext* CHTLJavaScriptParser::ImportClauseContext::namespaceImport() {
  return getRuleContext<CHTLJavaScriptParser::NamespaceImportContext>(0);
}


size_t CHTLJavaScriptParser::ImportClauseContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleImportClause;
}

void CHTLJavaScriptParser::ImportClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportClause(this);
}

void CHTLJavaScriptParser::ImportClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportClause(this);
}

CHTLJavaScriptParser::ImportClauseContext* CHTLJavaScriptParser::importClause() {
  ImportClauseContext *_localctx = _tracker.createInstance<ImportClauseContext>(_ctx, getState());
  enterRule(_localctx, 158, CHTLJavaScriptParser::RuleImportClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1103);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1092);
      importedDefaultBinding();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1093);
      namedImports();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1094);
      importedDefaultBinding();
      setState(1095);
      match(CHTLJavaScriptParser::T__17);
      setState(1096);
      namedImports();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1098);
      importedDefaultBinding();
      setState(1099);
      match(CHTLJavaScriptParser::T__17);
      setState(1100);
      namespaceImport();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1102);
      namespaceImport();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportedDefaultBindingContext ------------------------------------------------------------------

CHTLJavaScriptParser::ImportedDefaultBindingContext::ImportedDefaultBindingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::BindingIdentifierContext* CHTLJavaScriptParser::ImportedDefaultBindingContext::bindingIdentifier() {
  return getRuleContext<CHTLJavaScriptParser::BindingIdentifierContext>(0);
}


size_t CHTLJavaScriptParser::ImportedDefaultBindingContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleImportedDefaultBinding;
}

void CHTLJavaScriptParser::ImportedDefaultBindingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportedDefaultBinding(this);
}

void CHTLJavaScriptParser::ImportedDefaultBindingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportedDefaultBinding(this);
}

CHTLJavaScriptParser::ImportedDefaultBindingContext* CHTLJavaScriptParser::importedDefaultBinding() {
  ImportedDefaultBindingContext *_localctx = _tracker.createInstance<ImportedDefaultBindingContext>(_ctx, getState());
  enterRule(_localctx, 160, CHTLJavaScriptParser::RuleImportedDefaultBinding);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1105);
    bindingIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamespaceImportContext ------------------------------------------------------------------

CHTLJavaScriptParser::NamespaceImportContext::NamespaceImportContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::BindingIdentifierContext* CHTLJavaScriptParser::NamespaceImportContext::bindingIdentifier() {
  return getRuleContext<CHTLJavaScriptParser::BindingIdentifierContext>(0);
}


size_t CHTLJavaScriptParser::NamespaceImportContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleNamespaceImport;
}

void CHTLJavaScriptParser::NamespaceImportContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespaceImport(this);
}

void CHTLJavaScriptParser::NamespaceImportContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespaceImport(this);
}

CHTLJavaScriptParser::NamespaceImportContext* CHTLJavaScriptParser::namespaceImport() {
  NamespaceImportContext *_localctx = _tracker.createInstance<NamespaceImportContext>(_ctx, getState());
  enterRule(_localctx, 162, CHTLJavaScriptParser::RuleNamespaceImport);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1107);
    match(CHTLJavaScriptParser::T__34);
    setState(1108);
    match(CHTLJavaScriptParser::T__66);
    setState(1109);
    bindingIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedImportsContext ------------------------------------------------------------------

CHTLJavaScriptParser::NamedImportsContext::NamedImportsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ImportsListContext* CHTLJavaScriptParser::NamedImportsContext::importsList() {
  return getRuleContext<CHTLJavaScriptParser::ImportsListContext>(0);
}


size_t CHTLJavaScriptParser::NamedImportsContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleNamedImports;
}

void CHTLJavaScriptParser::NamedImportsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamedImports(this);
}

void CHTLJavaScriptParser::NamedImportsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamedImports(this);
}

CHTLJavaScriptParser::NamedImportsContext* CHTLJavaScriptParser::namedImports() {
  NamedImportsContext *_localctx = _tracker.createInstance<NamedImportsContext>(_ctx, getState());
  enterRule(_localctx, 164, CHTLJavaScriptParser::RuleNamedImports);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1120);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1111);
      match(CHTLJavaScriptParser::T__15);
      setState(1112);
      match(CHTLJavaScriptParser::T__16);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1113);
      match(CHTLJavaScriptParser::T__15);
      setState(1114);
      importsList();
      setState(1116);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CHTLJavaScriptParser::T__17) {
        setState(1115);
        match(CHTLJavaScriptParser::T__17);
      }
      setState(1118);
      match(CHTLJavaScriptParser::T__16);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportsListContext ------------------------------------------------------------------

CHTLJavaScriptParser::ImportsListContext::ImportsListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::ImportSpecifierContext *> CHTLJavaScriptParser::ImportsListContext::importSpecifier() {
  return getRuleContexts<CHTLJavaScriptParser::ImportSpecifierContext>();
}

CHTLJavaScriptParser::ImportSpecifierContext* CHTLJavaScriptParser::ImportsListContext::importSpecifier(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::ImportSpecifierContext>(i);
}


size_t CHTLJavaScriptParser::ImportsListContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleImportsList;
}

void CHTLJavaScriptParser::ImportsListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportsList(this);
}

void CHTLJavaScriptParser::ImportsListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportsList(this);
}

CHTLJavaScriptParser::ImportsListContext* CHTLJavaScriptParser::importsList() {
  ImportsListContext *_localctx = _tracker.createInstance<ImportsListContext>(_ctx, getState());
  enterRule(_localctx, 166, CHTLJavaScriptParser::RuleImportsList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1122);
    importSpecifier();
    setState(1127);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1123);
        match(CHTLJavaScriptParser::T__17);
        setState(1124);
        importSpecifier(); 
      }
      setState(1129);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportSpecifierContext ------------------------------------------------------------------

CHTLJavaScriptParser::ImportSpecifierContext::ImportSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::BindingIdentifierContext* CHTLJavaScriptParser::ImportSpecifierContext::bindingIdentifier() {
  return getRuleContext<CHTLJavaScriptParser::BindingIdentifierContext>(0);
}

CHTLJavaScriptParser::IdentifierNameContext* CHTLJavaScriptParser::ImportSpecifierContext::identifierName() {
  return getRuleContext<CHTLJavaScriptParser::IdentifierNameContext>(0);
}


size_t CHTLJavaScriptParser::ImportSpecifierContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleImportSpecifier;
}

void CHTLJavaScriptParser::ImportSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportSpecifier(this);
}

void CHTLJavaScriptParser::ImportSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportSpecifier(this);
}

CHTLJavaScriptParser::ImportSpecifierContext* CHTLJavaScriptParser::importSpecifier() {
  ImportSpecifierContext *_localctx = _tracker.createInstance<ImportSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 168, CHTLJavaScriptParser::RuleImportSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1135);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1130);
      bindingIdentifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1131);
      identifierName();
      setState(1132);
      match(CHTLJavaScriptParser::T__66);
      setState(1133);
      bindingIdentifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleSpecifierContext ------------------------------------------------------------------

CHTLJavaScriptParser::ModuleSpecifierContext::ModuleSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CHTLJavaScriptParser::ModuleSpecifierContext::STRING_LITERAL() {
  return getToken(CHTLJavaScriptParser::STRING_LITERAL, 0);
}


size_t CHTLJavaScriptParser::ModuleSpecifierContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleModuleSpecifier;
}

void CHTLJavaScriptParser::ModuleSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleSpecifier(this);
}

void CHTLJavaScriptParser::ModuleSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleSpecifier(this);
}

CHTLJavaScriptParser::ModuleSpecifierContext* CHTLJavaScriptParser::moduleSpecifier() {
  ModuleSpecifierContext *_localctx = _tracker.createInstance<ModuleSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 170, CHTLJavaScriptParser::RuleModuleSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1137);
    match(CHTLJavaScriptParser::STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportStatementContext ------------------------------------------------------------------

CHTLJavaScriptParser::ExportStatementContext::ExportStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ExportClauseContext* CHTLJavaScriptParser::ExportStatementContext::exportClause() {
  return getRuleContext<CHTLJavaScriptParser::ExportClauseContext>(0);
}

CHTLJavaScriptParser::ModuleSpecifierContext* CHTLJavaScriptParser::ExportStatementContext::moduleSpecifier() {
  return getRuleContext<CHTLJavaScriptParser::ModuleSpecifierContext>(0);
}

CHTLJavaScriptParser::VariableStatementContext* CHTLJavaScriptParser::ExportStatementContext::variableStatement() {
  return getRuleContext<CHTLJavaScriptParser::VariableStatementContext>(0);
}

CHTLJavaScriptParser::DeclarationContext* CHTLJavaScriptParser::ExportStatementContext::declaration() {
  return getRuleContext<CHTLJavaScriptParser::DeclarationContext>(0);
}

CHTLJavaScriptParser::HoistableDeclarationContext* CHTLJavaScriptParser::ExportStatementContext::hoistableDeclaration() {
  return getRuleContext<CHTLJavaScriptParser::HoistableDeclarationContext>(0);
}

CHTLJavaScriptParser::ClassDeclarationContext* CHTLJavaScriptParser::ExportStatementContext::classDeclaration() {
  return getRuleContext<CHTLJavaScriptParser::ClassDeclarationContext>(0);
}

CHTLJavaScriptParser::AssignmentExpressionContext* CHTLJavaScriptParser::ExportStatementContext::assignmentExpression() {
  return getRuleContext<CHTLJavaScriptParser::AssignmentExpressionContext>(0);
}


size_t CHTLJavaScriptParser::ExportStatementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleExportStatement;
}

void CHTLJavaScriptParser::ExportStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExportStatement(this);
}

void CHTLJavaScriptParser::ExportStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExportStatement(this);
}

CHTLJavaScriptParser::ExportStatementContext* CHTLJavaScriptParser::exportStatement() {
  ExportStatementContext *_localctx = _tracker.createInstance<ExportStatementContext>(_ctx, getState());
  enterRule(_localctx, 172, CHTLJavaScriptParser::RuleExportStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1164);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1139);
      match(CHTLJavaScriptParser::T__67);
      setState(1140);
      exportClause();
      setState(1141);
      match(CHTLJavaScriptParser::T__65);
      setState(1142);
      moduleSpecifier();
      setState(1143);
      match(CHTLJavaScriptParser::T__30);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1145);
      match(CHTLJavaScriptParser::T__67);
      setState(1146);
      exportClause();
      setState(1147);
      match(CHTLJavaScriptParser::T__30);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1149);
      match(CHTLJavaScriptParser::T__67);
      setState(1150);
      variableStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1151);
      match(CHTLJavaScriptParser::T__67);
      setState(1152);
      declaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1153);
      match(CHTLJavaScriptParser::T__67);
      setState(1154);
      match(CHTLJavaScriptParser::T__58);
      setState(1155);
      hoistableDeclaration();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1156);
      match(CHTLJavaScriptParser::T__67);
      setState(1157);
      match(CHTLJavaScriptParser::T__58);
      setState(1158);
      classDeclaration();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1159);
      match(CHTLJavaScriptParser::T__67);
      setState(1160);
      match(CHTLJavaScriptParser::T__58);
      setState(1161);
      assignmentExpression();
      setState(1162);
      match(CHTLJavaScriptParser::T__30);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportClauseContext ------------------------------------------------------------------

CHTLJavaScriptParser::ExportClauseContext::ExportClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ExportsListContext* CHTLJavaScriptParser::ExportClauseContext::exportsList() {
  return getRuleContext<CHTLJavaScriptParser::ExportsListContext>(0);
}

CHTLJavaScriptParser::IdentifierNameContext* CHTLJavaScriptParser::ExportClauseContext::identifierName() {
  return getRuleContext<CHTLJavaScriptParser::IdentifierNameContext>(0);
}


size_t CHTLJavaScriptParser::ExportClauseContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleExportClause;
}

void CHTLJavaScriptParser::ExportClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExportClause(this);
}

void CHTLJavaScriptParser::ExportClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExportClause(this);
}

CHTLJavaScriptParser::ExportClauseContext* CHTLJavaScriptParser::exportClause() {
  ExportClauseContext *_localctx = _tracker.createInstance<ExportClauseContext>(_ctx, getState());
  enterRule(_localctx, 174, CHTLJavaScriptParser::RuleExportClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1179);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1166);
      match(CHTLJavaScriptParser::T__15);
      setState(1167);
      match(CHTLJavaScriptParser::T__16);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1168);
      match(CHTLJavaScriptParser::T__15);
      setState(1169);
      exportsList();
      setState(1171);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CHTLJavaScriptParser::T__17) {
        setState(1170);
        match(CHTLJavaScriptParser::T__17);
      }
      setState(1173);
      match(CHTLJavaScriptParser::T__16);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1175);
      match(CHTLJavaScriptParser::T__34);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1176);
      match(CHTLJavaScriptParser::T__34);
      setState(1177);
      match(CHTLJavaScriptParser::T__66);
      setState(1178);
      identifierName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportsListContext ------------------------------------------------------------------

CHTLJavaScriptParser::ExportsListContext::ExportsListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::ExportSpecifierContext *> CHTLJavaScriptParser::ExportsListContext::exportSpecifier() {
  return getRuleContexts<CHTLJavaScriptParser::ExportSpecifierContext>();
}

CHTLJavaScriptParser::ExportSpecifierContext* CHTLJavaScriptParser::ExportsListContext::exportSpecifier(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::ExportSpecifierContext>(i);
}


size_t CHTLJavaScriptParser::ExportsListContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleExportsList;
}

void CHTLJavaScriptParser::ExportsListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExportsList(this);
}

void CHTLJavaScriptParser::ExportsListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExportsList(this);
}

CHTLJavaScriptParser::ExportsListContext* CHTLJavaScriptParser::exportsList() {
  ExportsListContext *_localctx = _tracker.createInstance<ExportsListContext>(_ctx, getState());
  enterRule(_localctx, 176, CHTLJavaScriptParser::RuleExportsList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1181);
    exportSpecifier();
    setState(1186);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1182);
        match(CHTLJavaScriptParser::T__17);
        setState(1183);
        exportSpecifier(); 
      }
      setState(1188);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportSpecifierContext ------------------------------------------------------------------

CHTLJavaScriptParser::ExportSpecifierContext::ExportSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::IdentifierNameContext *> CHTLJavaScriptParser::ExportSpecifierContext::identifierName() {
  return getRuleContexts<CHTLJavaScriptParser::IdentifierNameContext>();
}

CHTLJavaScriptParser::IdentifierNameContext* CHTLJavaScriptParser::ExportSpecifierContext::identifierName(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::IdentifierNameContext>(i);
}


size_t CHTLJavaScriptParser::ExportSpecifierContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleExportSpecifier;
}

void CHTLJavaScriptParser::ExportSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExportSpecifier(this);
}

void CHTLJavaScriptParser::ExportSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExportSpecifier(this);
}

CHTLJavaScriptParser::ExportSpecifierContext* CHTLJavaScriptParser::exportSpecifier() {
  ExportSpecifierContext *_localctx = _tracker.createInstance<ExportSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 178, CHTLJavaScriptParser::RuleExportSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1194);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1189);
      identifierName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1190);
      identifierName();
      setState(1191);
      match(CHTLJavaScriptParser::T__66);
      setState(1192);
      identifierName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::AssignmentExpressionContext *> CHTLJavaScriptParser::ExpressionContext::assignmentExpression() {
  return getRuleContexts<CHTLJavaScriptParser::AssignmentExpressionContext>();
}

CHTLJavaScriptParser::AssignmentExpressionContext* CHTLJavaScriptParser::ExpressionContext::assignmentExpression(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::AssignmentExpressionContext>(i);
}


size_t CHTLJavaScriptParser::ExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleExpression;
}

void CHTLJavaScriptParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void CHTLJavaScriptParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}

CHTLJavaScriptParser::ExpressionContext* CHTLJavaScriptParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 180, CHTLJavaScriptParser::RuleExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1196);
    assignmentExpression();
    setState(1201);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CHTLJavaScriptParser::T__17) {
      setState(1197);
      match(CHTLJavaScriptParser::T__17);
      setState(1198);
      assignmentExpression();
      setState(1203);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::AssignmentExpressionContext::AssignmentExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ConditionalExpressionContext* CHTLJavaScriptParser::AssignmentExpressionContext::conditionalExpression() {
  return getRuleContext<CHTLJavaScriptParser::ConditionalExpressionContext>(0);
}

CHTLJavaScriptParser::YieldExpressionContext* CHTLJavaScriptParser::AssignmentExpressionContext::yieldExpression() {
  return getRuleContext<CHTLJavaScriptParser::YieldExpressionContext>(0);
}

CHTLJavaScriptParser::ArrowFunctionContext* CHTLJavaScriptParser::AssignmentExpressionContext::arrowFunction() {
  return getRuleContext<CHTLJavaScriptParser::ArrowFunctionContext>(0);
}

CHTLJavaScriptParser::AsyncArrowFunctionContext* CHTLJavaScriptParser::AssignmentExpressionContext::asyncArrowFunction() {
  return getRuleContext<CHTLJavaScriptParser::AsyncArrowFunctionContext>(0);
}

CHTLJavaScriptParser::LeftHandSideExpressionContext* CHTLJavaScriptParser::AssignmentExpressionContext::leftHandSideExpression() {
  return getRuleContext<CHTLJavaScriptParser::LeftHandSideExpressionContext>(0);
}

CHTLJavaScriptParser::AssignmentOperatorContext* CHTLJavaScriptParser::AssignmentExpressionContext::assignmentOperator() {
  return getRuleContext<CHTLJavaScriptParser::AssignmentOperatorContext>(0);
}

CHTLJavaScriptParser::AssignmentExpressionContext* CHTLJavaScriptParser::AssignmentExpressionContext::assignmentExpression() {
  return getRuleContext<CHTLJavaScriptParser::AssignmentExpressionContext>(0);
}


size_t CHTLJavaScriptParser::AssignmentExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleAssignmentExpression;
}

void CHTLJavaScriptParser::AssignmentExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentExpression(this);
}

void CHTLJavaScriptParser::AssignmentExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentExpression(this);
}

CHTLJavaScriptParser::AssignmentExpressionContext* CHTLJavaScriptParser::assignmentExpression() {
  AssignmentExpressionContext *_localctx = _tracker.createInstance<AssignmentExpressionContext>(_ctx, getState());
  enterRule(_localctx, 182, CHTLJavaScriptParser::RuleAssignmentExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1212);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1204);
      conditionalExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1205);
      yieldExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1206);
      arrowFunction();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1207);
      asyncArrowFunction();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1208);
      leftHandSideExpression();
      setState(1209);
      assignmentOperator();
      setState(1210);
      assignmentExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentOperatorContext ------------------------------------------------------------------

CHTLJavaScriptParser::AssignmentOperatorContext::AssignmentOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CHTLJavaScriptParser::AssignmentOperatorContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleAssignmentOperator;
}

void CHTLJavaScriptParser::AssignmentOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentOperator(this);
}

void CHTLJavaScriptParser::AssignmentOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentOperator(this);
}

CHTLJavaScriptParser::AssignmentOperatorContext* CHTLJavaScriptParser::assignmentOperator() {
  AssignmentOperatorContext *_localctx = _tracker.createInstance<AssignmentOperatorContext>(_ctx, getState());
  enterRule(_localctx, 184, CHTLJavaScriptParser::RuleAssignmentOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1214);
    _la = _input->LA(1);
    if (!(((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & 65535) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::ConditionalExpressionContext::ConditionalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::CoalesceExpressionContext* CHTLJavaScriptParser::ConditionalExpressionContext::coalesceExpression() {
  return getRuleContext<CHTLJavaScriptParser::CoalesceExpressionContext>(0);
}

std::vector<CHTLJavaScriptParser::AssignmentExpressionContext *> CHTLJavaScriptParser::ConditionalExpressionContext::assignmentExpression() {
  return getRuleContexts<CHTLJavaScriptParser::AssignmentExpressionContext>();
}

CHTLJavaScriptParser::AssignmentExpressionContext* CHTLJavaScriptParser::ConditionalExpressionContext::assignmentExpression(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::AssignmentExpressionContext>(i);
}


size_t CHTLJavaScriptParser::ConditionalExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleConditionalExpression;
}

void CHTLJavaScriptParser::ConditionalExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionalExpression(this);
}

void CHTLJavaScriptParser::ConditionalExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionalExpression(this);
}

CHTLJavaScriptParser::ConditionalExpressionContext* CHTLJavaScriptParser::conditionalExpression() {
  ConditionalExpressionContext *_localctx = _tracker.createInstance<ConditionalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 186, CHTLJavaScriptParser::RuleConditionalExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1216);
    coalesceExpression();
    setState(1222);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CHTLJavaScriptParser::T__84) {
      setState(1217);
      match(CHTLJavaScriptParser::T__84);
      setState(1218);
      assignmentExpression();
      setState(1219);
      match(CHTLJavaScriptParser::T__18);
      setState(1220);
      assignmentExpression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CoalesceExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::CoalesceExpressionContext::CoalesceExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::LogicalORExpressionContext* CHTLJavaScriptParser::CoalesceExpressionContext::logicalORExpression() {
  return getRuleContext<CHTLJavaScriptParser::LogicalORExpressionContext>(0);
}

CHTLJavaScriptParser::CoalesceExpressionContext* CHTLJavaScriptParser::CoalesceExpressionContext::coalesceExpression() {
  return getRuleContext<CHTLJavaScriptParser::CoalesceExpressionContext>(0);
}


size_t CHTLJavaScriptParser::CoalesceExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleCoalesceExpression;
}

void CHTLJavaScriptParser::CoalesceExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCoalesceExpression(this);
}

void CHTLJavaScriptParser::CoalesceExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCoalesceExpression(this);
}

CHTLJavaScriptParser::CoalesceExpressionContext* CHTLJavaScriptParser::coalesceExpression() {
  CoalesceExpressionContext *_localctx = _tracker.createInstance<CoalesceExpressionContext>(_ctx, getState());
  enterRule(_localctx, 188, CHTLJavaScriptParser::RuleCoalesceExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1224);
    logicalORExpression();
    setState(1227);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CHTLJavaScriptParser::T__85) {
      setState(1225);
      match(CHTLJavaScriptParser::T__85);
      setState(1226);
      coalesceExpression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LogicalORExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::LogicalORExpressionContext::LogicalORExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::LogicalANDExpressionContext *> CHTLJavaScriptParser::LogicalORExpressionContext::logicalANDExpression() {
  return getRuleContexts<CHTLJavaScriptParser::LogicalANDExpressionContext>();
}

CHTLJavaScriptParser::LogicalANDExpressionContext* CHTLJavaScriptParser::LogicalORExpressionContext::logicalANDExpression(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::LogicalANDExpressionContext>(i);
}


size_t CHTLJavaScriptParser::LogicalORExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleLogicalORExpression;
}

void CHTLJavaScriptParser::LogicalORExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalORExpression(this);
}

void CHTLJavaScriptParser::LogicalORExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalORExpression(this);
}

CHTLJavaScriptParser::LogicalORExpressionContext* CHTLJavaScriptParser::logicalORExpression() {
  LogicalORExpressionContext *_localctx = _tracker.createInstance<LogicalORExpressionContext>(_ctx, getState());
  enterRule(_localctx, 190, CHTLJavaScriptParser::RuleLogicalORExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1229);
    logicalANDExpression();
    setState(1234);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CHTLJavaScriptParser::T__86) {
      setState(1230);
      match(CHTLJavaScriptParser::T__86);
      setState(1231);
      logicalANDExpression();
      setState(1236);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LogicalANDExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::LogicalANDExpressionContext::LogicalANDExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::BitwiseORExpressionContext *> CHTLJavaScriptParser::LogicalANDExpressionContext::bitwiseORExpression() {
  return getRuleContexts<CHTLJavaScriptParser::BitwiseORExpressionContext>();
}

CHTLJavaScriptParser::BitwiseORExpressionContext* CHTLJavaScriptParser::LogicalANDExpressionContext::bitwiseORExpression(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::BitwiseORExpressionContext>(i);
}


size_t CHTLJavaScriptParser::LogicalANDExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleLogicalANDExpression;
}

void CHTLJavaScriptParser::LogicalANDExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalANDExpression(this);
}

void CHTLJavaScriptParser::LogicalANDExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalANDExpression(this);
}

CHTLJavaScriptParser::LogicalANDExpressionContext* CHTLJavaScriptParser::logicalANDExpression() {
  LogicalANDExpressionContext *_localctx = _tracker.createInstance<LogicalANDExpressionContext>(_ctx, getState());
  enterRule(_localctx, 192, CHTLJavaScriptParser::RuleLogicalANDExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1237);
    bitwiseORExpression();
    setState(1242);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CHTLJavaScriptParser::T__87) {
      setState(1238);
      match(CHTLJavaScriptParser::T__87);
      setState(1239);
      bitwiseORExpression();
      setState(1244);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitwiseORExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::BitwiseORExpressionContext::BitwiseORExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::BitwiseXORExpressionContext *> CHTLJavaScriptParser::BitwiseORExpressionContext::bitwiseXORExpression() {
  return getRuleContexts<CHTLJavaScriptParser::BitwiseXORExpressionContext>();
}

CHTLJavaScriptParser::BitwiseXORExpressionContext* CHTLJavaScriptParser::BitwiseORExpressionContext::bitwiseXORExpression(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::BitwiseXORExpressionContext>(i);
}


size_t CHTLJavaScriptParser::BitwiseORExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleBitwiseORExpression;
}

void CHTLJavaScriptParser::BitwiseORExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwiseORExpression(this);
}

void CHTLJavaScriptParser::BitwiseORExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwiseORExpression(this);
}

CHTLJavaScriptParser::BitwiseORExpressionContext* CHTLJavaScriptParser::bitwiseORExpression() {
  BitwiseORExpressionContext *_localctx = _tracker.createInstance<BitwiseORExpressionContext>(_ctx, getState());
  enterRule(_localctx, 194, CHTLJavaScriptParser::RuleBitwiseORExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1245);
    bitwiseXORExpression();
    setState(1250);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CHTLJavaScriptParser::T__88) {
      setState(1246);
      match(CHTLJavaScriptParser::T__88);
      setState(1247);
      bitwiseXORExpression();
      setState(1252);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitwiseXORExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::BitwiseXORExpressionContext::BitwiseXORExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::BitwiseANDExpressionContext *> CHTLJavaScriptParser::BitwiseXORExpressionContext::bitwiseANDExpression() {
  return getRuleContexts<CHTLJavaScriptParser::BitwiseANDExpressionContext>();
}

CHTLJavaScriptParser::BitwiseANDExpressionContext* CHTLJavaScriptParser::BitwiseXORExpressionContext::bitwiseANDExpression(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::BitwiseANDExpressionContext>(i);
}


size_t CHTLJavaScriptParser::BitwiseXORExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleBitwiseXORExpression;
}

void CHTLJavaScriptParser::BitwiseXORExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwiseXORExpression(this);
}

void CHTLJavaScriptParser::BitwiseXORExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwiseXORExpression(this);
}

CHTLJavaScriptParser::BitwiseXORExpressionContext* CHTLJavaScriptParser::bitwiseXORExpression() {
  BitwiseXORExpressionContext *_localctx = _tracker.createInstance<BitwiseXORExpressionContext>(_ctx, getState());
  enterRule(_localctx, 196, CHTLJavaScriptParser::RuleBitwiseXORExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1253);
    bitwiseANDExpression();
    setState(1258);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CHTLJavaScriptParser::T__89) {
      setState(1254);
      match(CHTLJavaScriptParser::T__89);
      setState(1255);
      bitwiseANDExpression();
      setState(1260);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitwiseANDExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::BitwiseANDExpressionContext::BitwiseANDExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::EqualityExpressionContext *> CHTLJavaScriptParser::BitwiseANDExpressionContext::equalityExpression() {
  return getRuleContexts<CHTLJavaScriptParser::EqualityExpressionContext>();
}

CHTLJavaScriptParser::EqualityExpressionContext* CHTLJavaScriptParser::BitwiseANDExpressionContext::equalityExpression(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::EqualityExpressionContext>(i);
}


size_t CHTLJavaScriptParser::BitwiseANDExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleBitwiseANDExpression;
}

void CHTLJavaScriptParser::BitwiseANDExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwiseANDExpression(this);
}

void CHTLJavaScriptParser::BitwiseANDExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwiseANDExpression(this);
}

CHTLJavaScriptParser::BitwiseANDExpressionContext* CHTLJavaScriptParser::bitwiseANDExpression() {
  BitwiseANDExpressionContext *_localctx = _tracker.createInstance<BitwiseANDExpressionContext>(_ctx, getState());
  enterRule(_localctx, 198, CHTLJavaScriptParser::RuleBitwiseANDExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1261);
    equalityExpression();
    setState(1266);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CHTLJavaScriptParser::T__90) {
      setState(1262);
      match(CHTLJavaScriptParser::T__90);
      setState(1263);
      equalityExpression();
      setState(1268);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EqualityExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::EqualityExpressionContext::EqualityExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::RelationalExpressionContext *> CHTLJavaScriptParser::EqualityExpressionContext::relationalExpression() {
  return getRuleContexts<CHTLJavaScriptParser::RelationalExpressionContext>();
}

CHTLJavaScriptParser::RelationalExpressionContext* CHTLJavaScriptParser::EqualityExpressionContext::relationalExpression(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::RelationalExpressionContext>(i);
}


size_t CHTLJavaScriptParser::EqualityExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleEqualityExpression;
}

void CHTLJavaScriptParser::EqualityExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEqualityExpression(this);
}

void CHTLJavaScriptParser::EqualityExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEqualityExpression(this);
}

CHTLJavaScriptParser::EqualityExpressionContext* CHTLJavaScriptParser::equalityExpression() {
  EqualityExpressionContext *_localctx = _tracker.createInstance<EqualityExpressionContext>(_ctx, getState());
  enterRule(_localctx, 200, CHTLJavaScriptParser::RuleEqualityExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1269);
    relationalExpression();
    setState(1274);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 92) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 92)) & 15) != 0)) {
      setState(1270);
      _la = _input->LA(1);
      if (!(((((_la - 92) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 92)) & 15) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1271);
      relationalExpression();
      setState(1276);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationalExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::RelationalExpressionContext::RelationalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::ShiftExpressionContext *> CHTLJavaScriptParser::RelationalExpressionContext::shiftExpression() {
  return getRuleContexts<CHTLJavaScriptParser::ShiftExpressionContext>();
}

CHTLJavaScriptParser::ShiftExpressionContext* CHTLJavaScriptParser::RelationalExpressionContext::shiftExpression(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::ShiftExpressionContext>(i);
}


size_t CHTLJavaScriptParser::RelationalExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleRelationalExpression;
}

void CHTLJavaScriptParser::RelationalExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationalExpression(this);
}

void CHTLJavaScriptParser::RelationalExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationalExpression(this);
}

CHTLJavaScriptParser::RelationalExpressionContext* CHTLJavaScriptParser::relationalExpression() {
  RelationalExpressionContext *_localctx = _tracker.createInstance<RelationalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 202, CHTLJavaScriptParser::RuleRelationalExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1277);
    shiftExpression();
    setState(1282);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1278);
        _la = _input->LA(1);
        if (!(((((_la - 50) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 50)) & 2181431069507585) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1279);
        shiftExpression(); 
      }
      setState(1284);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShiftExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::ShiftExpressionContext::ShiftExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::AdditiveExpressionContext *> CHTLJavaScriptParser::ShiftExpressionContext::additiveExpression() {
  return getRuleContexts<CHTLJavaScriptParser::AdditiveExpressionContext>();
}

CHTLJavaScriptParser::AdditiveExpressionContext* CHTLJavaScriptParser::ShiftExpressionContext::additiveExpression(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::AdditiveExpressionContext>(i);
}


size_t CHTLJavaScriptParser::ShiftExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleShiftExpression;
}

void CHTLJavaScriptParser::ShiftExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShiftExpression(this);
}

void CHTLJavaScriptParser::ShiftExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShiftExpression(this);
}

CHTLJavaScriptParser::ShiftExpressionContext* CHTLJavaScriptParser::shiftExpression() {
  ShiftExpressionContext *_localctx = _tracker.createInstance<ShiftExpressionContext>(_ctx, getState());
  enterRule(_localctx, 204, CHTLJavaScriptParser::RuleShiftExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1285);
    additiveExpression();
    setState(1290);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 101) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 101)) & 7) != 0)) {
      setState(1286);
      _la = _input->LA(1);
      if (!(((((_la - 101) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 101)) & 7) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1287);
      additiveExpression();
      setState(1292);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AdditiveExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::AdditiveExpressionContext::AdditiveExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::MultiplicativeExpressionContext *> CHTLJavaScriptParser::AdditiveExpressionContext::multiplicativeExpression() {
  return getRuleContexts<CHTLJavaScriptParser::MultiplicativeExpressionContext>();
}

CHTLJavaScriptParser::MultiplicativeExpressionContext* CHTLJavaScriptParser::AdditiveExpressionContext::multiplicativeExpression(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::MultiplicativeExpressionContext>(i);
}


size_t CHTLJavaScriptParser::AdditiveExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleAdditiveExpression;
}

void CHTLJavaScriptParser::AdditiveExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditiveExpression(this);
}

void CHTLJavaScriptParser::AdditiveExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditiveExpression(this);
}

CHTLJavaScriptParser::AdditiveExpressionContext* CHTLJavaScriptParser::additiveExpression() {
  AdditiveExpressionContext *_localctx = _tracker.createInstance<AdditiveExpressionContext>(_ctx, getState());
  enterRule(_localctx, 206, CHTLJavaScriptParser::RuleAdditiveExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1293);
    multiplicativeExpression();
    setState(1298);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CHTLJavaScriptParser::T__31 || _la == CHTLJavaScriptParser::T__103) {
      setState(1294);
      _la = _input->LA(1);
      if (!(_la == CHTLJavaScriptParser::T__31 || _la == CHTLJavaScriptParser::T__103)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1295);
      multiplicativeExpression();
      setState(1300);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicativeExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::MultiplicativeExpressionContext::MultiplicativeExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::ExponentiationExpressionContext *> CHTLJavaScriptParser::MultiplicativeExpressionContext::exponentiationExpression() {
  return getRuleContexts<CHTLJavaScriptParser::ExponentiationExpressionContext>();
}

CHTLJavaScriptParser::ExponentiationExpressionContext* CHTLJavaScriptParser::MultiplicativeExpressionContext::exponentiationExpression(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::ExponentiationExpressionContext>(i);
}


size_t CHTLJavaScriptParser::MultiplicativeExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleMultiplicativeExpression;
}

void CHTLJavaScriptParser::MultiplicativeExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicativeExpression(this);
}

void CHTLJavaScriptParser::MultiplicativeExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicativeExpression(this);
}

CHTLJavaScriptParser::MultiplicativeExpressionContext* CHTLJavaScriptParser::multiplicativeExpression() {
  MultiplicativeExpressionContext *_localctx = _tracker.createInstance<MultiplicativeExpressionContext>(_ctx, getState());
  enterRule(_localctx, 208, CHTLJavaScriptParser::RuleMultiplicativeExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1301);
    exponentiationExpression();
    setState(1306);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1302);
        _la = _input->LA(1);
        if (!(_la == CHTLJavaScriptParser::T__34 || _la == CHTLJavaScriptParser::T__104

        || _la == CHTLJavaScriptParser::T__105)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1303);
        exponentiationExpression(); 
      }
      setState(1308);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExponentiationExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::ExponentiationExpressionContext::ExponentiationExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::UnaryExpressionContext* CHTLJavaScriptParser::ExponentiationExpressionContext::unaryExpression() {
  return getRuleContext<CHTLJavaScriptParser::UnaryExpressionContext>(0);
}

CHTLJavaScriptParser::ExponentiationExpressionContext* CHTLJavaScriptParser::ExponentiationExpressionContext::exponentiationExpression() {
  return getRuleContext<CHTLJavaScriptParser::ExponentiationExpressionContext>(0);
}


size_t CHTLJavaScriptParser::ExponentiationExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleExponentiationExpression;
}

void CHTLJavaScriptParser::ExponentiationExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExponentiationExpression(this);
}

void CHTLJavaScriptParser::ExponentiationExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExponentiationExpression(this);
}

CHTLJavaScriptParser::ExponentiationExpressionContext* CHTLJavaScriptParser::exponentiationExpression() {
  ExponentiationExpressionContext *_localctx = _tracker.createInstance<ExponentiationExpressionContext>(_ctx, getState());
  enterRule(_localctx, 210, CHTLJavaScriptParser::RuleExponentiationExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1309);
    unaryExpression();
    setState(1312);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CHTLJavaScriptParser::T__106) {
      setState(1310);
      match(CHTLJavaScriptParser::T__106);
      setState(1311);
      exponentiationExpression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::UnaryExpressionContext::UnaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::UpdateExpressionContext* CHTLJavaScriptParser::UnaryExpressionContext::updateExpression() {
  return getRuleContext<CHTLJavaScriptParser::UpdateExpressionContext>(0);
}

CHTLJavaScriptParser::UnaryExpressionContext* CHTLJavaScriptParser::UnaryExpressionContext::unaryExpression() {
  return getRuleContext<CHTLJavaScriptParser::UnaryExpressionContext>(0);
}


size_t CHTLJavaScriptParser::UnaryExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleUnaryExpression;
}

void CHTLJavaScriptParser::UnaryExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryExpression(this);
}

void CHTLJavaScriptParser::UnaryExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryExpression(this);
}

CHTLJavaScriptParser::UnaryExpressionContext* CHTLJavaScriptParser::unaryExpression() {
  UnaryExpressionContext *_localctx = _tracker.createInstance<UnaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 212, CHTLJavaScriptParser::RuleUnaryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1331);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1314);
      updateExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1315);
      match(CHTLJavaScriptParser::T__107);
      setState(1316);
      unaryExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1317);
      match(CHTLJavaScriptParser::T__108);
      setState(1318);
      unaryExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1319);
      match(CHTLJavaScriptParser::T__109);
      setState(1320);
      unaryExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1321);
      match(CHTLJavaScriptParser::T__103);
      setState(1322);
      unaryExpression();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1323);
      match(CHTLJavaScriptParser::T__31);
      setState(1324);
      unaryExpression();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1325);
      match(CHTLJavaScriptParser::T__110);
      setState(1326);
      unaryExpression();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1327);
      match(CHTLJavaScriptParser::T__111);
      setState(1328);
      unaryExpression();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1329);
      match(CHTLJavaScriptParser::T__50);
      setState(1330);
      unaryExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UpdateExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::UpdateExpressionContext::UpdateExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::LeftHandSideExpressionContext* CHTLJavaScriptParser::UpdateExpressionContext::leftHandSideExpression() {
  return getRuleContext<CHTLJavaScriptParser::LeftHandSideExpressionContext>(0);
}

CHTLJavaScriptParser::UnaryExpressionContext* CHTLJavaScriptParser::UpdateExpressionContext::unaryExpression() {
  return getRuleContext<CHTLJavaScriptParser::UnaryExpressionContext>(0);
}


size_t CHTLJavaScriptParser::UpdateExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleUpdateExpression;
}

void CHTLJavaScriptParser::UpdateExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpdateExpression(this);
}

void CHTLJavaScriptParser::UpdateExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpdateExpression(this);
}

CHTLJavaScriptParser::UpdateExpressionContext* CHTLJavaScriptParser::updateExpression() {
  UpdateExpressionContext *_localctx = _tracker.createInstance<UpdateExpressionContext>(_ctx, getState());
  enterRule(_localctx, 214, CHTLJavaScriptParser::RuleUpdateExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1344);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1333);
      leftHandSideExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1334);
      leftHandSideExpression();
      setState(1335);
      match(CHTLJavaScriptParser::T__112);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1337);
      leftHandSideExpression();
      setState(1338);
      match(CHTLJavaScriptParser::T__113);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1340);
      match(CHTLJavaScriptParser::T__112);
      setState(1341);
      unaryExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1342);
      match(CHTLJavaScriptParser::T__113);
      setState(1343);
      unaryExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LeftHandSideExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::LeftHandSideExpressionContext::LeftHandSideExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::NewExpressionContext* CHTLJavaScriptParser::LeftHandSideExpressionContext::newExpression() {
  return getRuleContext<CHTLJavaScriptParser::NewExpressionContext>(0);
}

CHTLJavaScriptParser::CallExpressionContext* CHTLJavaScriptParser::LeftHandSideExpressionContext::callExpression() {
  return getRuleContext<CHTLJavaScriptParser::CallExpressionContext>(0);
}


size_t CHTLJavaScriptParser::LeftHandSideExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleLeftHandSideExpression;
}

void CHTLJavaScriptParser::LeftHandSideExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLeftHandSideExpression(this);
}

void CHTLJavaScriptParser::LeftHandSideExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLeftHandSideExpression(this);
}

CHTLJavaScriptParser::LeftHandSideExpressionContext* CHTLJavaScriptParser::leftHandSideExpression() {
  LeftHandSideExpressionContext *_localctx = _tracker.createInstance<LeftHandSideExpressionContext>(_ctx, getState());
  enterRule(_localctx, 216, CHTLJavaScriptParser::RuleLeftHandSideExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1348);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1346);
      newExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1347);
      callExpression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NewExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::NewExpressionContext::NewExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::MemberExpressionContext* CHTLJavaScriptParser::NewExpressionContext::memberExpression() {
  return getRuleContext<CHTLJavaScriptParser::MemberExpressionContext>(0);
}

CHTLJavaScriptParser::NewExpressionContext* CHTLJavaScriptParser::NewExpressionContext::newExpression() {
  return getRuleContext<CHTLJavaScriptParser::NewExpressionContext>(0);
}


size_t CHTLJavaScriptParser::NewExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleNewExpression;
}

void CHTLJavaScriptParser::NewExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNewExpression(this);
}

void CHTLJavaScriptParser::NewExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNewExpression(this);
}

CHTLJavaScriptParser::NewExpressionContext* CHTLJavaScriptParser::newExpression() {
  NewExpressionContext *_localctx = _tracker.createInstance<NewExpressionContext>(_ctx, getState());
  enterRule(_localctx, 218, CHTLJavaScriptParser::RuleNewExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1353);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1350);
      memberExpression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1351);
      match(CHTLJavaScriptParser::T__8);
      setState(1352);
      newExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SuperCallContext ------------------------------------------------------------------

CHTLJavaScriptParser::SuperCallContext::SuperCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ArgumentsContext* CHTLJavaScriptParser::SuperCallContext::arguments() {
  return getRuleContext<CHTLJavaScriptParser::ArgumentsContext>(0);
}


size_t CHTLJavaScriptParser::SuperCallContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleSuperCall;
}

void CHTLJavaScriptParser::SuperCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuperCall(this);
}

void CHTLJavaScriptParser::SuperCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuperCall(this);
}

CHTLJavaScriptParser::SuperCallContext* CHTLJavaScriptParser::superCall() {
  SuperCallContext *_localctx = _tracker.createInstance<SuperCallContext>(_ctx, getState());
  enterRule(_localctx, 220, CHTLJavaScriptParser::RuleSuperCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1355);
    match(CHTLJavaScriptParser::T__7);
    setState(1356);
    arguments();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportCallContext ------------------------------------------------------------------

CHTLJavaScriptParser::ImportCallContext::ImportCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::AssignmentExpressionContext* CHTLJavaScriptParser::ImportCallContext::assignmentExpression() {
  return getRuleContext<CHTLJavaScriptParser::AssignmentExpressionContext>(0);
}


size_t CHTLJavaScriptParser::ImportCallContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleImportCall;
}

void CHTLJavaScriptParser::ImportCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportCall(this);
}

void CHTLJavaScriptParser::ImportCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportCall(this);
}

CHTLJavaScriptParser::ImportCallContext* CHTLJavaScriptParser::importCall() {
  ImportCallContext *_localctx = _tracker.createInstance<ImportCallContext>(_ctx, getState());
  enterRule(_localctx, 222, CHTLJavaScriptParser::RuleImportCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1358);
    match(CHTLJavaScriptParser::T__64);
    setState(1359);
    match(CHTLJavaScriptParser::T__11);
    setState(1360);
    assignmentExpression();
    setState(1361);
    match(CHTLJavaScriptParser::T__12);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentsContext ------------------------------------------------------------------

CHTLJavaScriptParser::ArgumentsContext::ArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ArgumentListContext* CHTLJavaScriptParser::ArgumentsContext::argumentList() {
  return getRuleContext<CHTLJavaScriptParser::ArgumentListContext>(0);
}


size_t CHTLJavaScriptParser::ArgumentsContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleArguments;
}

void CHTLJavaScriptParser::ArgumentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArguments(this);
}

void CHTLJavaScriptParser::ArgumentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArguments(this);
}

CHTLJavaScriptParser::ArgumentsContext* CHTLJavaScriptParser::arguments() {
  ArgumentsContext *_localctx = _tracker.createInstance<ArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 224, CHTLJavaScriptParser::RuleArguments);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1363);
    match(CHTLJavaScriptParser::T__11);
    setState(1365);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2252027447055174) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 218416335590260737) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 132)) & 33431561) != 0)) {
      setState(1364);
      argumentList();
    }
    setState(1367);
    match(CHTLJavaScriptParser::T__12);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentListContext ------------------------------------------------------------------

CHTLJavaScriptParser::ArgumentListContext::ArgumentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::ArgumentContext *> CHTLJavaScriptParser::ArgumentListContext::argument() {
  return getRuleContexts<CHTLJavaScriptParser::ArgumentContext>();
}

CHTLJavaScriptParser::ArgumentContext* CHTLJavaScriptParser::ArgumentListContext::argument(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::ArgumentContext>(i);
}


size_t CHTLJavaScriptParser::ArgumentListContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleArgumentList;
}

void CHTLJavaScriptParser::ArgumentListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgumentList(this);
}

void CHTLJavaScriptParser::ArgumentListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgumentList(this);
}

CHTLJavaScriptParser::ArgumentListContext* CHTLJavaScriptParser::argumentList() {
  ArgumentListContext *_localctx = _tracker.createInstance<ArgumentListContext>(_ctx, getState());
  enterRule(_localctx, 226, CHTLJavaScriptParser::RuleArgumentList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1369);
    argument();
    setState(1374);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CHTLJavaScriptParser::T__17) {
      setState(1370);
      match(CHTLJavaScriptParser::T__17);
      setState(1371);
      argument();
      setState(1376);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentContext ------------------------------------------------------------------

CHTLJavaScriptParser::ArgumentContext::ArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::AssignmentExpressionContext* CHTLJavaScriptParser::ArgumentContext::assignmentExpression() {
  return getRuleContext<CHTLJavaScriptParser::AssignmentExpressionContext>(0);
}


size_t CHTLJavaScriptParser::ArgumentContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleArgument;
}

void CHTLJavaScriptParser::ArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument(this);
}

void CHTLJavaScriptParser::ArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument(this);
}

CHTLJavaScriptParser::ArgumentContext* CHTLJavaScriptParser::argument() {
  ArgumentContext *_localctx = _tracker.createInstance<ArgumentContext>(_ctx, getState());
  enterRule(_localctx, 228, CHTLJavaScriptParser::RuleArgument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1380);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CHTLJavaScriptParser::T__0:
      case CHTLJavaScriptParser::T__1:
      case CHTLJavaScriptParser::T__5:
      case CHTLJavaScriptParser::T__7:
      case CHTLJavaScriptParser::T__8:
      case CHTLJavaScriptParser::T__11:
      case CHTLJavaScriptParser::T__14:
      case CHTLJavaScriptParser::T__15:
      case CHTLJavaScriptParser::T__31:
      case CHTLJavaScriptParser::T__33:
      case CHTLJavaScriptParser::T__35:
      case CHTLJavaScriptParser::T__36:
      case CHTLJavaScriptParser::T__50:
      case CHTLJavaScriptParser::T__64:
      case CHTLJavaScriptParser::T__103:
      case CHTLJavaScriptParser::T__107:
      case CHTLJavaScriptParser::T__108:
      case CHTLJavaScriptParser::T__109:
      case CHTLJavaScriptParser::T__110:
      case CHTLJavaScriptParser::T__111:
      case CHTLJavaScriptParser::T__112:
      case CHTLJavaScriptParser::T__113:
      case CHTLJavaScriptParser::T__120:
      case CHTLJavaScriptParser::T__121:
      case CHTLJavaScriptParser::IDENTIFIER:
      case CHTLJavaScriptParser::UnquotedLiteral:
      case CHTLJavaScriptParser::REGEX_LITERAL:
      case CHTLJavaScriptParser::DecimalLiteral:
      case CHTLJavaScriptParser::HexIntegerLiteral:
      case CHTLJavaScriptParser::OctalIntegerLiteral:
      case CHTLJavaScriptParser::OctalIntegerLiteral2:
      case CHTLJavaScriptParser::BinaryIntegerLiteral:
      case CHTLJavaScriptParser::BooleanLiteral:
      case CHTLJavaScriptParser::StringLiteral:
      case CHTLJavaScriptParser::NullLiteral: {
        enterOuterAlt(_localctx, 1);
        setState(1377);
        assignmentExpression();
        break;
      }

      case CHTLJavaScriptParser::T__114: {
        enterOuterAlt(_localctx, 2);
        setState(1378);
        match(CHTLJavaScriptParser::T__114);
        setState(1379);
        assignmentExpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetaPropertyContext ------------------------------------------------------------------

CHTLJavaScriptParser::MetaPropertyContext::MetaPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CHTLJavaScriptParser::MetaPropertyContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleMetaProperty;
}

void CHTLJavaScriptParser::MetaPropertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetaProperty(this);
}

void CHTLJavaScriptParser::MetaPropertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetaProperty(this);
}

CHTLJavaScriptParser::MetaPropertyContext* CHTLJavaScriptParser::metaProperty() {
  MetaPropertyContext *_localctx = _tracker.createInstance<MetaPropertyContext>(_ctx, getState());
  enterRule(_localctx, 230, CHTLJavaScriptParser::RuleMetaProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1388);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CHTLJavaScriptParser::T__8: {
        enterOuterAlt(_localctx, 1);
        setState(1382);
        match(CHTLJavaScriptParser::T__8);
        setState(1383);
        match(CHTLJavaScriptParser::T__3);
        setState(1384);
        match(CHTLJavaScriptParser::T__19);
        break;
      }

      case CHTLJavaScriptParser::T__64: {
        enterOuterAlt(_localctx, 2);
        setState(1385);
        match(CHTLJavaScriptParser::T__64);
        setState(1386);
        match(CHTLJavaScriptParser::T__3);
        setState(1387);
        match(CHTLJavaScriptParser::T__115);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParenthesizedExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::ParenthesizedExpressionContext::ParenthesizedExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ExpressionContext* CHTLJavaScriptParser::ParenthesizedExpressionContext::expression() {
  return getRuleContext<CHTLJavaScriptParser::ExpressionContext>(0);
}


size_t CHTLJavaScriptParser::ParenthesizedExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleParenthesizedExpression;
}

void CHTLJavaScriptParser::ParenthesizedExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParenthesizedExpression(this);
}

void CHTLJavaScriptParser::ParenthesizedExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParenthesizedExpression(this);
}

CHTLJavaScriptParser::ParenthesizedExpressionContext* CHTLJavaScriptParser::parenthesizedExpression() {
  ParenthesizedExpressionContext *_localctx = _tracker.createInstance<ParenthesizedExpressionContext>(_ctx, getState());
  enterRule(_localctx, 232, CHTLJavaScriptParser::RuleParenthesizedExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1390);
    match(CHTLJavaScriptParser::T__11);
    setState(1391);
    expression();
    setState(1392);
    match(CHTLJavaScriptParser::T__12);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NullLiteralContext ------------------------------------------------------------------

CHTLJavaScriptParser::NullLiteralContext::NullLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CHTLJavaScriptParser::NullLiteralContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleNullLiteral;
}

void CHTLJavaScriptParser::NullLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNullLiteral(this);
}

void CHTLJavaScriptParser::NullLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNullLiteral(this);
}

CHTLJavaScriptParser::NullLiteralContext* CHTLJavaScriptParser::nullLiteral() {
  NullLiteralContext *_localctx = _tracker.createInstance<NullLiteralContext>(_ctx, getState());
  enterRule(_localctx, 234, CHTLJavaScriptParser::RuleNullLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1394);
    match(CHTLJavaScriptParser::T__116);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanLiteralContext ------------------------------------------------------------------

CHTLJavaScriptParser::BooleanLiteralContext::BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CHTLJavaScriptParser::BooleanLiteralContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleBooleanLiteral;
}

void CHTLJavaScriptParser::BooleanLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBooleanLiteral(this);
}

void CHTLJavaScriptParser::BooleanLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBooleanLiteral(this);
}

CHTLJavaScriptParser::BooleanLiteralContext* CHTLJavaScriptParser::booleanLiteral() {
  BooleanLiteralContext *_localctx = _tracker.createInstance<BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 236, CHTLJavaScriptParser::RuleBooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1396);
    _la = _input->LA(1);
    if (!(_la == CHTLJavaScriptParser::T__117

    || _la == CHTLJavaScriptParser::T__118)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericLiteralContext ------------------------------------------------------------------

CHTLJavaScriptParser::NumericLiteralContext::NumericLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CHTLJavaScriptParser::NumericLiteralContext::DECIMAL_LITERAL() {
  return getToken(CHTLJavaScriptParser::DECIMAL_LITERAL, 0);
}

tree::TerminalNode* CHTLJavaScriptParser::NumericLiteralContext::BINARY_LITERAL() {
  return getToken(CHTLJavaScriptParser::BINARY_LITERAL, 0);
}

tree::TerminalNode* CHTLJavaScriptParser::NumericLiteralContext::OCTAL_LITERAL() {
  return getToken(CHTLJavaScriptParser::OCTAL_LITERAL, 0);
}

tree::TerminalNode* CHTLJavaScriptParser::NumericLiteralContext::HEX_LITERAL() {
  return getToken(CHTLJavaScriptParser::HEX_LITERAL, 0);
}


size_t CHTLJavaScriptParser::NumericLiteralContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleNumericLiteral;
}

void CHTLJavaScriptParser::NumericLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumericLiteral(this);
}

void CHTLJavaScriptParser::NumericLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumericLiteral(this);
}

CHTLJavaScriptParser::NumericLiteralContext* CHTLJavaScriptParser::numericLiteral() {
  NumericLiteralContext *_localctx = _tracker.createInstance<NumericLiteralContext>(_ctx, getState());
  enterRule(_localctx, 238, CHTLJavaScriptParser::RuleNumericLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1398);
    _la = _input->LA(1);
    if (!(((((_la - 137) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 137)) & 15) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringLiteralContext ------------------------------------------------------------------

CHTLJavaScriptParser::StringLiteralContext::StringLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CHTLJavaScriptParser::StringLiteralContext::STRING_LITERAL() {
  return getToken(CHTLJavaScriptParser::STRING_LITERAL, 0);
}


size_t CHTLJavaScriptParser::StringLiteralContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleStringLiteral;
}

void CHTLJavaScriptParser::StringLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStringLiteral(this);
}

void CHTLJavaScriptParser::StringLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStringLiteral(this);
}

CHTLJavaScriptParser::StringLiteralContext* CHTLJavaScriptParser::stringLiteral() {
  StringLiteralContext *_localctx = _tracker.createInstance<StringLiteralContext>(_ctx, getState());
  enterRule(_localctx, 240, CHTLJavaScriptParser::RuleStringLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1400);
    match(CHTLJavaScriptParser::STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayLiteralContext ------------------------------------------------------------------

CHTLJavaScriptParser::ArrayLiteralContext::ArrayLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ElementListContext* CHTLJavaScriptParser::ArrayLiteralContext::elementList() {
  return getRuleContext<CHTLJavaScriptParser::ElementListContext>(0);
}


size_t CHTLJavaScriptParser::ArrayLiteralContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleArrayLiteral;
}

void CHTLJavaScriptParser::ArrayLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayLiteral(this);
}

void CHTLJavaScriptParser::ArrayLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayLiteral(this);
}

CHTLJavaScriptParser::ArrayLiteralContext* CHTLJavaScriptParser::arrayLiteral() {
  ArrayLiteralContext *_localctx = _tracker.createInstance<ArrayLiteralContext>(_ctx, getState());
  enterRule(_localctx, 242, CHTLJavaScriptParser::RuleArrayLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1402);
    match(CHTLJavaScriptParser::T__5);
    setState(1404);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx)) {
    case 1: {
      setState(1403);
      elementList();
      break;
    }

    default:
      break;
    }
    setState(1406);
    match(CHTLJavaScriptParser::T__6);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementListContext ------------------------------------------------------------------

CHTLJavaScriptParser::ElementListContext::ElementListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::ArrayElementContext *> CHTLJavaScriptParser::ElementListContext::arrayElement() {
  return getRuleContexts<CHTLJavaScriptParser::ArrayElementContext>();
}

CHTLJavaScriptParser::ArrayElementContext* CHTLJavaScriptParser::ElementListContext::arrayElement(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::ArrayElementContext>(i);
}


size_t CHTLJavaScriptParser::ElementListContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleElementList;
}

void CHTLJavaScriptParser::ElementListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementList(this);
}

void CHTLJavaScriptParser::ElementListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementList(this);
}

CHTLJavaScriptParser::ElementListContext* CHTLJavaScriptParser::elementList() {
  ElementListContext *_localctx = _tracker.createInstance<ElementListContext>(_ctx, getState());
  enterRule(_localctx, 244, CHTLJavaScriptParser::RuleElementList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1408);
    arrayElement();
    setState(1413);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CHTLJavaScriptParser::T__17) {
      setState(1409);
      match(CHTLJavaScriptParser::T__17);
      setState(1410);
      arrayElement();
      setState(1415);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayElementContext ------------------------------------------------------------------

CHTLJavaScriptParser::ArrayElementContext::ArrayElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::AssignmentExpressionContext* CHTLJavaScriptParser::ArrayElementContext::assignmentExpression() {
  return getRuleContext<CHTLJavaScriptParser::AssignmentExpressionContext>(0);
}


size_t CHTLJavaScriptParser::ArrayElementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleArrayElement;
}

void CHTLJavaScriptParser::ArrayElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayElement(this);
}

void CHTLJavaScriptParser::ArrayElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayElement(this);
}

CHTLJavaScriptParser::ArrayElementContext* CHTLJavaScriptParser::arrayElement() {
  ArrayElementContext *_localctx = _tracker.createInstance<ArrayElementContext>(_ctx, getState());
  enterRule(_localctx, 246, CHTLJavaScriptParser::RuleArrayElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1420);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CHTLJavaScriptParser::T__0:
      case CHTLJavaScriptParser::T__1:
      case CHTLJavaScriptParser::T__5:
      case CHTLJavaScriptParser::T__7:
      case CHTLJavaScriptParser::T__8:
      case CHTLJavaScriptParser::T__11:
      case CHTLJavaScriptParser::T__14:
      case CHTLJavaScriptParser::T__15:
      case CHTLJavaScriptParser::T__31:
      case CHTLJavaScriptParser::T__33:
      case CHTLJavaScriptParser::T__35:
      case CHTLJavaScriptParser::T__36:
      case CHTLJavaScriptParser::T__50:
      case CHTLJavaScriptParser::T__64:
      case CHTLJavaScriptParser::T__103:
      case CHTLJavaScriptParser::T__107:
      case CHTLJavaScriptParser::T__108:
      case CHTLJavaScriptParser::T__109:
      case CHTLJavaScriptParser::T__110:
      case CHTLJavaScriptParser::T__111:
      case CHTLJavaScriptParser::T__112:
      case CHTLJavaScriptParser::T__113:
      case CHTLJavaScriptParser::T__120:
      case CHTLJavaScriptParser::T__121:
      case CHTLJavaScriptParser::IDENTIFIER:
      case CHTLJavaScriptParser::UnquotedLiteral:
      case CHTLJavaScriptParser::REGEX_LITERAL:
      case CHTLJavaScriptParser::DecimalLiteral:
      case CHTLJavaScriptParser::HexIntegerLiteral:
      case CHTLJavaScriptParser::OctalIntegerLiteral:
      case CHTLJavaScriptParser::OctalIntegerLiteral2:
      case CHTLJavaScriptParser::BinaryIntegerLiteral:
      case CHTLJavaScriptParser::BooleanLiteral:
      case CHTLJavaScriptParser::StringLiteral:
      case CHTLJavaScriptParser::NullLiteral: {
        enterOuterAlt(_localctx, 1);
        setState(1416);
        assignmentExpression();
        break;
      }

      case CHTLJavaScriptParser::T__114: {
        enterOuterAlt(_localctx, 2);
        setState(1417);
        match(CHTLJavaScriptParser::T__114);
        setState(1418);
        assignmentExpression();
        break;
      }

      case CHTLJavaScriptParser::T__6:
      case CHTLJavaScriptParser::T__17: {
        enterOuterAlt(_localctx, 3);

        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectLiteralContext ------------------------------------------------------------------

CHTLJavaScriptParser::ObjectLiteralContext::ObjectLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::PropertyDefinitionListContext* CHTLJavaScriptParser::ObjectLiteralContext::propertyDefinitionList() {
  return getRuleContext<CHTLJavaScriptParser::PropertyDefinitionListContext>(0);
}


size_t CHTLJavaScriptParser::ObjectLiteralContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleObjectLiteral;
}

void CHTLJavaScriptParser::ObjectLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObjectLiteral(this);
}

void CHTLJavaScriptParser::ObjectLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObjectLiteral(this);
}

CHTLJavaScriptParser::ObjectLiteralContext* CHTLJavaScriptParser::objectLiteral() {
  ObjectLiteralContext *_localctx = _tracker.createInstance<ObjectLiteralContext>(_ctx, getState());
  enterRule(_localctx, 248, CHTLJavaScriptParser::RuleObjectLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1432);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1422);
      match(CHTLJavaScriptParser::T__15);
      setState(1424);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -4503616807238910) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -366920155608907757) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 19) != 0)) {
        setState(1423);
        propertyDefinitionList();
      }
      setState(1426);
      match(CHTLJavaScriptParser::T__16);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1427);
      match(CHTLJavaScriptParser::T__15);
      setState(1428);
      propertyDefinitionList();
      setState(1429);
      match(CHTLJavaScriptParser::T__17);
      setState(1430);
      match(CHTLJavaScriptParser::T__16);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyDefinitionListContext ------------------------------------------------------------------

CHTLJavaScriptParser::PropertyDefinitionListContext::PropertyDefinitionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::PropertyDefinitionContext *> CHTLJavaScriptParser::PropertyDefinitionListContext::propertyDefinition() {
  return getRuleContexts<CHTLJavaScriptParser::PropertyDefinitionContext>();
}

CHTLJavaScriptParser::PropertyDefinitionContext* CHTLJavaScriptParser::PropertyDefinitionListContext::propertyDefinition(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::PropertyDefinitionContext>(i);
}


size_t CHTLJavaScriptParser::PropertyDefinitionListContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RulePropertyDefinitionList;
}

void CHTLJavaScriptParser::PropertyDefinitionListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPropertyDefinitionList(this);
}

void CHTLJavaScriptParser::PropertyDefinitionListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPropertyDefinitionList(this);
}

CHTLJavaScriptParser::PropertyDefinitionListContext* CHTLJavaScriptParser::propertyDefinitionList() {
  PropertyDefinitionListContext *_localctx = _tracker.createInstance<PropertyDefinitionListContext>(_ctx, getState());
  enterRule(_localctx, 250, CHTLJavaScriptParser::RulePropertyDefinitionList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1434);
    propertyDefinition();
    setState(1439);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1435);
        match(CHTLJavaScriptParser::T__17);
        setState(1436);
        propertyDefinition(); 
      }
      setState(1441);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyDefinitionContext ------------------------------------------------------------------

CHTLJavaScriptParser::PropertyDefinitionContext::PropertyDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::IdentifierNameContext* CHTLJavaScriptParser::PropertyDefinitionContext::identifierName() {
  return getRuleContext<CHTLJavaScriptParser::IdentifierNameContext>(0);
}

CHTLJavaScriptParser::PropertyNameContext* CHTLJavaScriptParser::PropertyDefinitionContext::propertyName() {
  return getRuleContext<CHTLJavaScriptParser::PropertyNameContext>(0);
}

CHTLJavaScriptParser::AssignmentExpressionContext* CHTLJavaScriptParser::PropertyDefinitionContext::assignmentExpression() {
  return getRuleContext<CHTLJavaScriptParser::AssignmentExpressionContext>(0);
}

CHTLJavaScriptParser::MethodDefinitionContext* CHTLJavaScriptParser::PropertyDefinitionContext::methodDefinition() {
  return getRuleContext<CHTLJavaScriptParser::MethodDefinitionContext>(0);
}


size_t CHTLJavaScriptParser::PropertyDefinitionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RulePropertyDefinition;
}

void CHTLJavaScriptParser::PropertyDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPropertyDefinition(this);
}

void CHTLJavaScriptParser::PropertyDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPropertyDefinition(this);
}

CHTLJavaScriptParser::PropertyDefinitionContext* CHTLJavaScriptParser::propertyDefinition() {
  PropertyDefinitionContext *_localctx = _tracker.createInstance<PropertyDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 252, CHTLJavaScriptParser::RulePropertyDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1450);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1442);
      identifierName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1443);
      propertyName();
      setState(1444);
      match(CHTLJavaScriptParser::T__18);
      setState(1445);
      assignmentExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1447);
      methodDefinition();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1448);
      match(CHTLJavaScriptParser::T__114);
      setState(1449);
      assignmentExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::FunctionExpressionContext::FunctionExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::FunctionBodyContext* CHTLJavaScriptParser::FunctionExpressionContext::functionBody() {
  return getRuleContext<CHTLJavaScriptParser::FunctionBodyContext>(0);
}

CHTLJavaScriptParser::IdentifierContext* CHTLJavaScriptParser::FunctionExpressionContext::identifier() {
  return getRuleContext<CHTLJavaScriptParser::IdentifierContext>(0);
}

CHTLJavaScriptParser::FormalParameterListContext* CHTLJavaScriptParser::FunctionExpressionContext::formalParameterList() {
  return getRuleContext<CHTLJavaScriptParser::FormalParameterListContext>(0);
}


size_t CHTLJavaScriptParser::FunctionExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleFunctionExpression;
}

void CHTLJavaScriptParser::FunctionExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionExpression(this);
}

void CHTLJavaScriptParser::FunctionExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionExpression(this);
}

CHTLJavaScriptParser::FunctionExpressionContext* CHTLJavaScriptParser::functionExpression() {
  FunctionExpressionContext *_localctx = _tracker.createInstance<FunctionExpressionContext>(_ctx, getState());
  enterRule(_localctx, 254, CHTLJavaScriptParser::RuleFunctionExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1452);
    match(CHTLJavaScriptParser::T__33);
    setState(1454);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CHTLJavaScriptParser::T__50 || _la == CHTLJavaScriptParser::T__120

    || _la == CHTLJavaScriptParser::IDENTIFIER) {
      setState(1453);
      identifier();
    }
    setState(1456);
    match(CHTLJavaScriptParser::T__11);
    setState(1458);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251799813750848) != 0) || ((((_la - 115) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 115)) & 131137) != 0)) {
      setState(1457);
      formalParameterList();
    }
    setState(1460);
    match(CHTLJavaScriptParser::T__12);
    setState(1461);
    match(CHTLJavaScriptParser::T__15);
    setState(1462);
    functionBody();
    setState(1463);
    match(CHTLJavaScriptParser::T__16);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GeneratorExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::GeneratorExpressionContext::GeneratorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::FunctionBodyContext* CHTLJavaScriptParser::GeneratorExpressionContext::functionBody() {
  return getRuleContext<CHTLJavaScriptParser::FunctionBodyContext>(0);
}

CHTLJavaScriptParser::IdentifierContext* CHTLJavaScriptParser::GeneratorExpressionContext::identifier() {
  return getRuleContext<CHTLJavaScriptParser::IdentifierContext>(0);
}

CHTLJavaScriptParser::FormalParameterListContext* CHTLJavaScriptParser::GeneratorExpressionContext::formalParameterList() {
  return getRuleContext<CHTLJavaScriptParser::FormalParameterListContext>(0);
}


size_t CHTLJavaScriptParser::GeneratorExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleGeneratorExpression;
}

void CHTLJavaScriptParser::GeneratorExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneratorExpression(this);
}

void CHTLJavaScriptParser::GeneratorExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneratorExpression(this);
}

CHTLJavaScriptParser::GeneratorExpressionContext* CHTLJavaScriptParser::generatorExpression() {
  GeneratorExpressionContext *_localctx = _tracker.createInstance<GeneratorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 256, CHTLJavaScriptParser::RuleGeneratorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1465);
    match(CHTLJavaScriptParser::T__33);
    setState(1466);
    match(CHTLJavaScriptParser::T__34);
    setState(1468);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CHTLJavaScriptParser::T__50 || _la == CHTLJavaScriptParser::T__120

    || _la == CHTLJavaScriptParser::IDENTIFIER) {
      setState(1467);
      identifier();
    }
    setState(1470);
    match(CHTLJavaScriptParser::T__11);
    setState(1472);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251799813750848) != 0) || ((((_la - 115) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 115)) & 131137) != 0)) {
      setState(1471);
      formalParameterList();
    }
    setState(1474);
    match(CHTLJavaScriptParser::T__12);
    setState(1475);
    match(CHTLJavaScriptParser::T__15);
    setState(1476);
    functionBody();
    setState(1477);
    match(CHTLJavaScriptParser::T__16);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AsyncFunctionExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::AsyncFunctionExpressionContext::AsyncFunctionExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::FunctionBodyContext* CHTLJavaScriptParser::AsyncFunctionExpressionContext::functionBody() {
  return getRuleContext<CHTLJavaScriptParser::FunctionBodyContext>(0);
}

CHTLJavaScriptParser::IdentifierContext* CHTLJavaScriptParser::AsyncFunctionExpressionContext::identifier() {
  return getRuleContext<CHTLJavaScriptParser::IdentifierContext>(0);
}

CHTLJavaScriptParser::FormalParameterListContext* CHTLJavaScriptParser::AsyncFunctionExpressionContext::formalParameterList() {
  return getRuleContext<CHTLJavaScriptParser::FormalParameterListContext>(0);
}


size_t CHTLJavaScriptParser::AsyncFunctionExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleAsyncFunctionExpression;
}

void CHTLJavaScriptParser::AsyncFunctionExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAsyncFunctionExpression(this);
}

void CHTLJavaScriptParser::AsyncFunctionExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAsyncFunctionExpression(this);
}

CHTLJavaScriptParser::AsyncFunctionExpressionContext* CHTLJavaScriptParser::asyncFunctionExpression() {
  AsyncFunctionExpressionContext *_localctx = _tracker.createInstance<AsyncFunctionExpressionContext>(_ctx, getState());
  enterRule(_localctx, 258, CHTLJavaScriptParser::RuleAsyncFunctionExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1479);
    match(CHTLJavaScriptParser::T__35);
    setState(1480);
    match(CHTLJavaScriptParser::T__33);
    setState(1482);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CHTLJavaScriptParser::T__50 || _la == CHTLJavaScriptParser::T__120

    || _la == CHTLJavaScriptParser::IDENTIFIER) {
      setState(1481);
      identifier();
    }
    setState(1484);
    match(CHTLJavaScriptParser::T__11);
    setState(1486);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251799813750848) != 0) || ((((_la - 115) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 115)) & 131137) != 0)) {
      setState(1485);
      formalParameterList();
    }
    setState(1488);
    match(CHTLJavaScriptParser::T__12);
    setState(1489);
    match(CHTLJavaScriptParser::T__15);
    setState(1490);
    functionBody();
    setState(1491);
    match(CHTLJavaScriptParser::T__16);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AsyncGeneratorExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::AsyncGeneratorExpressionContext::AsyncGeneratorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::FunctionBodyContext* CHTLJavaScriptParser::AsyncGeneratorExpressionContext::functionBody() {
  return getRuleContext<CHTLJavaScriptParser::FunctionBodyContext>(0);
}

CHTLJavaScriptParser::IdentifierContext* CHTLJavaScriptParser::AsyncGeneratorExpressionContext::identifier() {
  return getRuleContext<CHTLJavaScriptParser::IdentifierContext>(0);
}

CHTLJavaScriptParser::FormalParameterListContext* CHTLJavaScriptParser::AsyncGeneratorExpressionContext::formalParameterList() {
  return getRuleContext<CHTLJavaScriptParser::FormalParameterListContext>(0);
}


size_t CHTLJavaScriptParser::AsyncGeneratorExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleAsyncGeneratorExpression;
}

void CHTLJavaScriptParser::AsyncGeneratorExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAsyncGeneratorExpression(this);
}

void CHTLJavaScriptParser::AsyncGeneratorExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAsyncGeneratorExpression(this);
}

CHTLJavaScriptParser::AsyncGeneratorExpressionContext* CHTLJavaScriptParser::asyncGeneratorExpression() {
  AsyncGeneratorExpressionContext *_localctx = _tracker.createInstance<AsyncGeneratorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 260, CHTLJavaScriptParser::RuleAsyncGeneratorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1493);
    match(CHTLJavaScriptParser::T__35);
    setState(1494);
    match(CHTLJavaScriptParser::T__33);
    setState(1495);
    match(CHTLJavaScriptParser::T__34);
    setState(1497);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CHTLJavaScriptParser::T__50 || _la == CHTLJavaScriptParser::T__120

    || _la == CHTLJavaScriptParser::IDENTIFIER) {
      setState(1496);
      identifier();
    }
    setState(1499);
    match(CHTLJavaScriptParser::T__11);
    setState(1501);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251799813750848) != 0) || ((((_la - 115) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 115)) & 131137) != 0)) {
      setState(1500);
      formalParameterList();
    }
    setState(1503);
    match(CHTLJavaScriptParser::T__12);
    setState(1504);
    match(CHTLJavaScriptParser::T__15);
    setState(1505);
    functionBody();
    setState(1506);
    match(CHTLJavaScriptParser::T__16);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::ClassExpressionContext::ClassExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ClassBodyContext* CHTLJavaScriptParser::ClassExpressionContext::classBody() {
  return getRuleContext<CHTLJavaScriptParser::ClassBodyContext>(0);
}

CHTLJavaScriptParser::IdentifierContext* CHTLJavaScriptParser::ClassExpressionContext::identifier() {
  return getRuleContext<CHTLJavaScriptParser::IdentifierContext>(0);
}

CHTLJavaScriptParser::ClassExtendsContext* CHTLJavaScriptParser::ClassExpressionContext::classExtends() {
  return getRuleContext<CHTLJavaScriptParser::ClassExtendsContext>(0);
}


size_t CHTLJavaScriptParser::ClassExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleClassExpression;
}

void CHTLJavaScriptParser::ClassExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassExpression(this);
}

void CHTLJavaScriptParser::ClassExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassExpression(this);
}

CHTLJavaScriptParser::ClassExpressionContext* CHTLJavaScriptParser::classExpression() {
  ClassExpressionContext *_localctx = _tracker.createInstance<ClassExpressionContext>(_ctx, getState());
  enterRule(_localctx, 262, CHTLJavaScriptParser::RuleClassExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1508);
    match(CHTLJavaScriptParser::T__36);
    setState(1510);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CHTLJavaScriptParser::T__50 || _la == CHTLJavaScriptParser::T__120

    || _la == CHTLJavaScriptParser::IDENTIFIER) {
      setState(1509);
      identifier();
    }
    setState(1513);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CHTLJavaScriptParser::T__37) {
      setState(1512);
      classExtends();
    }
    setState(1515);
    match(CHTLJavaScriptParser::T__15);
    setState(1516);
    classBody();
    setState(1517);
    match(CHTLJavaScriptParser::T__16);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrowFunctionContext ------------------------------------------------------------------

CHTLJavaScriptParser::ArrowFunctionContext::ArrowFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ArrowParametersContext* CHTLJavaScriptParser::ArrowFunctionContext::arrowParameters() {
  return getRuleContext<CHTLJavaScriptParser::ArrowParametersContext>(0);
}

CHTLJavaScriptParser::ArrowBodyContext* CHTLJavaScriptParser::ArrowFunctionContext::arrowBody() {
  return getRuleContext<CHTLJavaScriptParser::ArrowBodyContext>(0);
}


size_t CHTLJavaScriptParser::ArrowFunctionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleArrowFunction;
}

void CHTLJavaScriptParser::ArrowFunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrowFunction(this);
}

void CHTLJavaScriptParser::ArrowFunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrowFunction(this);
}

CHTLJavaScriptParser::ArrowFunctionContext* CHTLJavaScriptParser::arrowFunction() {
  ArrowFunctionContext *_localctx = _tracker.createInstance<ArrowFunctionContext>(_ctx, getState());
  enterRule(_localctx, 264, CHTLJavaScriptParser::RuleArrowFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1519);
    arrowParameters();
    setState(1520);
    match(CHTLJavaScriptParser::T__119);
    setState(1521);
    arrowBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AsyncArrowFunctionContext ------------------------------------------------------------------

CHTLJavaScriptParser::AsyncArrowFunctionContext::AsyncArrowFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ArrowParametersContext* CHTLJavaScriptParser::AsyncArrowFunctionContext::arrowParameters() {
  return getRuleContext<CHTLJavaScriptParser::ArrowParametersContext>(0);
}

CHTLJavaScriptParser::ArrowBodyContext* CHTLJavaScriptParser::AsyncArrowFunctionContext::arrowBody() {
  return getRuleContext<CHTLJavaScriptParser::ArrowBodyContext>(0);
}


size_t CHTLJavaScriptParser::AsyncArrowFunctionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleAsyncArrowFunction;
}

void CHTLJavaScriptParser::AsyncArrowFunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAsyncArrowFunction(this);
}

void CHTLJavaScriptParser::AsyncArrowFunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAsyncArrowFunction(this);
}

CHTLJavaScriptParser::AsyncArrowFunctionContext* CHTLJavaScriptParser::asyncArrowFunction() {
  AsyncArrowFunctionContext *_localctx = _tracker.createInstance<AsyncArrowFunctionContext>(_ctx, getState());
  enterRule(_localctx, 266, CHTLJavaScriptParser::RuleAsyncArrowFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1523);
    match(CHTLJavaScriptParser::T__35);
    setState(1524);
    arrowParameters();
    setState(1525);
    match(CHTLJavaScriptParser::T__119);
    setState(1526);
    arrowBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrowParametersContext ------------------------------------------------------------------

CHTLJavaScriptParser::ArrowParametersContext::ArrowParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::BindingIdentifierContext* CHTLJavaScriptParser::ArrowParametersContext::bindingIdentifier() {
  return getRuleContext<CHTLJavaScriptParser::BindingIdentifierContext>(0);
}

CHTLJavaScriptParser::FormalParameterListContext* CHTLJavaScriptParser::ArrowParametersContext::formalParameterList() {
  return getRuleContext<CHTLJavaScriptParser::FormalParameterListContext>(0);
}


size_t CHTLJavaScriptParser::ArrowParametersContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleArrowParameters;
}

void CHTLJavaScriptParser::ArrowParametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrowParameters(this);
}

void CHTLJavaScriptParser::ArrowParametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrowParameters(this);
}

CHTLJavaScriptParser::ArrowParametersContext* CHTLJavaScriptParser::arrowParameters() {
  ArrowParametersContext *_localctx = _tracker.createInstance<ArrowParametersContext>(_ctx, getState());
  enterRule(_localctx, 268, CHTLJavaScriptParser::RuleArrowParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1534);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CHTLJavaScriptParser::T__50:
      case CHTLJavaScriptParser::T__120:
      case CHTLJavaScriptParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1528);
        bindingIdentifier();
        break;
      }

      case CHTLJavaScriptParser::T__11: {
        enterOuterAlt(_localctx, 2);
        setState(1529);
        match(CHTLJavaScriptParser::T__11);
        setState(1531);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 2251799813750848) != 0) || ((((_la - 115) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 115)) & 131137) != 0)) {
          setState(1530);
          formalParameterList();
        }
        setState(1533);
        match(CHTLJavaScriptParser::T__12);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrowBodyContext ------------------------------------------------------------------

CHTLJavaScriptParser::ArrowBodyContext::ArrowBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::AssignmentExpressionContext* CHTLJavaScriptParser::ArrowBodyContext::assignmentExpression() {
  return getRuleContext<CHTLJavaScriptParser::AssignmentExpressionContext>(0);
}

CHTLJavaScriptParser::FunctionBodyContext* CHTLJavaScriptParser::ArrowBodyContext::functionBody() {
  return getRuleContext<CHTLJavaScriptParser::FunctionBodyContext>(0);
}


size_t CHTLJavaScriptParser::ArrowBodyContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleArrowBody;
}

void CHTLJavaScriptParser::ArrowBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrowBody(this);
}

void CHTLJavaScriptParser::ArrowBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrowBody(this);
}

CHTLJavaScriptParser::ArrowBodyContext* CHTLJavaScriptParser::arrowBody() {
  ArrowBodyContext *_localctx = _tracker.createInstance<ArrowBodyContext>(_ctx, getState());
  enterRule(_localctx, 270, CHTLJavaScriptParser::RuleArrowBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1541);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1536);
      assignmentExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1537);
      match(CHTLJavaScriptParser::T__15);
      setState(1538);
      functionBody();
      setState(1539);
      match(CHTLJavaScriptParser::T__16);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- YieldExpressionContext ------------------------------------------------------------------

CHTLJavaScriptParser::YieldExpressionContext::YieldExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::AssignmentExpressionContext* CHTLJavaScriptParser::YieldExpressionContext::assignmentExpression() {
  return getRuleContext<CHTLJavaScriptParser::AssignmentExpressionContext>(0);
}


size_t CHTLJavaScriptParser::YieldExpressionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleYieldExpression;
}

void CHTLJavaScriptParser::YieldExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterYieldExpression(this);
}

void CHTLJavaScriptParser::YieldExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitYieldExpression(this);
}

CHTLJavaScriptParser::YieldExpressionContext* CHTLJavaScriptParser::yieldExpression() {
  YieldExpressionContext *_localctx = _tracker.createInstance<YieldExpressionContext>(_ctx, getState());
  enterRule(_localctx, 272, CHTLJavaScriptParser::RuleYieldExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1549);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1543);
      match(CHTLJavaScriptParser::T__120);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1544);
      match(CHTLJavaScriptParser::T__120);
      setState(1545);
      assignmentExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1546);
      match(CHTLJavaScriptParser::T__120);
      setState(1547);
      match(CHTLJavaScriptParser::T__34);
      setState(1548);
      assignmentExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateLiteralContext ------------------------------------------------------------------

CHTLJavaScriptParser::TemplateLiteralContext::TemplateLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::TemplateSpansContext* CHTLJavaScriptParser::TemplateLiteralContext::templateSpans() {
  return getRuleContext<CHTLJavaScriptParser::TemplateSpansContext>(0);
}


size_t CHTLJavaScriptParser::TemplateLiteralContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleTemplateLiteral;
}

void CHTLJavaScriptParser::TemplateLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTemplateLiteral(this);
}

void CHTLJavaScriptParser::TemplateLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTemplateLiteral(this);
}

CHTLJavaScriptParser::TemplateLiteralContext* CHTLJavaScriptParser::templateLiteral() {
  TemplateLiteralContext *_localctx = _tracker.createInstance<TemplateLiteralContext>(_ctx, getState());
  enterRule(_localctx, 274, CHTLJavaScriptParser::RuleTemplateLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1551);
    match(CHTLJavaScriptParser::T__121);
    setState(1553);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CHTLJavaScriptParser::TEMPLATE_STRING_LITERAL

    || _la == CHTLJavaScriptParser::TEMPLATE_STRING_START) {
      setState(1552);
      templateSpans();
    }
    setState(1555);
    match(CHTLJavaScriptParser::T__121);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateSpansContext ------------------------------------------------------------------

CHTLJavaScriptParser::TemplateSpansContext::TemplateSpansContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::TemplateSpanContext *> CHTLJavaScriptParser::TemplateSpansContext::templateSpan() {
  return getRuleContexts<CHTLJavaScriptParser::TemplateSpanContext>();
}

CHTLJavaScriptParser::TemplateSpanContext* CHTLJavaScriptParser::TemplateSpansContext::templateSpan(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::TemplateSpanContext>(i);
}


size_t CHTLJavaScriptParser::TemplateSpansContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleTemplateSpans;
}

void CHTLJavaScriptParser::TemplateSpansContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTemplateSpans(this);
}

void CHTLJavaScriptParser::TemplateSpansContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTemplateSpans(this);
}

CHTLJavaScriptParser::TemplateSpansContext* CHTLJavaScriptParser::templateSpans() {
  TemplateSpansContext *_localctx = _tracker.createInstance<TemplateSpansContext>(_ctx, getState());
  enterRule(_localctx, 276, CHTLJavaScriptParser::RuleTemplateSpans);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1558); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1557);
      templateSpan();
      setState(1560); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == CHTLJavaScriptParser::TEMPLATE_STRING_LITERAL

    || _la == CHTLJavaScriptParser::TEMPLATE_STRING_START);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateSpanContext ------------------------------------------------------------------

CHTLJavaScriptParser::TemplateSpanContext::TemplateSpanContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CHTLJavaScriptParser::TemplateSpanContext::TEMPLATE_STRING_LITERAL() {
  return getToken(CHTLJavaScriptParser::TEMPLATE_STRING_LITERAL, 0);
}

tree::TerminalNode* CHTLJavaScriptParser::TemplateSpanContext::TEMPLATE_STRING_START() {
  return getToken(CHTLJavaScriptParser::TEMPLATE_STRING_START, 0);
}

CHTLJavaScriptParser::ExpressionContext* CHTLJavaScriptParser::TemplateSpanContext::expression() {
  return getRuleContext<CHTLJavaScriptParser::ExpressionContext>(0);
}

tree::TerminalNode* CHTLJavaScriptParser::TemplateSpanContext::TEMPLATE_STRING_END() {
  return getToken(CHTLJavaScriptParser::TEMPLATE_STRING_END, 0);
}

std::vector<CHTLJavaScriptParser::TemplateMiddleContext *> CHTLJavaScriptParser::TemplateSpanContext::templateMiddle() {
  return getRuleContexts<CHTLJavaScriptParser::TemplateMiddleContext>();
}

CHTLJavaScriptParser::TemplateMiddleContext* CHTLJavaScriptParser::TemplateSpanContext::templateMiddle(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::TemplateMiddleContext>(i);
}


size_t CHTLJavaScriptParser::TemplateSpanContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleTemplateSpan;
}

void CHTLJavaScriptParser::TemplateSpanContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTemplateSpan(this);
}

void CHTLJavaScriptParser::TemplateSpanContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTemplateSpan(this);
}

CHTLJavaScriptParser::TemplateSpanContext* CHTLJavaScriptParser::templateSpan() {
  TemplateSpanContext *_localctx = _tracker.createInstance<TemplateSpanContext>(_ctx, getState());
  enterRule(_localctx, 278, CHTLJavaScriptParser::RuleTemplateSpan);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1573);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CHTLJavaScriptParser::TEMPLATE_STRING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(1562);
        match(CHTLJavaScriptParser::TEMPLATE_STRING_LITERAL);
        break;
      }

      case CHTLJavaScriptParser::TEMPLATE_STRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(1563);
        match(CHTLJavaScriptParser::TEMPLATE_STRING_START);
        setState(1564);
        expression();
        setState(1568);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CHTLJavaScriptParser::TEMPLATE_STRING_MIDDLE) {
          setState(1565);
          templateMiddle();
          setState(1570);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1571);
        match(CHTLJavaScriptParser::TEMPLATE_STRING_END);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateMiddleContext ------------------------------------------------------------------

CHTLJavaScriptParser::TemplateMiddleContext::TemplateMiddleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CHTLJavaScriptParser::TemplateMiddleContext::TEMPLATE_STRING_MIDDLE() {
  return getToken(CHTLJavaScriptParser::TEMPLATE_STRING_MIDDLE, 0);
}

CHTLJavaScriptParser::ExpressionContext* CHTLJavaScriptParser::TemplateMiddleContext::expression() {
  return getRuleContext<CHTLJavaScriptParser::ExpressionContext>(0);
}


size_t CHTLJavaScriptParser::TemplateMiddleContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleTemplateMiddle;
}

void CHTLJavaScriptParser::TemplateMiddleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTemplateMiddle(this);
}

void CHTLJavaScriptParser::TemplateMiddleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTemplateMiddle(this);
}

CHTLJavaScriptParser::TemplateMiddleContext* CHTLJavaScriptParser::templateMiddle() {
  TemplateMiddleContext *_localctx = _tracker.createInstance<TemplateMiddleContext>(_ctx, getState());
  enterRule(_localctx, 280, CHTLJavaScriptParser::RuleTemplateMiddle);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1575);
    match(CHTLJavaScriptParser::TEMPLATE_STRING_MIDDLE);
    setState(1576);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RegularExpressionLiteralContext ------------------------------------------------------------------

CHTLJavaScriptParser::RegularExpressionLiteralContext::RegularExpressionLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CHTLJavaScriptParser::RegularExpressionLiteralContext::REGEX_LITERAL() {
  return getToken(CHTLJavaScriptParser::REGEX_LITERAL, 0);
}


size_t CHTLJavaScriptParser::RegularExpressionLiteralContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleRegularExpressionLiteral;
}

void CHTLJavaScriptParser::RegularExpressionLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRegularExpressionLiteral(this);
}

void CHTLJavaScriptParser::RegularExpressionLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRegularExpressionLiteral(this);
}

CHTLJavaScriptParser::RegularExpressionLiteralContext* CHTLJavaScriptParser::regularExpressionLiteral() {
  RegularExpressionLiteralContext *_localctx = _tracker.createInstance<RegularExpressionLiteralContext>(_ctx, getState());
  enterRule(_localctx, 282, CHTLJavaScriptParser::RuleRegularExpressionLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1578);
    match(CHTLJavaScriptParser::REGEX_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameterListContext ------------------------------------------------------------------

CHTLJavaScriptParser::FormalParameterListContext::FormalParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::FormalParameterContext *> CHTLJavaScriptParser::FormalParameterListContext::formalParameter() {
  return getRuleContexts<CHTLJavaScriptParser::FormalParameterContext>();
}

CHTLJavaScriptParser::FormalParameterContext* CHTLJavaScriptParser::FormalParameterListContext::formalParameter(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::FormalParameterContext>(i);
}

CHTLJavaScriptParser::RestParameterContext* CHTLJavaScriptParser::FormalParameterListContext::restParameter() {
  return getRuleContext<CHTLJavaScriptParser::RestParameterContext>(0);
}


size_t CHTLJavaScriptParser::FormalParameterListContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleFormalParameterList;
}

void CHTLJavaScriptParser::FormalParameterListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameterList(this);
}

void CHTLJavaScriptParser::FormalParameterListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameterList(this);
}

CHTLJavaScriptParser::FormalParameterListContext* CHTLJavaScriptParser::formalParameterList() {
  FormalParameterListContext *_localctx = _tracker.createInstance<FormalParameterListContext>(_ctx, getState());
  enterRule(_localctx, 284, CHTLJavaScriptParser::RuleFormalParameterList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1593);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CHTLJavaScriptParser::T__5:
      case CHTLJavaScriptParser::T__15:
      case CHTLJavaScriptParser::T__50:
      case CHTLJavaScriptParser::T__120:
      case CHTLJavaScriptParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1580);
        formalParameter();
        setState(1585);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1581);
            match(CHTLJavaScriptParser::T__17);
            setState(1582);
            formalParameter(); 
          }
          setState(1587);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx);
        }
        setState(1590);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CHTLJavaScriptParser::T__17) {
          setState(1588);
          match(CHTLJavaScriptParser::T__17);
          setState(1589);
          restParameter();
        }
        break;
      }

      case CHTLJavaScriptParser::T__114: {
        enterOuterAlt(_localctx, 2);
        setState(1592);
        restParameter();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameterContext ------------------------------------------------------------------

CHTLJavaScriptParser::FormalParameterContext::FormalParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::BindingElementContext* CHTLJavaScriptParser::FormalParameterContext::bindingElement() {
  return getRuleContext<CHTLJavaScriptParser::BindingElementContext>(0);
}


size_t CHTLJavaScriptParser::FormalParameterContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleFormalParameter;
}

void CHTLJavaScriptParser::FormalParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameter(this);
}

void CHTLJavaScriptParser::FormalParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameter(this);
}

CHTLJavaScriptParser::FormalParameterContext* CHTLJavaScriptParser::formalParameter() {
  FormalParameterContext *_localctx = _tracker.createInstance<FormalParameterContext>(_ctx, getState());
  enterRule(_localctx, 286, CHTLJavaScriptParser::RuleFormalParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1595);
    bindingElement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RestParameterContext ------------------------------------------------------------------

CHTLJavaScriptParser::RestParameterContext::RestParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::BindingIdentifierContext* CHTLJavaScriptParser::RestParameterContext::bindingIdentifier() {
  return getRuleContext<CHTLJavaScriptParser::BindingIdentifierContext>(0);
}

CHTLJavaScriptParser::BindingPatternContext* CHTLJavaScriptParser::RestParameterContext::bindingPattern() {
  return getRuleContext<CHTLJavaScriptParser::BindingPatternContext>(0);
}


size_t CHTLJavaScriptParser::RestParameterContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleRestParameter;
}

void CHTLJavaScriptParser::RestParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRestParameter(this);
}

void CHTLJavaScriptParser::RestParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRestParameter(this);
}

CHTLJavaScriptParser::RestParameterContext* CHTLJavaScriptParser::restParameter() {
  RestParameterContext *_localctx = _tracker.createInstance<RestParameterContext>(_ctx, getState());
  enterRule(_localctx, 288, CHTLJavaScriptParser::RuleRestParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1601);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1597);
      match(CHTLJavaScriptParser::T__114);
      setState(1598);
      bindingIdentifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1599);
      match(CHTLJavaScriptParser::T__114);
      setState(1600);
      bindingPattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingElementContext ------------------------------------------------------------------

CHTLJavaScriptParser::BindingElementContext::BindingElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::BindingIdentifierContext* CHTLJavaScriptParser::BindingElementContext::bindingIdentifier() {
  return getRuleContext<CHTLJavaScriptParser::BindingIdentifierContext>(0);
}

CHTLJavaScriptParser::InitializerContext* CHTLJavaScriptParser::BindingElementContext::initializer() {
  return getRuleContext<CHTLJavaScriptParser::InitializerContext>(0);
}

CHTLJavaScriptParser::BindingPatternContext* CHTLJavaScriptParser::BindingElementContext::bindingPattern() {
  return getRuleContext<CHTLJavaScriptParser::BindingPatternContext>(0);
}


size_t CHTLJavaScriptParser::BindingElementContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleBindingElement;
}

void CHTLJavaScriptParser::BindingElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBindingElement(this);
}

void CHTLJavaScriptParser::BindingElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBindingElement(this);
}

CHTLJavaScriptParser::BindingElementContext* CHTLJavaScriptParser::bindingElement() {
  BindingElementContext *_localctx = _tracker.createInstance<BindingElementContext>(_ctx, getState());
  enterRule(_localctx, 290, CHTLJavaScriptParser::RuleBindingElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1611);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CHTLJavaScriptParser::T__50:
      case CHTLJavaScriptParser::T__120:
      case CHTLJavaScriptParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1603);
        bindingIdentifier();
        setState(1605);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CHTLJavaScriptParser::T__68) {
          setState(1604);
          initializer();
        }
        break;
      }

      case CHTLJavaScriptParser::T__5:
      case CHTLJavaScriptParser::T__15: {
        enterOuterAlt(_localctx, 2);
        setState(1607);
        bindingPattern();
        setState(1609);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CHTLJavaScriptParser::T__68) {
          setState(1608);
          initializer();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingPatternContext ------------------------------------------------------------------

CHTLJavaScriptParser::BindingPatternContext::BindingPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::ObjectBindingPatternContext* CHTLJavaScriptParser::BindingPatternContext::objectBindingPattern() {
  return getRuleContext<CHTLJavaScriptParser::ObjectBindingPatternContext>(0);
}

CHTLJavaScriptParser::ArrayBindingPatternContext* CHTLJavaScriptParser::BindingPatternContext::arrayBindingPattern() {
  return getRuleContext<CHTLJavaScriptParser::ArrayBindingPatternContext>(0);
}


size_t CHTLJavaScriptParser::BindingPatternContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleBindingPattern;
}

void CHTLJavaScriptParser::BindingPatternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBindingPattern(this);
}

void CHTLJavaScriptParser::BindingPatternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBindingPattern(this);
}

CHTLJavaScriptParser::BindingPatternContext* CHTLJavaScriptParser::bindingPattern() {
  BindingPatternContext *_localctx = _tracker.createInstance<BindingPatternContext>(_ctx, getState());
  enterRule(_localctx, 292, CHTLJavaScriptParser::RuleBindingPattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1615);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CHTLJavaScriptParser::T__15: {
        enterOuterAlt(_localctx, 1);
        setState(1613);
        objectBindingPattern();
        break;
      }

      case CHTLJavaScriptParser::T__5: {
        enterOuterAlt(_localctx, 2);
        setState(1614);
        arrayBindingPattern();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectBindingPatternContext ------------------------------------------------------------------

CHTLJavaScriptParser::ObjectBindingPatternContext::ObjectBindingPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::BindingPropertyListContext* CHTLJavaScriptParser::ObjectBindingPatternContext::bindingPropertyList() {
  return getRuleContext<CHTLJavaScriptParser::BindingPropertyListContext>(0);
}


size_t CHTLJavaScriptParser::ObjectBindingPatternContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleObjectBindingPattern;
}

void CHTLJavaScriptParser::ObjectBindingPatternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObjectBindingPattern(this);
}

void CHTLJavaScriptParser::ObjectBindingPatternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObjectBindingPattern(this);
}

CHTLJavaScriptParser::ObjectBindingPatternContext* CHTLJavaScriptParser::objectBindingPattern() {
  ObjectBindingPatternContext *_localctx = _tracker.createInstance<ObjectBindingPatternContext>(_ctx, getState());
  enterRule(_localctx, 294, CHTLJavaScriptParser::RuleObjectBindingPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1627);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 147, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1617);
      match(CHTLJavaScriptParser::T__15);
      setState(1619);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CHTLJavaScriptParser::T__50 || ((((_la - 115) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 115)) & 131137) != 0)) {
        setState(1618);
        bindingPropertyList();
      }
      setState(1621);
      match(CHTLJavaScriptParser::T__16);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1622);
      match(CHTLJavaScriptParser::T__15);
      setState(1623);
      bindingPropertyList();
      setState(1624);
      match(CHTLJavaScriptParser::T__17);
      setState(1625);
      match(CHTLJavaScriptParser::T__16);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingPropertyListContext ------------------------------------------------------------------

CHTLJavaScriptParser::BindingPropertyListContext::BindingPropertyListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::BindingPropertyContext *> CHTLJavaScriptParser::BindingPropertyListContext::bindingProperty() {
  return getRuleContexts<CHTLJavaScriptParser::BindingPropertyContext>();
}

CHTLJavaScriptParser::BindingPropertyContext* CHTLJavaScriptParser::BindingPropertyListContext::bindingProperty(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::BindingPropertyContext>(i);
}


size_t CHTLJavaScriptParser::BindingPropertyListContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleBindingPropertyList;
}

void CHTLJavaScriptParser::BindingPropertyListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBindingPropertyList(this);
}

void CHTLJavaScriptParser::BindingPropertyListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBindingPropertyList(this);
}

CHTLJavaScriptParser::BindingPropertyListContext* CHTLJavaScriptParser::bindingPropertyList() {
  BindingPropertyListContext *_localctx = _tracker.createInstance<BindingPropertyListContext>(_ctx, getState());
  enterRule(_localctx, 296, CHTLJavaScriptParser::RuleBindingPropertyList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1629);
    bindingProperty();
    setState(1634);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1630);
        match(CHTLJavaScriptParser::T__17);
        setState(1631);
        bindingProperty(); 
      }
      setState(1636);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingPropertyContext ------------------------------------------------------------------

CHTLJavaScriptParser::BindingPropertyContext::BindingPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::BindingIdentifierContext* CHTLJavaScriptParser::BindingPropertyContext::bindingIdentifier() {
  return getRuleContext<CHTLJavaScriptParser::BindingIdentifierContext>(0);
}

CHTLJavaScriptParser::PropertyNameContext* CHTLJavaScriptParser::BindingPropertyContext::propertyName() {
  return getRuleContext<CHTLJavaScriptParser::PropertyNameContext>(0);
}

CHTLJavaScriptParser::BindingElementContext* CHTLJavaScriptParser::BindingPropertyContext::bindingElement() {
  return getRuleContext<CHTLJavaScriptParser::BindingElementContext>(0);
}


size_t CHTLJavaScriptParser::BindingPropertyContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleBindingProperty;
}

void CHTLJavaScriptParser::BindingPropertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBindingProperty(this);
}

void CHTLJavaScriptParser::BindingPropertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBindingProperty(this);
}

CHTLJavaScriptParser::BindingPropertyContext* CHTLJavaScriptParser::bindingProperty() {
  BindingPropertyContext *_localctx = _tracker.createInstance<BindingPropertyContext>(_ctx, getState());
  enterRule(_localctx, 298, CHTLJavaScriptParser::RuleBindingProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1644);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 149, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1637);
      bindingIdentifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1638);
      propertyName();
      setState(1639);
      match(CHTLJavaScriptParser::T__18);
      setState(1640);
      bindingElement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1642);
      match(CHTLJavaScriptParser::T__114);
      setState(1643);
      bindingIdentifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayBindingPatternContext ------------------------------------------------------------------

CHTLJavaScriptParser::ArrayBindingPatternContext::ArrayBindingPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::BindingElementListContext* CHTLJavaScriptParser::ArrayBindingPatternContext::bindingElementList() {
  return getRuleContext<CHTLJavaScriptParser::BindingElementListContext>(0);
}


size_t CHTLJavaScriptParser::ArrayBindingPatternContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleArrayBindingPattern;
}

void CHTLJavaScriptParser::ArrayBindingPatternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayBindingPattern(this);
}

void CHTLJavaScriptParser::ArrayBindingPatternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayBindingPattern(this);
}

CHTLJavaScriptParser::ArrayBindingPatternContext* CHTLJavaScriptParser::arrayBindingPattern() {
  ArrayBindingPatternContext *_localctx = _tracker.createInstance<ArrayBindingPatternContext>(_ctx, getState());
  enterRule(_localctx, 300, CHTLJavaScriptParser::RuleArrayBindingPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1646);
    match(CHTLJavaScriptParser::T__5);
    setState(1648);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251799814012992) != 0) || _la == CHTLJavaScriptParser::T__120

    || _la == CHTLJavaScriptParser::IDENTIFIER) {
      setState(1647);
      bindingElementList();
    }
    setState(1650);
    match(CHTLJavaScriptParser::T__6);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingElementListContext ------------------------------------------------------------------

CHTLJavaScriptParser::BindingElementListContext::BindingElementListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CHTLJavaScriptParser::BindingElementContext *> CHTLJavaScriptParser::BindingElementListContext::bindingElement() {
  return getRuleContexts<CHTLJavaScriptParser::BindingElementContext>();
}

CHTLJavaScriptParser::BindingElementContext* CHTLJavaScriptParser::BindingElementListContext::bindingElement(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::BindingElementContext>(i);
}

std::vector<CHTLJavaScriptParser::BindingElisionContext *> CHTLJavaScriptParser::BindingElementListContext::bindingElision() {
  return getRuleContexts<CHTLJavaScriptParser::BindingElisionContext>();
}

CHTLJavaScriptParser::BindingElisionContext* CHTLJavaScriptParser::BindingElementListContext::bindingElision(size_t i) {
  return getRuleContext<CHTLJavaScriptParser::BindingElisionContext>(i);
}


size_t CHTLJavaScriptParser::BindingElementListContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleBindingElementList;
}

void CHTLJavaScriptParser::BindingElementListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBindingElementList(this);
}

void CHTLJavaScriptParser::BindingElementListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBindingElementList(this);
}

CHTLJavaScriptParser::BindingElementListContext* CHTLJavaScriptParser::bindingElementList() {
  BindingElementListContext *_localctx = _tracker.createInstance<BindingElementListContext>(_ctx, getState());
  enterRule(_localctx, 302, CHTLJavaScriptParser::RuleBindingElementList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1653);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CHTLJavaScriptParser::T__17) {
      setState(1652);
      bindingElision();
    }
    setState(1655);
    bindingElement();
    setState(1663);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1656);
        match(CHTLJavaScriptParser::T__17);
        setState(1658);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CHTLJavaScriptParser::T__17) {
          setState(1657);
          bindingElision();
        }
        setState(1660);
        bindingElement(); 
      }
      setState(1665);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
    }
    setState(1670);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CHTLJavaScriptParser::T__17) {
      setState(1666);
      match(CHTLJavaScriptParser::T__17);
      setState(1668);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CHTLJavaScriptParser::T__17) {
        setState(1667);
        bindingElision();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingElisionContext ------------------------------------------------------------------

CHTLJavaScriptParser::BindingElisionContext::BindingElisionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CHTLJavaScriptParser::BindingElisionContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleBindingElision;
}

void CHTLJavaScriptParser::BindingElisionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBindingElision(this);
}

void CHTLJavaScriptParser::BindingElisionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBindingElision(this);
}

CHTLJavaScriptParser::BindingElisionContext* CHTLJavaScriptParser::bindingElision() {
  BindingElisionContext *_localctx = _tracker.createInstance<BindingElisionContext>(_ctx, getState());
  enterRule(_localctx, 304, CHTLJavaScriptParser::RuleBindingElision);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1672);
    match(CHTLJavaScriptParser::T__17);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionBodyContext ------------------------------------------------------------------

CHTLJavaScriptParser::FunctionBodyContext::FunctionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::SourceElementsContext* CHTLJavaScriptParser::FunctionBodyContext::sourceElements() {
  return getRuleContext<CHTLJavaScriptParser::SourceElementsContext>(0);
}


size_t CHTLJavaScriptParser::FunctionBodyContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleFunctionBody;
}

void CHTLJavaScriptParser::FunctionBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionBody(this);
}

void CHTLJavaScriptParser::FunctionBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionBody(this);
}

CHTLJavaScriptParser::FunctionBodyContext* CHTLJavaScriptParser::functionBody() {
  FunctionBodyContext *_localctx = _tracker.createInstance<FunctionBodyContext>(_ctx, getState());
  enterRule(_localctx, 306, CHTLJavaScriptParser::RuleFunctionBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1675);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3741290853428204358) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 434580871366836243) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 132)) & 33431561) != 0)) {
      setState(1674);
      sourceElements();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializerContext ------------------------------------------------------------------

CHTLJavaScriptParser::InitializerContext::InitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::AssignmentExpressionContext* CHTLJavaScriptParser::InitializerContext::assignmentExpression() {
  return getRuleContext<CHTLJavaScriptParser::AssignmentExpressionContext>(0);
}


size_t CHTLJavaScriptParser::InitializerContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleInitializer;
}

void CHTLJavaScriptParser::InitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializer(this);
}

void CHTLJavaScriptParser::InitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializer(this);
}

CHTLJavaScriptParser::InitializerContext* CHTLJavaScriptParser::initializer() {
  InitializerContext *_localctx = _tracker.createInstance<InitializerContext>(_ctx, getState());
  enterRule(_localctx, 308, CHTLJavaScriptParser::RuleInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1677);
    match(CHTLJavaScriptParser::T__68);
    setState(1678);
    assignmentExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingIdentifierContext ------------------------------------------------------------------

CHTLJavaScriptParser::BindingIdentifierContext::BindingIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::IdentifierContext* CHTLJavaScriptParser::BindingIdentifierContext::identifier() {
  return getRuleContext<CHTLJavaScriptParser::IdentifierContext>(0);
}


size_t CHTLJavaScriptParser::BindingIdentifierContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleBindingIdentifier;
}

void CHTLJavaScriptParser::BindingIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBindingIdentifier(this);
}

void CHTLJavaScriptParser::BindingIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBindingIdentifier(this);
}

CHTLJavaScriptParser::BindingIdentifierContext* CHTLJavaScriptParser::bindingIdentifier() {
  BindingIdentifierContext *_localctx = _tracker.createInstance<BindingIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 310, CHTLJavaScriptParser::RuleBindingIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1683);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1680);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1681);
      match(CHTLJavaScriptParser::T__120);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1682);
      match(CHTLJavaScriptParser::T__50);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

CHTLJavaScriptParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CHTLJavaScriptParser::IdentifierContext::IDENTIFIER() {
  return getToken(CHTLJavaScriptParser::IDENTIFIER, 0);
}


size_t CHTLJavaScriptParser::IdentifierContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleIdentifier;
}

void CHTLJavaScriptParser::IdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier(this);
}

void CHTLJavaScriptParser::IdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier(this);
}

CHTLJavaScriptParser::IdentifierContext* CHTLJavaScriptParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 312, CHTLJavaScriptParser::RuleIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1685);
    _la = _input->LA(1);
    if (!(_la == CHTLJavaScriptParser::T__50 || _la == CHTLJavaScriptParser::T__120

    || _la == CHTLJavaScriptParser::IDENTIFIER)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierNameContext ------------------------------------------------------------------

CHTLJavaScriptParser::IdentifierNameContext::IdentifierNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CHTLJavaScriptParser::IdentifierNameContext::IDENTIFIER() {
  return getToken(CHTLJavaScriptParser::IDENTIFIER, 0);
}

CHTLJavaScriptParser::ReservedWordContext* CHTLJavaScriptParser::IdentifierNameContext::reservedWord() {
  return getRuleContext<CHTLJavaScriptParser::ReservedWordContext>(0);
}


size_t CHTLJavaScriptParser::IdentifierNameContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleIdentifierName;
}

void CHTLJavaScriptParser::IdentifierNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifierName(this);
}

void CHTLJavaScriptParser::IdentifierNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifierName(this);
}

CHTLJavaScriptParser::IdentifierNameContext* CHTLJavaScriptParser::identifierName() {
  IdentifierNameContext *_localctx = _tracker.createInstance<IdentifierNameContext>(_ctx, getState());
  enterRule(_localctx, 314, CHTLJavaScriptParser::RuleIdentifierName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1689);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CHTLJavaScriptParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1687);
        match(CHTLJavaScriptParser::IDENTIFIER);
        break;
      }

      case CHTLJavaScriptParser::T__0:
      case CHTLJavaScriptParser::T__7:
      case CHTLJavaScriptParser::T__8:
      case CHTLJavaScriptParser::T__33:
      case CHTLJavaScriptParser::T__35:
      case CHTLJavaScriptParser::T__36:
      case CHTLJavaScriptParser::T__37:
      case CHTLJavaScriptParser::T__38:
      case CHTLJavaScriptParser::T__41:
      case CHTLJavaScriptParser::T__42:
      case CHTLJavaScriptParser::T__43:
      case CHTLJavaScriptParser::T__44:
      case CHTLJavaScriptParser::T__45:
      case CHTLJavaScriptParser::T__46:
      case CHTLJavaScriptParser::T__47:
      case CHTLJavaScriptParser::T__48:
      case CHTLJavaScriptParser::T__49:
      case CHTLJavaScriptParser::T__50:
      case CHTLJavaScriptParser::T__52:
      case CHTLJavaScriptParser::T__53:
      case CHTLJavaScriptParser::T__54:
      case CHTLJavaScriptParser::T__55:
      case CHTLJavaScriptParser::T__56:
      case CHTLJavaScriptParser::T__57:
      case CHTLJavaScriptParser::T__58:
      case CHTLJavaScriptParser::T__59:
      case CHTLJavaScriptParser::T__60:
      case CHTLJavaScriptParser::T__61:
      case CHTLJavaScriptParser::T__62:
      case CHTLJavaScriptParser::T__63:
      case CHTLJavaScriptParser::T__64:
      case CHTLJavaScriptParser::T__67:
      case CHTLJavaScriptParser::T__99:
      case CHTLJavaScriptParser::T__107:
      case CHTLJavaScriptParser::T__108:
      case CHTLJavaScriptParser::T__109:
      case CHTLJavaScriptParser::T__116:
      case CHTLJavaScriptParser::T__117:
      case CHTLJavaScriptParser::T__118:
      case CHTLJavaScriptParser::T__120:
      case CHTLJavaScriptParser::T__122:
      case CHTLJavaScriptParser::T__123:
      case CHTLJavaScriptParser::T__124:
      case CHTLJavaScriptParser::T__125:
      case CHTLJavaScriptParser::T__126:
      case CHTLJavaScriptParser::T__127:
      case CHTLJavaScriptParser::T__128: {
        enterOuterAlt(_localctx, 2);
        setState(1688);
        reservedWord();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReservedWordContext ------------------------------------------------------------------

CHTLJavaScriptParser::ReservedWordContext::ReservedWordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CHTLJavaScriptParser::KeywordContext* CHTLJavaScriptParser::ReservedWordContext::keyword() {
  return getRuleContext<CHTLJavaScriptParser::KeywordContext>(0);
}

CHTLJavaScriptParser::FutureReservedWordContext* CHTLJavaScriptParser::ReservedWordContext::futureReservedWord() {
  return getRuleContext<CHTLJavaScriptParser::FutureReservedWordContext>(0);
}

CHTLJavaScriptParser::NullLiteralContext* CHTLJavaScriptParser::ReservedWordContext::nullLiteral() {
  return getRuleContext<CHTLJavaScriptParser::NullLiteralContext>(0);
}

CHTLJavaScriptParser::BooleanLiteralContext* CHTLJavaScriptParser::ReservedWordContext::booleanLiteral() {
  return getRuleContext<CHTLJavaScriptParser::BooleanLiteralContext>(0);
}


size_t CHTLJavaScriptParser::ReservedWordContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleReservedWord;
}

void CHTLJavaScriptParser::ReservedWordContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReservedWord(this);
}

void CHTLJavaScriptParser::ReservedWordContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReservedWord(this);
}

CHTLJavaScriptParser::ReservedWordContext* CHTLJavaScriptParser::reservedWord() {
  ReservedWordContext *_localctx = _tracker.createInstance<ReservedWordContext>(_ctx, getState());
  enterRule(_localctx, 316, CHTLJavaScriptParser::RuleReservedWord);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1695);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CHTLJavaScriptParser::T__0:
      case CHTLJavaScriptParser::T__7:
      case CHTLJavaScriptParser::T__8:
      case CHTLJavaScriptParser::T__33:
      case CHTLJavaScriptParser::T__35:
      case CHTLJavaScriptParser::T__36:
      case CHTLJavaScriptParser::T__37:
      case CHTLJavaScriptParser::T__38:
      case CHTLJavaScriptParser::T__41:
      case CHTLJavaScriptParser::T__42:
      case CHTLJavaScriptParser::T__43:
      case CHTLJavaScriptParser::T__44:
      case CHTLJavaScriptParser::T__45:
      case CHTLJavaScriptParser::T__46:
      case CHTLJavaScriptParser::T__47:
      case CHTLJavaScriptParser::T__48:
      case CHTLJavaScriptParser::T__49:
      case CHTLJavaScriptParser::T__50:
      case CHTLJavaScriptParser::T__52:
      case CHTLJavaScriptParser::T__53:
      case CHTLJavaScriptParser::T__54:
      case CHTLJavaScriptParser::T__55:
      case CHTLJavaScriptParser::T__56:
      case CHTLJavaScriptParser::T__57:
      case CHTLJavaScriptParser::T__58:
      case CHTLJavaScriptParser::T__59:
      case CHTLJavaScriptParser::T__60:
      case CHTLJavaScriptParser::T__61:
      case CHTLJavaScriptParser::T__62:
      case CHTLJavaScriptParser::T__63:
      case CHTLJavaScriptParser::T__64:
      case CHTLJavaScriptParser::T__67:
      case CHTLJavaScriptParser::T__99:
      case CHTLJavaScriptParser::T__107:
      case CHTLJavaScriptParser::T__108:
      case CHTLJavaScriptParser::T__109:
      case CHTLJavaScriptParser::T__120: {
        enterOuterAlt(_localctx, 1);
        setState(1691);
        keyword();
        break;
      }

      case CHTLJavaScriptParser::T__122:
      case CHTLJavaScriptParser::T__123:
      case CHTLJavaScriptParser::T__124:
      case CHTLJavaScriptParser::T__125:
      case CHTLJavaScriptParser::T__126:
      case CHTLJavaScriptParser::T__127:
      case CHTLJavaScriptParser::T__128: {
        enterOuterAlt(_localctx, 2);
        setState(1692);
        futureReservedWord();
        break;
      }

      case CHTLJavaScriptParser::T__116: {
        enterOuterAlt(_localctx, 3);
        setState(1693);
        nullLiteral();
        break;
      }

      case CHTLJavaScriptParser::T__117:
      case CHTLJavaScriptParser::T__118: {
        enterOuterAlt(_localctx, 4);
        setState(1694);
        booleanLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeywordContext ------------------------------------------------------------------

CHTLJavaScriptParser::KeywordContext::KeywordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CHTLJavaScriptParser::KeywordContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleKeyword;
}

void CHTLJavaScriptParser::KeywordContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKeyword(this);
}

void CHTLJavaScriptParser::KeywordContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKeyword(this);
}

CHTLJavaScriptParser::KeywordContext* CHTLJavaScriptParser::keyword() {
  KeywordContext *_localctx = _tracker.createInstance<KeywordContext>(_ctx, getState());
  enterRule(_localctx, 318, CHTLJavaScriptParser::RuleKeyword);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1697);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4506949701860606) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 144238402097643539) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FutureReservedWordContext ------------------------------------------------------------------

CHTLJavaScriptParser::FutureReservedWordContext::FutureReservedWordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CHTLJavaScriptParser::FutureReservedWordContext::getRuleIndex() const {
  return CHTLJavaScriptParser::RuleFutureReservedWord;
}

void CHTLJavaScriptParser::FutureReservedWordContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFutureReservedWord(this);
}

void CHTLJavaScriptParser::FutureReservedWordContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CHTLJavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFutureReservedWord(this);
}

CHTLJavaScriptParser::FutureReservedWordContext* CHTLJavaScriptParser::futureReservedWord() {
  FutureReservedWordContext *_localctx = _tracker.createInstance<FutureReservedWordContext>(_ctx, getState());
  enterRule(_localctx, 320, CHTLJavaScriptParser::RuleFutureReservedWord);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1699);
    _la = _input->LA(1);
    if (!(((((_la - 123) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 123)) & 127) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool CHTLJavaScriptParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 7: return memberExpressionSempred(antlrcpp::downCast<MemberExpressionContext *>(context), predicateIndex);
    case 8: return callExpressionSempred(antlrcpp::downCast<CallExpressionContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool CHTLJavaScriptParser::memberExpressionSempred(MemberExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 10);
    case 1: return precpred(_ctx, 9);
    case 2: return precpred(_ctx, 8);
    case 3: return precpred(_ctx, 7);
    case 4: return precpred(_ctx, 2);
    case 5: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CHTLJavaScriptParser::callExpressionSempred(CallExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 6: return precpred(_ctx, 10);
    case 7: return precpred(_ctx, 9);
    case 8: return precpred(_ctx, 8);
    case 9: return precpred(_ctx, 7);
    case 10: return precpred(_ctx, 6);
    case 11: return precpred(_ctx, 5);
    case 12: return precpred(_ctx, 4);
    case 13: return precpred(_ctx, 3);
    case 14: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

void CHTLJavaScriptParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  chtljavascriptParserInitialize();
#else
  ::antlr4::internal::call_once(chtljavascriptParserOnceFlag, chtljavascriptParserInitialize);
#endif
}
