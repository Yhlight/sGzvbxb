
// Generated from grammars/JavaScript.g4 by ANTLR 4.13.1


#include "JavaScriptListener.h"

#include "JavaScriptParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct JavaScriptParserStaticData final {
  JavaScriptParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  JavaScriptParserStaticData(const JavaScriptParserStaticData&) = delete;
  JavaScriptParserStaticData(JavaScriptParserStaticData&&) = delete;
  JavaScriptParserStaticData& operator=(const JavaScriptParserStaticData&) = delete;
  JavaScriptParserStaticData& operator=(JavaScriptParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag javascriptParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
JavaScriptParserStaticData *javascriptParserStaticData = nullptr;

void javascriptParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (javascriptParserStaticData != nullptr) {
    return;
  }
#else
  assert(javascriptParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<JavaScriptParserStaticData>(
    std::vector<std::string>{
      "program", "sourceElements", "sourceElement", "declaration", "hoistableDeclaration", 
      "functionDeclaration", "generatorDeclaration", "asyncFunctionDeclaration", 
      "asyncGeneratorDeclaration", "classDeclaration", "classExtends", "classBody", 
      "classElement", "methodDefinition", "fieldDefinition", "lexicalDeclaration", 
      "letOrConst", "bindingList", "lexicalBinding", "statement", "blockStatement", 
      "statementList", "variableStatement", "variableDeclarationList", "variableDeclaration", 
      "emptyStatement", "expressionStatement", "ifStatement", "iterationStatement", 
      "doWhileStatement", "whileStatement", "forStatement", "forInit", "forInStatement", 
      "forOfStatement", "forInBinding", "continueStatement", "breakStatement", 
      "returnStatement", "withStatement", "labelledStatement", "switchStatement", 
      "caseClause", "defaultClause", "throwStatement", "tryStatement", "catchClause", 
      "catchParameter", "finallyClause", "debuggerStatement", "importStatement", 
      "importClause", "importedDefaultBinding", "namespaceImport", "namedImports", 
      "importsList", "importSpecifier", "moduleSpecifier", "exportStatement", 
      "exportClause", "exportsList", "exportSpecifier", "expression", "assignmentExpression", 
      "assignmentOperator", "conditionalExpression", "coalesceExpression", 
      "logicalORExpression", "logicalANDExpression", "bitwiseORExpression", 
      "bitwiseXORExpression", "bitwiseANDExpression", "equalityExpression", 
      "relationalExpression", "shiftExpression", "additiveExpression", "multiplicativeExpression", 
      "exponentiationExpression", "unaryExpression", "updateExpression", 
      "leftHandSideExpression", "newExpression", "callExpression", "superCall", 
      "importCall", "arguments", "argumentList", "argument", "memberExpression", 
      "metaProperty", "primaryExpression", "parenthesizedExpression", "literal", 
      "nullLiteral", "booleanLiteral", "numericLiteral", "stringLiteral", 
      "arrayLiteral", "elementList", "arrayElement", "objectLiteral", "propertyDefinitionList", 
      "propertyDefinition", "propertyName", "functionExpression", "generatorExpression", 
      "asyncFunctionExpression", "asyncGeneratorExpression", "classExpression", 
      "arrowFunction", "asyncArrowFunction", "arrowParameters", "arrowBody", 
      "yieldExpression", "templateLiteral", "templateSpans", "templateSpan", 
      "templateMiddle", "regularExpressionLiteral", "formalParameterList", 
      "formalParameter", "restParameter", "bindingElement", "bindingPattern", 
      "objectBindingPattern", "bindingPropertyList", "bindingProperty", 
      "arrayBindingPattern", "bindingElementList", "bindingElision", "functionBody", 
      "initializer", "bindingIdentifier", "identifier", "identifierName", 
      "reservedWord", "keyword", "futureReservedWord"
    },
    std::vector<std::string>{
      "", "'function'", "'('", "')'", "'{'", "'}'", "'*'", "'async'", "'class'", 
      "'extends'", "'static'", "';'", "'get'", "'set'", "'let'", "'const'", 
      "','", "'var'", "'if'", "'else'", "'do'", "'while'", "'for'", "'in'", 
      "'await'", "'of'", "'continue'", "'break'", "'return'", "'with'", 
      "':'", "'switch'", "'case'", "'default'", "'throw'", "'try'", "'catch'", 
      "'finally'", "'debugger'", "'import'", "'from'", "'as'", "'export'", 
      "'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='", 
      "'&='", "'^='", "'|='", "'**='", "'&&='", "'||='", "'\\u003F\\u003F='", 
      "'\\u003F'", "'\\u003F\\u003F'", "'||'", "'&&'", "'|'", "'^'", "'&'", 
      "'=='", "'!='", "'==='", "'!=='", "'<'", "'>'", "'<='", "'>='", "'instanceof'", 
      "'<<'", "'>>'", "'>>>'", "'+'", "'-'", "'/'", "'%'", "'**'", "'delete'", 
      "'void'", "'typeof'", "'~'", "'!'", "'++'", "'--'", "'new'", "'['", 
      "']'", "'.'", "'\\u003F.'", "'super'", "'...'", "'target'", "'meta'", 
      "'this'", "'null'", "'true'", "'false'", "'=>'", "'yield'", "'`'", 
      "'enum'", "'implements'", "'interface'", "'package'", "'private'", 
      "'protected'", "'public'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "DECIMAL_LITERAL", "BINARY_LITERAL", 
      "OCTAL_LITERAL", "HEX_LITERAL", "STRING_LITERAL", "TEMPLATE_STRING_LITERAL", 
      "TEMPLATE_STRING_START", "TEMPLATE_STRING_MIDDLE", "TEMPLATE_STRING_END", 
      "REGEX_LITERAL", "IDENTIFIER", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
      "WS", "LINE_TERMINATOR"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,127,1437,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,1,0,3,0,278,8,0,1,0,1,0,1,1,
  	4,1,283,8,1,11,1,12,1,284,1,2,1,2,3,2,289,8,2,1,3,1,3,1,3,3,3,294,8,3,
  	1,4,1,4,1,4,1,4,3,4,300,8,4,1,5,1,5,1,5,1,5,3,5,306,8,5,1,5,1,5,1,5,1,
  	5,1,5,1,6,1,6,1,6,1,6,1,6,3,6,318,8,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
  	1,7,1,7,3,7,330,8,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,343,
  	8,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,3,9,353,8,9,1,9,1,9,1,9,1,9,1,10,
  	1,10,1,10,1,11,5,11,363,8,11,10,11,12,11,366,9,11,1,12,1,12,1,12,1,12,
  	1,12,1,12,1,12,3,12,375,8,12,1,13,1,13,1,13,3,13,380,8,13,1,13,1,13,1,
  	13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
  	13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,408,8,13,1,13,1,
  	13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,419,8,13,1,13,1,13,1,13,1,
  	13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,431,8,13,1,13,1,13,1,13,1,13,1,
  	13,3,13,438,8,13,1,14,1,14,3,14,442,8,14,1,15,1,15,1,15,1,15,1,16,1,16,
  	1,17,1,17,1,17,5,17,453,8,17,10,17,12,17,456,9,17,1,18,1,18,3,18,460,
  	8,18,1,18,1,18,1,18,3,18,465,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,484,8,19,1,20,
  	1,20,3,20,488,8,20,1,20,1,20,1,21,4,21,493,8,21,11,21,12,21,494,1,22,
  	1,22,1,22,1,22,1,23,1,23,1,23,5,23,504,8,23,10,23,12,23,507,9,23,1,24,
  	1,24,3,24,511,8,24,1,24,1,24,1,24,3,24,516,8,24,1,25,1,25,1,26,1,26,1,
  	26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,530,8,27,1,28,1,28,1,28,1,
  	28,1,28,3,28,537,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,
  	30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,3,31,556,8,31,1,31,1,31,3,31,560,
  	8,31,1,31,1,31,3,31,564,8,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,3,32,
  	573,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,3,34,585,8,
  	34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,3,35,599,
  	8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,611,8,35,
  	1,36,1,36,3,36,615,8,36,1,36,1,36,1,37,1,37,3,37,621,8,37,1,37,1,37,1,
  	38,1,38,3,38,627,8,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,
  	40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,5,41,647,8,41,10,41,12,41,
  	650,9,41,1,41,3,41,653,8,41,1,41,5,41,656,8,41,10,41,12,41,659,9,41,1,
  	41,1,41,1,42,1,42,1,42,1,42,3,42,667,8,42,1,43,1,43,1,43,3,43,672,8,43,
  	1,44,1,44,1,44,1,44,1,45,1,45,1,45,3,45,681,8,45,1,45,3,45,684,8,45,1,
  	45,1,45,1,45,1,45,3,45,690,8,45,1,46,1,46,1,46,1,46,1,46,3,46,697,8,46,
  	1,46,1,46,1,47,1,47,3,47,703,8,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,
  	1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,721,8,50,1,51,1,51,
  	1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,734,8,51,1,52,1,52,
  	1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,3,54,747,8,54,1,54,1,54,
  	3,54,751,8,54,1,55,1,55,1,55,5,55,756,8,55,10,55,12,55,759,9,55,1,56,
  	1,56,1,56,1,56,1,56,3,56,766,8,56,1,57,1,57,1,58,1,58,1,58,1,58,1,58,
  	1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
  	1,58,1,58,1,58,1,58,1,58,1,58,3,58,795,8,58,1,59,1,59,1,59,1,59,1,59,
  	3,59,802,8,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,810,8,59,1,60,1,60,1,
  	60,5,60,815,8,60,10,60,12,60,818,9,60,1,61,1,61,1,61,1,61,1,61,3,61,825,
  	8,61,1,62,1,62,1,62,5,62,830,8,62,10,62,12,62,833,9,62,1,63,1,63,1,63,
  	1,63,1,63,1,63,1,63,1,63,3,63,843,8,63,1,64,1,64,1,65,1,65,1,65,1,65,
  	1,65,1,65,3,65,853,8,65,1,66,1,66,1,66,3,66,858,8,66,1,67,1,67,1,67,5,
  	67,863,8,67,10,67,12,67,866,9,67,1,68,1,68,1,68,5,68,871,8,68,10,68,12,
  	68,874,9,68,1,69,1,69,1,69,5,69,879,8,69,10,69,12,69,882,9,69,1,70,1,
  	70,1,70,5,70,887,8,70,10,70,12,70,890,9,70,1,71,1,71,1,71,5,71,895,8,
  	71,10,71,12,71,898,9,71,1,72,1,72,1,72,5,72,903,8,72,10,72,12,72,906,
  	9,72,1,73,1,73,1,73,5,73,911,8,73,10,73,12,73,914,9,73,1,74,1,74,1,74,
  	5,74,919,8,74,10,74,12,74,922,9,74,1,75,1,75,1,75,5,75,927,8,75,10,75,
  	12,75,930,9,75,1,76,1,76,1,76,5,76,935,8,76,10,76,12,76,938,9,76,1,77,
  	1,77,1,77,3,77,943,8,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
  	1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,962,8,78,1,79,1,79,1,79,
  	1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,975,8,79,1,80,1,80,3,80,
  	979,8,80,1,81,1,81,1,81,3,81,984,8,81,1,82,1,82,1,82,1,82,1,82,1,82,3,
  	82,992,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
  	82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1015,8,82,10,82,
  	12,82,1018,9,82,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,85,1,85,3,85,
  	1030,8,85,1,85,1,85,1,86,1,86,1,86,5,86,1037,8,86,10,86,12,86,1040,9,
  	86,1,87,1,87,1,87,3,87,1045,8,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,
  	88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,1062,8,88,1,88,1,88,1,88,1,
  	88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,
  	88,1,88,5,88,1083,8,88,10,88,12,88,1086,9,88,1,89,1,89,1,89,1,89,1,89,
  	1,89,3,89,1094,8,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
  	1,90,1,90,1,90,3,90,1109,8,90,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,
  	3,92,1119,8,92,1,93,1,93,1,94,1,94,1,95,1,95,1,96,1,96,1,97,1,97,3,97,
  	1131,8,97,1,97,1,97,1,98,1,98,1,98,5,98,1138,8,98,10,98,12,98,1141,9,
  	98,1,99,1,99,1,99,1,99,3,99,1147,8,99,1,100,1,100,3,100,1151,8,100,1,
  	100,1,100,1,100,1,100,1,100,1,100,3,100,1159,8,100,1,101,1,101,1,101,
  	5,101,1164,8,101,10,101,12,101,1167,9,101,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,3,102,1177,8,102,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,3,103,1186,8,103,1,104,1,104,3,104,1190,8,104,1,104,1,104,3,104,
  	1194,8,104,1,104,1,104,1,104,1,104,1,104,1,105,1,105,1,105,3,105,1204,
  	8,105,1,105,1,105,3,105,1208,8,105,1,105,1,105,1,105,1,105,1,105,1,106,
  	1,106,1,106,3,106,1218,8,106,1,106,1,106,3,106,1222,8,106,1,106,1,106,
  	1,106,1,106,1,106,1,107,1,107,1,107,1,107,3,107,1233,8,107,1,107,1,107,
  	3,107,1237,8,107,1,107,1,107,1,107,1,107,1,107,1,108,1,108,3,108,1246,
  	8,108,1,108,3,108,1249,8,108,1,108,1,108,1,108,1,108,1,109,1,109,1,109,
  	1,109,1,110,1,110,1,110,1,110,1,110,1,111,1,111,1,111,3,111,1267,8,111,
  	1,111,3,111,1270,8,111,1,112,1,112,1,112,1,112,1,112,3,112,1277,8,112,
  	1,113,1,113,1,113,1,113,1,113,1,113,3,113,1285,8,113,1,114,1,114,3,114,
  	1289,8,114,1,114,1,114,1,115,4,115,1294,8,115,11,115,12,115,1295,1,116,
  	1,116,1,116,1,116,5,116,1302,8,116,10,116,12,116,1305,9,116,1,116,1,116,
  	3,116,1309,8,116,1,117,1,117,1,117,1,118,1,118,1,119,1,119,1,119,5,119,
  	1319,8,119,10,119,12,119,1322,9,119,1,119,1,119,3,119,1326,8,119,1,119,
  	3,119,1329,8,119,1,120,1,120,1,121,1,121,1,121,1,121,3,121,1337,8,121,
  	1,122,1,122,3,122,1341,8,122,1,122,1,122,3,122,1345,8,122,3,122,1347,
  	8,122,1,123,1,123,3,123,1351,8,123,1,124,1,124,3,124,1355,8,124,1,124,
  	1,124,1,124,1,124,1,124,1,124,3,124,1363,8,124,1,125,1,125,1,125,5,125,
  	1368,8,125,10,125,12,125,1371,9,125,1,126,1,126,1,126,1,126,1,126,1,126,
  	1,126,3,126,1380,8,126,1,127,1,127,3,127,1384,8,127,1,127,1,127,1,128,
  	3,128,1389,8,128,1,128,1,128,1,128,3,128,1394,8,128,1,128,5,128,1397,
  	8,128,10,128,12,128,1400,9,128,1,128,1,128,3,128,1404,8,128,3,128,1406,
  	8,128,1,129,1,129,1,130,3,130,1411,8,130,1,131,1,131,1,131,1,132,1,132,
  	1,132,3,132,1419,8,132,1,133,1,133,1,134,1,134,3,134,1425,8,134,1,135,
  	1,135,1,135,1,135,3,135,1431,8,135,1,136,1,136,1,137,1,137,1,137,0,2,
  	164,176,138,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
  	42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
  	88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
  	126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
  	162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
  	198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,
  	234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,
  	270,272,274,0,12,1,0,14,15,1,0,43,58,1,0,66,69,2,0,23,23,70,74,1,0,75,
  	77,1,0,78,79,2,0,6,6,80,81,1,0,101,102,1,0,113,116,3,0,24,24,104,104,
  	123,123,13,0,1,1,7,10,14,15,17,24,26,29,31,39,42,42,74,74,83,85,90,90,
  	95,95,99,99,104,104,1,0,106,112,1527,0,277,1,0,0,0,2,282,1,0,0,0,4,288,
  	1,0,0,0,6,293,1,0,0,0,8,299,1,0,0,0,10,301,1,0,0,0,12,312,1,0,0,0,14,
  	324,1,0,0,0,16,336,1,0,0,0,18,349,1,0,0,0,20,358,1,0,0,0,22,364,1,0,0,
  	0,24,374,1,0,0,0,26,437,1,0,0,0,28,439,1,0,0,0,30,443,1,0,0,0,32,447,
  	1,0,0,0,34,449,1,0,0,0,36,464,1,0,0,0,38,483,1,0,0,0,40,485,1,0,0,0,42,
  	492,1,0,0,0,44,496,1,0,0,0,46,500,1,0,0,0,48,515,1,0,0,0,50,517,1,0,0,
  	0,52,519,1,0,0,0,54,522,1,0,0,0,56,536,1,0,0,0,58,538,1,0,0,0,60,546,
  	1,0,0,0,62,552,1,0,0,0,64,572,1,0,0,0,66,574,1,0,0,0,68,582,1,0,0,0,70,
  	610,1,0,0,0,72,612,1,0,0,0,74,618,1,0,0,0,76,624,1,0,0,0,78,630,1,0,0,
  	0,80,636,1,0,0,0,82,640,1,0,0,0,84,662,1,0,0,0,86,668,1,0,0,0,88,673,
  	1,0,0,0,90,689,1,0,0,0,92,691,1,0,0,0,94,702,1,0,0,0,96,704,1,0,0,0,98,
  	707,1,0,0,0,100,720,1,0,0,0,102,733,1,0,0,0,104,735,1,0,0,0,106,737,1,
  	0,0,0,108,750,1,0,0,0,110,752,1,0,0,0,112,765,1,0,0,0,114,767,1,0,0,0,
  	116,794,1,0,0,0,118,809,1,0,0,0,120,811,1,0,0,0,122,824,1,0,0,0,124,826,
  	1,0,0,0,126,842,1,0,0,0,128,844,1,0,0,0,130,846,1,0,0,0,132,854,1,0,0,
  	0,134,859,1,0,0,0,136,867,1,0,0,0,138,875,1,0,0,0,140,883,1,0,0,0,142,
  	891,1,0,0,0,144,899,1,0,0,0,146,907,1,0,0,0,148,915,1,0,0,0,150,923,1,
  	0,0,0,152,931,1,0,0,0,154,939,1,0,0,0,156,961,1,0,0,0,158,974,1,0,0,0,
  	160,978,1,0,0,0,162,983,1,0,0,0,164,991,1,0,0,0,166,1019,1,0,0,0,168,
  	1022,1,0,0,0,170,1027,1,0,0,0,172,1033,1,0,0,0,174,1044,1,0,0,0,176,1061,
  	1,0,0,0,178,1093,1,0,0,0,180,1108,1,0,0,0,182,1110,1,0,0,0,184,1118,1,
  	0,0,0,186,1120,1,0,0,0,188,1122,1,0,0,0,190,1124,1,0,0,0,192,1126,1,0,
  	0,0,194,1128,1,0,0,0,196,1134,1,0,0,0,198,1146,1,0,0,0,200,1158,1,0,0,
  	0,202,1160,1,0,0,0,204,1176,1,0,0,0,206,1185,1,0,0,0,208,1187,1,0,0,0,
  	210,1200,1,0,0,0,212,1214,1,0,0,0,214,1228,1,0,0,0,216,1243,1,0,0,0,218,
  	1254,1,0,0,0,220,1258,1,0,0,0,222,1269,1,0,0,0,224,1276,1,0,0,0,226,1284,
  	1,0,0,0,228,1286,1,0,0,0,230,1293,1,0,0,0,232,1308,1,0,0,0,234,1310,1,
  	0,0,0,236,1313,1,0,0,0,238,1328,1,0,0,0,240,1330,1,0,0,0,242,1336,1,0,
  	0,0,244,1346,1,0,0,0,246,1350,1,0,0,0,248,1362,1,0,0,0,250,1364,1,0,0,
  	0,252,1379,1,0,0,0,254,1381,1,0,0,0,256,1388,1,0,0,0,258,1407,1,0,0,0,
  	260,1410,1,0,0,0,262,1412,1,0,0,0,264,1418,1,0,0,0,266,1420,1,0,0,0,268,
  	1424,1,0,0,0,270,1430,1,0,0,0,272,1432,1,0,0,0,274,1434,1,0,0,0,276,278,
  	3,2,1,0,277,276,1,0,0,0,277,278,1,0,0,0,278,279,1,0,0,0,279,280,5,0,0,
  	1,280,1,1,0,0,0,281,283,3,4,2,0,282,281,1,0,0,0,283,284,1,0,0,0,284,282,
  	1,0,0,0,284,285,1,0,0,0,285,3,1,0,0,0,286,289,3,38,19,0,287,289,3,6,3,
  	0,288,286,1,0,0,0,288,287,1,0,0,0,289,5,1,0,0,0,290,294,3,8,4,0,291,294,
  	3,18,9,0,292,294,3,30,15,0,293,290,1,0,0,0,293,291,1,0,0,0,293,292,1,
  	0,0,0,294,7,1,0,0,0,295,300,3,10,5,0,296,300,3,12,6,0,297,300,3,14,7,
  	0,298,300,3,16,8,0,299,295,1,0,0,0,299,296,1,0,0,0,299,297,1,0,0,0,299,
  	298,1,0,0,0,300,9,1,0,0,0,301,302,5,1,0,0,302,303,3,266,133,0,303,305,
  	5,2,0,0,304,306,3,238,119,0,305,304,1,0,0,0,305,306,1,0,0,0,306,307,1,
  	0,0,0,307,308,5,3,0,0,308,309,5,4,0,0,309,310,3,260,130,0,310,311,5,5,
  	0,0,311,11,1,0,0,0,312,313,5,1,0,0,313,314,5,6,0,0,314,315,3,266,133,
  	0,315,317,5,2,0,0,316,318,3,238,119,0,317,316,1,0,0,0,317,318,1,0,0,0,
  	318,319,1,0,0,0,319,320,5,3,0,0,320,321,5,4,0,0,321,322,3,260,130,0,322,
  	323,5,5,0,0,323,13,1,0,0,0,324,325,5,7,0,0,325,326,5,1,0,0,326,327,3,
  	266,133,0,327,329,5,2,0,0,328,330,3,238,119,0,329,328,1,0,0,0,329,330,
  	1,0,0,0,330,331,1,0,0,0,331,332,5,3,0,0,332,333,5,4,0,0,333,334,3,260,
  	130,0,334,335,5,5,0,0,335,15,1,0,0,0,336,337,5,7,0,0,337,338,5,1,0,0,
  	338,339,5,6,0,0,339,340,3,266,133,0,340,342,5,2,0,0,341,343,3,238,119,
  	0,342,341,1,0,0,0,342,343,1,0,0,0,343,344,1,0,0,0,344,345,5,3,0,0,345,
  	346,5,4,0,0,346,347,3,260,130,0,347,348,5,5,0,0,348,17,1,0,0,0,349,350,
  	5,8,0,0,350,352,3,266,133,0,351,353,3,20,10,0,352,351,1,0,0,0,352,353,
  	1,0,0,0,353,354,1,0,0,0,354,355,5,4,0,0,355,356,3,22,11,0,356,357,5,5,
  	0,0,357,19,1,0,0,0,358,359,5,9,0,0,359,360,3,160,80,0,360,21,1,0,0,0,
  	361,363,3,24,12,0,362,361,1,0,0,0,363,366,1,0,0,0,364,362,1,0,0,0,364,
  	365,1,0,0,0,365,23,1,0,0,0,366,364,1,0,0,0,367,375,3,26,13,0,368,369,
  	5,10,0,0,369,375,3,26,13,0,370,375,3,28,14,0,371,372,5,10,0,0,372,375,
  	3,28,14,0,373,375,5,11,0,0,374,367,1,0,0,0,374,368,1,0,0,0,374,370,1,
  	0,0,0,374,371,1,0,0,0,374,373,1,0,0,0,375,25,1,0,0,0,376,377,3,206,103,
  	0,377,379,5,2,0,0,378,380,3,238,119,0,379,378,1,0,0,0,379,380,1,0,0,0,
  	380,381,1,0,0,0,381,382,5,3,0,0,382,383,5,4,0,0,383,384,3,260,130,0,384,
  	385,5,5,0,0,385,438,1,0,0,0,386,387,5,12,0,0,387,388,3,206,103,0,388,
  	389,5,2,0,0,389,390,5,3,0,0,390,391,5,4,0,0,391,392,3,260,130,0,392,393,
  	5,5,0,0,393,438,1,0,0,0,394,395,5,13,0,0,395,396,3,206,103,0,396,397,
  	5,2,0,0,397,398,3,240,120,0,398,399,5,3,0,0,399,400,5,4,0,0,400,401,3,
  	260,130,0,401,402,5,5,0,0,402,438,1,0,0,0,403,404,5,7,0,0,404,405,3,206,
  	103,0,405,407,5,2,0,0,406,408,3,238,119,0,407,406,1,0,0,0,407,408,1,0,
  	0,0,408,409,1,0,0,0,409,410,5,3,0,0,410,411,5,4,0,0,411,412,3,260,130,
  	0,412,413,5,5,0,0,413,438,1,0,0,0,414,415,5,6,0,0,415,416,3,206,103,0,
  	416,418,5,2,0,0,417,419,3,238,119,0,418,417,1,0,0,0,418,419,1,0,0,0,419,
  	420,1,0,0,0,420,421,5,3,0,0,421,422,5,4,0,0,422,423,3,260,130,0,423,424,
  	5,5,0,0,424,438,1,0,0,0,425,426,5,7,0,0,426,427,5,6,0,0,427,428,3,206,
  	103,0,428,430,5,2,0,0,429,431,3,238,119,0,430,429,1,0,0,0,430,431,1,0,
  	0,0,431,432,1,0,0,0,432,433,5,3,0,0,433,434,5,4,0,0,434,435,3,260,130,
  	0,435,436,5,5,0,0,436,438,1,0,0,0,437,376,1,0,0,0,437,386,1,0,0,0,437,
  	394,1,0,0,0,437,403,1,0,0,0,437,414,1,0,0,0,437,425,1,0,0,0,438,27,1,
  	0,0,0,439,441,3,206,103,0,440,442,3,262,131,0,441,440,1,0,0,0,441,442,
  	1,0,0,0,442,29,1,0,0,0,443,444,3,32,16,0,444,445,3,34,17,0,445,446,5,
  	11,0,0,446,31,1,0,0,0,447,448,7,0,0,0,448,33,1,0,0,0,449,454,3,36,18,
  	0,450,451,5,16,0,0,451,453,3,36,18,0,452,450,1,0,0,0,453,456,1,0,0,0,
  	454,452,1,0,0,0,454,455,1,0,0,0,455,35,1,0,0,0,456,454,1,0,0,0,457,459,
  	3,264,132,0,458,460,3,262,131,0,459,458,1,0,0,0,459,460,1,0,0,0,460,465,
  	1,0,0,0,461,462,3,246,123,0,462,463,3,262,131,0,463,465,1,0,0,0,464,457,
  	1,0,0,0,464,461,1,0,0,0,465,37,1,0,0,0,466,484,3,40,20,0,467,484,3,44,
  	22,0,468,484,3,50,25,0,469,484,3,52,26,0,470,484,3,54,27,0,471,484,3,
  	56,28,0,472,484,3,72,36,0,473,484,3,74,37,0,474,484,3,76,38,0,475,484,
  	3,78,39,0,476,484,3,80,40,0,477,484,3,82,41,0,478,484,3,88,44,0,479,484,
  	3,90,45,0,480,484,3,98,49,0,481,484,3,100,50,0,482,484,3,116,58,0,483,
  	466,1,0,0,0,483,467,1,0,0,0,483,468,1,0,0,0,483,469,1,0,0,0,483,470,1,
  	0,0,0,483,471,1,0,0,0,483,472,1,0,0,0,483,473,1,0,0,0,483,474,1,0,0,0,
  	483,475,1,0,0,0,483,476,1,0,0,0,483,477,1,0,0,0,483,478,1,0,0,0,483,479,
  	1,0,0,0,483,480,1,0,0,0,483,481,1,0,0,0,483,482,1,0,0,0,484,39,1,0,0,
  	0,485,487,5,4,0,0,486,488,3,42,21,0,487,486,1,0,0,0,487,488,1,0,0,0,488,
  	489,1,0,0,0,489,490,5,5,0,0,490,41,1,0,0,0,491,493,3,38,19,0,492,491,
  	1,0,0,0,493,494,1,0,0,0,494,492,1,0,0,0,494,495,1,0,0,0,495,43,1,0,0,
  	0,496,497,5,17,0,0,497,498,3,46,23,0,498,499,5,11,0,0,499,45,1,0,0,0,
  	500,505,3,48,24,0,501,502,5,16,0,0,502,504,3,48,24,0,503,501,1,0,0,0,
  	504,507,1,0,0,0,505,503,1,0,0,0,505,506,1,0,0,0,506,47,1,0,0,0,507,505,
  	1,0,0,0,508,510,3,264,132,0,509,511,3,262,131,0,510,509,1,0,0,0,510,511,
  	1,0,0,0,511,516,1,0,0,0,512,513,3,246,123,0,513,514,3,262,131,0,514,516,
  	1,0,0,0,515,508,1,0,0,0,515,512,1,0,0,0,516,49,1,0,0,0,517,518,5,11,0,
  	0,518,51,1,0,0,0,519,520,3,124,62,0,520,521,5,11,0,0,521,53,1,0,0,0,522,
  	523,5,18,0,0,523,524,5,2,0,0,524,525,3,124,62,0,525,526,5,3,0,0,526,529,
  	3,38,19,0,527,528,5,19,0,0,528,530,3,38,19,0,529,527,1,0,0,0,529,530,
  	1,0,0,0,530,55,1,0,0,0,531,537,3,58,29,0,532,537,3,60,30,0,533,537,3,
  	62,31,0,534,537,3,66,33,0,535,537,3,68,34,0,536,531,1,0,0,0,536,532,1,
  	0,0,0,536,533,1,0,0,0,536,534,1,0,0,0,536,535,1,0,0,0,537,57,1,0,0,0,
  	538,539,5,20,0,0,539,540,3,38,19,0,540,541,5,21,0,0,541,542,5,2,0,0,542,
  	543,3,124,62,0,543,544,5,3,0,0,544,545,5,11,0,0,545,59,1,0,0,0,546,547,
  	5,21,0,0,547,548,5,2,0,0,548,549,3,124,62,0,549,550,5,3,0,0,550,551,3,
  	38,19,0,551,61,1,0,0,0,552,553,5,22,0,0,553,555,5,2,0,0,554,556,3,64,
  	32,0,555,554,1,0,0,0,555,556,1,0,0,0,556,557,1,0,0,0,557,559,5,11,0,0,
  	558,560,3,124,62,0,559,558,1,0,0,0,559,560,1,0,0,0,560,561,1,0,0,0,561,
  	563,5,11,0,0,562,564,3,124,62,0,563,562,1,0,0,0,563,564,1,0,0,0,564,565,
  	1,0,0,0,565,566,5,3,0,0,566,567,3,38,19,0,567,63,1,0,0,0,568,573,3,124,
  	62,0,569,570,5,17,0,0,570,573,3,46,23,0,571,573,3,30,15,0,572,568,1,0,
  	0,0,572,569,1,0,0,0,572,571,1,0,0,0,573,65,1,0,0,0,574,575,5,22,0,0,575,
  	576,5,2,0,0,576,577,3,70,35,0,577,578,5,23,0,0,578,579,3,124,62,0,579,
  	580,5,3,0,0,580,581,3,38,19,0,581,67,1,0,0,0,582,584,5,22,0,0,583,585,
  	5,24,0,0,584,583,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,587,5,2,
  	0,0,587,588,3,70,35,0,588,589,5,25,0,0,589,590,3,124,62,0,590,591,5,3,
  	0,0,591,592,3,38,19,0,592,69,1,0,0,0,593,611,3,264,132,0,594,611,3,246,
  	123,0,595,596,5,17,0,0,596,598,3,264,132,0,597,599,3,262,131,0,598,597,
  	1,0,0,0,598,599,1,0,0,0,599,611,1,0,0,0,600,601,5,17,0,0,601,602,3,246,
  	123,0,602,603,3,262,131,0,603,611,1,0,0,0,604,605,3,32,16,0,605,606,3,
  	264,132,0,606,611,1,0,0,0,607,608,3,32,16,0,608,609,3,246,123,0,609,611,
  	1,0,0,0,610,593,1,0,0,0,610,594,1,0,0,0,610,595,1,0,0,0,610,600,1,0,0,
  	0,610,604,1,0,0,0,610,607,1,0,0,0,611,71,1,0,0,0,612,614,5,26,0,0,613,
  	615,3,266,133,0,614,613,1,0,0,0,614,615,1,0,0,0,615,616,1,0,0,0,616,617,
  	5,11,0,0,617,73,1,0,0,0,618,620,5,27,0,0,619,621,3,266,133,0,620,619,
  	1,0,0,0,620,621,1,0,0,0,621,622,1,0,0,0,622,623,5,11,0,0,623,75,1,0,0,
  	0,624,626,5,28,0,0,625,627,3,124,62,0,626,625,1,0,0,0,626,627,1,0,0,0,
  	627,628,1,0,0,0,628,629,5,11,0,0,629,77,1,0,0,0,630,631,5,29,0,0,631,
  	632,5,2,0,0,632,633,3,124,62,0,633,634,5,3,0,0,634,635,3,38,19,0,635,
  	79,1,0,0,0,636,637,3,266,133,0,637,638,5,30,0,0,638,639,3,38,19,0,639,
  	81,1,0,0,0,640,641,5,31,0,0,641,642,5,2,0,0,642,643,3,124,62,0,643,644,
  	5,3,0,0,644,648,5,4,0,0,645,647,3,84,42,0,646,645,1,0,0,0,647,650,1,0,
  	0,0,648,646,1,0,0,0,648,649,1,0,0,0,649,652,1,0,0,0,650,648,1,0,0,0,651,
  	653,3,86,43,0,652,651,1,0,0,0,652,653,1,0,0,0,653,657,1,0,0,0,654,656,
  	3,84,42,0,655,654,1,0,0,0,656,659,1,0,0,0,657,655,1,0,0,0,657,658,1,0,
  	0,0,658,660,1,0,0,0,659,657,1,0,0,0,660,661,5,5,0,0,661,83,1,0,0,0,662,
  	663,5,32,0,0,663,664,3,124,62,0,664,666,5,30,0,0,665,667,3,42,21,0,666,
  	665,1,0,0,0,666,667,1,0,0,0,667,85,1,0,0,0,668,669,5,33,0,0,669,671,5,
  	30,0,0,670,672,3,42,21,0,671,670,1,0,0,0,671,672,1,0,0,0,672,87,1,0,0,
  	0,673,674,5,34,0,0,674,675,3,124,62,0,675,676,5,11,0,0,676,89,1,0,0,0,
  	677,678,5,35,0,0,678,680,3,40,20,0,679,681,3,92,46,0,680,679,1,0,0,0,
  	680,681,1,0,0,0,681,683,1,0,0,0,682,684,3,96,48,0,683,682,1,0,0,0,683,
  	684,1,0,0,0,684,690,1,0,0,0,685,686,5,35,0,0,686,687,3,40,20,0,687,688,
  	3,96,48,0,688,690,1,0,0,0,689,677,1,0,0,0,689,685,1,0,0,0,690,91,1,0,
  	0,0,691,696,5,36,0,0,692,693,5,2,0,0,693,694,3,94,47,0,694,695,5,3,0,
  	0,695,697,1,0,0,0,696,692,1,0,0,0,696,697,1,0,0,0,697,698,1,0,0,0,698,
  	699,3,40,20,0,699,93,1,0,0,0,700,703,3,264,132,0,701,703,3,246,123,0,
  	702,700,1,0,0,0,702,701,1,0,0,0,703,95,1,0,0,0,704,705,5,37,0,0,705,706,
  	3,40,20,0,706,97,1,0,0,0,707,708,5,38,0,0,708,709,5,11,0,0,709,99,1,0,
  	0,0,710,711,5,39,0,0,711,712,3,102,51,0,712,713,5,40,0,0,713,714,3,114,
  	57,0,714,715,5,11,0,0,715,721,1,0,0,0,716,717,5,39,0,0,717,718,3,114,
  	57,0,718,719,5,11,0,0,719,721,1,0,0,0,720,710,1,0,0,0,720,716,1,0,0,0,
  	721,101,1,0,0,0,722,734,3,104,52,0,723,734,3,108,54,0,724,725,3,104,52,
  	0,725,726,5,16,0,0,726,727,3,108,54,0,727,734,1,0,0,0,728,729,3,104,52,
  	0,729,730,5,16,0,0,730,731,3,106,53,0,731,734,1,0,0,0,732,734,3,106,53,
  	0,733,722,1,0,0,0,733,723,1,0,0,0,733,724,1,0,0,0,733,728,1,0,0,0,733,
  	732,1,0,0,0,734,103,1,0,0,0,735,736,3,264,132,0,736,105,1,0,0,0,737,738,
  	5,6,0,0,738,739,5,41,0,0,739,740,3,264,132,0,740,107,1,0,0,0,741,742,
  	5,4,0,0,742,751,5,5,0,0,743,744,5,4,0,0,744,746,3,110,55,0,745,747,5,
  	16,0,0,746,745,1,0,0,0,746,747,1,0,0,0,747,748,1,0,0,0,748,749,5,5,0,
  	0,749,751,1,0,0,0,750,741,1,0,0,0,750,743,1,0,0,0,751,109,1,0,0,0,752,
  	757,3,112,56,0,753,754,5,16,0,0,754,756,3,112,56,0,755,753,1,0,0,0,756,
  	759,1,0,0,0,757,755,1,0,0,0,757,758,1,0,0,0,758,111,1,0,0,0,759,757,1,
  	0,0,0,760,766,3,264,132,0,761,762,3,268,134,0,762,763,5,41,0,0,763,764,
  	3,264,132,0,764,766,1,0,0,0,765,760,1,0,0,0,765,761,1,0,0,0,766,113,1,
  	0,0,0,767,768,5,117,0,0,768,115,1,0,0,0,769,770,5,42,0,0,770,771,3,118,
  	59,0,771,772,5,40,0,0,772,773,3,114,57,0,773,774,5,11,0,0,774,795,1,0,
  	0,0,775,776,5,42,0,0,776,777,3,118,59,0,777,778,5,11,0,0,778,795,1,0,
  	0,0,779,780,5,42,0,0,780,795,3,44,22,0,781,782,5,42,0,0,782,795,3,6,3,
  	0,783,784,5,42,0,0,784,785,5,33,0,0,785,795,3,8,4,0,786,787,5,42,0,0,
  	787,788,5,33,0,0,788,795,3,18,9,0,789,790,5,42,0,0,790,791,5,33,0,0,791,
  	792,3,126,63,0,792,793,5,11,0,0,793,795,1,0,0,0,794,769,1,0,0,0,794,775,
  	1,0,0,0,794,779,1,0,0,0,794,781,1,0,0,0,794,783,1,0,0,0,794,786,1,0,0,
  	0,794,789,1,0,0,0,795,117,1,0,0,0,796,797,5,4,0,0,797,810,5,5,0,0,798,
  	799,5,4,0,0,799,801,3,120,60,0,800,802,5,16,0,0,801,800,1,0,0,0,801,802,
  	1,0,0,0,802,803,1,0,0,0,803,804,5,5,0,0,804,810,1,0,0,0,805,810,5,6,0,
  	0,806,807,5,6,0,0,807,808,5,41,0,0,808,810,3,268,134,0,809,796,1,0,0,
  	0,809,798,1,0,0,0,809,805,1,0,0,0,809,806,1,0,0,0,810,119,1,0,0,0,811,
  	816,3,122,61,0,812,813,5,16,0,0,813,815,3,122,61,0,814,812,1,0,0,0,815,
  	818,1,0,0,0,816,814,1,0,0,0,816,817,1,0,0,0,817,121,1,0,0,0,818,816,1,
  	0,0,0,819,825,3,268,134,0,820,821,3,268,134,0,821,822,5,41,0,0,822,823,
  	3,268,134,0,823,825,1,0,0,0,824,819,1,0,0,0,824,820,1,0,0,0,825,123,1,
  	0,0,0,826,831,3,126,63,0,827,828,5,16,0,0,828,830,3,126,63,0,829,827,
  	1,0,0,0,830,833,1,0,0,0,831,829,1,0,0,0,831,832,1,0,0,0,832,125,1,0,0,
  	0,833,831,1,0,0,0,834,843,3,130,65,0,835,843,3,226,113,0,836,843,3,218,
  	109,0,837,843,3,220,110,0,838,839,3,160,80,0,839,840,3,128,64,0,840,841,
  	3,126,63,0,841,843,1,0,0,0,842,834,1,0,0,0,842,835,1,0,0,0,842,836,1,
  	0,0,0,842,837,1,0,0,0,842,838,1,0,0,0,843,127,1,0,0,0,844,845,7,1,0,0,
  	845,129,1,0,0,0,846,852,3,132,66,0,847,848,5,59,0,0,848,849,3,126,63,
  	0,849,850,5,30,0,0,850,851,3,126,63,0,851,853,1,0,0,0,852,847,1,0,0,0,
  	852,853,1,0,0,0,853,131,1,0,0,0,854,857,3,134,67,0,855,856,5,60,0,0,856,
  	858,3,132,66,0,857,855,1,0,0,0,857,858,1,0,0,0,858,133,1,0,0,0,859,864,
  	3,136,68,0,860,861,5,61,0,0,861,863,3,136,68,0,862,860,1,0,0,0,863,866,
  	1,0,0,0,864,862,1,0,0,0,864,865,1,0,0,0,865,135,1,0,0,0,866,864,1,0,0,
  	0,867,872,3,138,69,0,868,869,5,62,0,0,869,871,3,138,69,0,870,868,1,0,
  	0,0,871,874,1,0,0,0,872,870,1,0,0,0,872,873,1,0,0,0,873,137,1,0,0,0,874,
  	872,1,0,0,0,875,880,3,140,70,0,876,877,5,63,0,0,877,879,3,140,70,0,878,
  	876,1,0,0,0,879,882,1,0,0,0,880,878,1,0,0,0,880,881,1,0,0,0,881,139,1,
  	0,0,0,882,880,1,0,0,0,883,888,3,142,71,0,884,885,5,64,0,0,885,887,3,142,
  	71,0,886,884,1,0,0,0,887,890,1,0,0,0,888,886,1,0,0,0,888,889,1,0,0,0,
  	889,141,1,0,0,0,890,888,1,0,0,0,891,896,3,144,72,0,892,893,5,65,0,0,893,
  	895,3,144,72,0,894,892,1,0,0,0,895,898,1,0,0,0,896,894,1,0,0,0,896,897,
  	1,0,0,0,897,143,1,0,0,0,898,896,1,0,0,0,899,904,3,146,73,0,900,901,7,
  	2,0,0,901,903,3,146,73,0,902,900,1,0,0,0,903,906,1,0,0,0,904,902,1,0,
  	0,0,904,905,1,0,0,0,905,145,1,0,0,0,906,904,1,0,0,0,907,912,3,148,74,
  	0,908,909,7,3,0,0,909,911,3,148,74,0,910,908,1,0,0,0,911,914,1,0,0,0,
  	912,910,1,0,0,0,912,913,1,0,0,0,913,147,1,0,0,0,914,912,1,0,0,0,915,920,
  	3,150,75,0,916,917,7,4,0,0,917,919,3,150,75,0,918,916,1,0,0,0,919,922,
  	1,0,0,0,920,918,1,0,0,0,920,921,1,0,0,0,921,149,1,0,0,0,922,920,1,0,0,
  	0,923,928,3,152,76,0,924,925,7,5,0,0,925,927,3,152,76,0,926,924,1,0,0,
  	0,927,930,1,0,0,0,928,926,1,0,0,0,928,929,1,0,0,0,929,151,1,0,0,0,930,
  	928,1,0,0,0,931,936,3,154,77,0,932,933,7,6,0,0,933,935,3,154,77,0,934,
  	932,1,0,0,0,935,938,1,0,0,0,936,934,1,0,0,0,936,937,1,0,0,0,937,153,1,
  	0,0,0,938,936,1,0,0,0,939,942,3,156,78,0,940,941,5,82,0,0,941,943,3,154,
  	77,0,942,940,1,0,0,0,942,943,1,0,0,0,943,155,1,0,0,0,944,962,3,158,79,
  	0,945,946,5,83,0,0,946,962,3,156,78,0,947,948,5,84,0,0,948,962,3,156,
  	78,0,949,950,5,85,0,0,950,962,3,156,78,0,951,952,5,78,0,0,952,962,3,156,
  	78,0,953,954,5,79,0,0,954,962,3,156,78,0,955,956,5,86,0,0,956,962,3,156,
  	78,0,957,958,5,87,0,0,958,962,3,156,78,0,959,960,5,24,0,0,960,962,3,156,
  	78,0,961,944,1,0,0,0,961,945,1,0,0,0,961,947,1,0,0,0,961,949,1,0,0,0,
  	961,951,1,0,0,0,961,953,1,0,0,0,961,955,1,0,0,0,961,957,1,0,0,0,961,959,
  	1,0,0,0,962,157,1,0,0,0,963,975,3,160,80,0,964,965,3,160,80,0,965,966,
  	5,88,0,0,966,975,1,0,0,0,967,968,3,160,80,0,968,969,5,89,0,0,969,975,
  	1,0,0,0,970,971,5,88,0,0,971,975,3,156,78,0,972,973,5,89,0,0,973,975,
  	3,156,78,0,974,963,1,0,0,0,974,964,1,0,0,0,974,967,1,0,0,0,974,970,1,
  	0,0,0,974,972,1,0,0,0,975,159,1,0,0,0,976,979,3,162,81,0,977,979,3,164,
  	82,0,978,976,1,0,0,0,978,977,1,0,0,0,979,161,1,0,0,0,980,984,3,176,88,
  	0,981,982,5,90,0,0,982,984,3,162,81,0,983,980,1,0,0,0,983,981,1,0,0,0,
  	984,163,1,0,0,0,985,986,6,82,-1,0,986,987,3,176,88,0,987,988,3,170,85,
  	0,988,992,1,0,0,0,989,992,3,166,83,0,990,992,3,168,84,0,991,985,1,0,0,
  	0,991,989,1,0,0,0,991,990,1,0,0,0,992,1016,1,0,0,0,993,994,10,6,0,0,994,
  	1015,3,170,85,0,995,996,10,5,0,0,996,997,5,91,0,0,997,998,3,124,62,0,
  	998,999,5,92,0,0,999,1015,1,0,0,0,1000,1001,10,4,0,0,1001,1002,5,93,0,
  	0,1002,1015,3,268,134,0,1003,1004,10,3,0,0,1004,1015,3,228,114,0,1005,
  	1006,10,2,0,0,1006,1007,5,94,0,0,1007,1015,3,268,134,0,1008,1009,10,1,
  	0,0,1009,1010,5,94,0,0,1010,1011,5,91,0,0,1011,1012,3,124,62,0,1012,1013,
  	5,92,0,0,1013,1015,1,0,0,0,1014,993,1,0,0,0,1014,995,1,0,0,0,1014,1000,
  	1,0,0,0,1014,1003,1,0,0,0,1014,1005,1,0,0,0,1014,1008,1,0,0,0,1015,1018,
  	1,0,0,0,1016,1014,1,0,0,0,1016,1017,1,0,0,0,1017,165,1,0,0,0,1018,1016,
  	1,0,0,0,1019,1020,5,95,0,0,1020,1021,3,170,85,0,1021,167,1,0,0,0,1022,
  	1023,5,39,0,0,1023,1024,5,2,0,0,1024,1025,3,126,63,0,1025,1026,5,3,0,
  	0,1026,169,1,0,0,0,1027,1029,5,2,0,0,1028,1030,3,172,86,0,1029,1028,1,
  	0,0,0,1029,1030,1,0,0,0,1030,1031,1,0,0,0,1031,1032,5,3,0,0,1032,171,
  	1,0,0,0,1033,1038,3,174,87,0,1034,1035,5,16,0,0,1035,1037,3,174,87,0,
  	1036,1034,1,0,0,0,1037,1040,1,0,0,0,1038,1036,1,0,0,0,1038,1039,1,0,0,
  	0,1039,173,1,0,0,0,1040,1038,1,0,0,0,1041,1045,3,126,63,0,1042,1043,5,
  	96,0,0,1043,1045,3,126,63,0,1044,1041,1,0,0,0,1044,1042,1,0,0,0,1045,
  	175,1,0,0,0,1046,1047,6,88,-1,0,1047,1062,3,180,90,0,1048,1049,5,95,0,
  	0,1049,1050,5,91,0,0,1050,1051,3,124,62,0,1051,1052,5,92,0,0,1052,1062,
  	1,0,0,0,1053,1054,5,95,0,0,1054,1055,5,93,0,0,1055,1062,3,268,134,0,1056,
  	1062,3,178,89,0,1057,1058,5,90,0,0,1058,1059,3,176,88,0,1059,1060,3,170,
  	85,0,1060,1062,1,0,0,0,1061,1046,1,0,0,0,1061,1048,1,0,0,0,1061,1053,
  	1,0,0,0,1061,1056,1,0,0,0,1061,1057,1,0,0,0,1062,1084,1,0,0,0,1063,1064,
  	10,9,0,0,1064,1065,5,91,0,0,1065,1066,3,124,62,0,1066,1067,5,92,0,0,1067,
  	1083,1,0,0,0,1068,1069,10,8,0,0,1069,1070,5,93,0,0,1070,1083,3,268,134,
  	0,1071,1072,10,7,0,0,1072,1083,3,228,114,0,1073,1074,10,2,0,0,1074,1075,
  	5,94,0,0,1075,1083,3,268,134,0,1076,1077,10,1,0,0,1077,1078,5,94,0,0,
  	1078,1079,5,91,0,0,1079,1080,3,124,62,0,1080,1081,5,92,0,0,1081,1083,
  	1,0,0,0,1082,1063,1,0,0,0,1082,1068,1,0,0,0,1082,1071,1,0,0,0,1082,1073,
  	1,0,0,0,1082,1076,1,0,0,0,1083,1086,1,0,0,0,1084,1082,1,0,0,0,1084,1085,
  	1,0,0,0,1085,177,1,0,0,0,1086,1084,1,0,0,0,1087,1088,5,90,0,0,1088,1089,
  	5,93,0,0,1089,1094,5,97,0,0,1090,1091,5,39,0,0,1091,1092,5,93,0,0,1092,
  	1094,5,98,0,0,1093,1087,1,0,0,0,1093,1090,1,0,0,0,1094,179,1,0,0,0,1095,
  	1109,5,99,0,0,1096,1109,3,266,133,0,1097,1109,3,184,92,0,1098,1109,3,
  	194,97,0,1099,1109,3,200,100,0,1100,1109,3,208,104,0,1101,1109,3,216,
  	108,0,1102,1109,3,210,105,0,1103,1109,3,212,106,0,1104,1109,3,214,107,
  	0,1105,1109,3,236,118,0,1106,1109,3,228,114,0,1107,1109,3,182,91,0,1108,
  	1095,1,0,0,0,1108,1096,1,0,0,0,1108,1097,1,0,0,0,1108,1098,1,0,0,0,1108,
  	1099,1,0,0,0,1108,1100,1,0,0,0,1108,1101,1,0,0,0,1108,1102,1,0,0,0,1108,
  	1103,1,0,0,0,1108,1104,1,0,0,0,1108,1105,1,0,0,0,1108,1106,1,0,0,0,1108,
  	1107,1,0,0,0,1109,181,1,0,0,0,1110,1111,5,2,0,0,1111,1112,3,124,62,0,
  	1112,1113,5,3,0,0,1113,183,1,0,0,0,1114,1119,3,186,93,0,1115,1119,3,188,
  	94,0,1116,1119,3,190,95,0,1117,1119,3,192,96,0,1118,1114,1,0,0,0,1118,
  	1115,1,0,0,0,1118,1116,1,0,0,0,1118,1117,1,0,0,0,1119,185,1,0,0,0,1120,
  	1121,5,100,0,0,1121,187,1,0,0,0,1122,1123,7,7,0,0,1123,189,1,0,0,0,1124,
  	1125,7,8,0,0,1125,191,1,0,0,0,1126,1127,5,117,0,0,1127,193,1,0,0,0,1128,
  	1130,5,91,0,0,1129,1131,3,196,98,0,1130,1129,1,0,0,0,1130,1131,1,0,0,
  	0,1131,1132,1,0,0,0,1132,1133,5,92,0,0,1133,195,1,0,0,0,1134,1139,3,198,
  	99,0,1135,1136,5,16,0,0,1136,1138,3,198,99,0,1137,1135,1,0,0,0,1138,1141,
  	1,0,0,0,1139,1137,1,0,0,0,1139,1140,1,0,0,0,1140,197,1,0,0,0,1141,1139,
  	1,0,0,0,1142,1147,3,126,63,0,1143,1144,5,96,0,0,1144,1147,3,126,63,0,
  	1145,1147,1,0,0,0,1146,1142,1,0,0,0,1146,1143,1,0,0,0,1146,1145,1,0,0,
  	0,1147,199,1,0,0,0,1148,1150,5,4,0,0,1149,1151,3,202,101,0,1150,1149,
  	1,0,0,0,1150,1151,1,0,0,0,1151,1152,1,0,0,0,1152,1159,5,5,0,0,1153,1154,
  	5,4,0,0,1154,1155,3,202,101,0,1155,1156,5,16,0,0,1156,1157,5,5,0,0,1157,
  	1159,1,0,0,0,1158,1148,1,0,0,0,1158,1153,1,0,0,0,1159,201,1,0,0,0,1160,
  	1165,3,204,102,0,1161,1162,5,16,0,0,1162,1164,3,204,102,0,1163,1161,1,
  	0,0,0,1164,1167,1,0,0,0,1165,1163,1,0,0,0,1165,1166,1,0,0,0,1166,203,
  	1,0,0,0,1167,1165,1,0,0,0,1168,1177,3,268,134,0,1169,1170,3,206,103,0,
  	1170,1171,5,30,0,0,1171,1172,3,126,63,0,1172,1177,1,0,0,0,1173,1177,3,
  	26,13,0,1174,1175,5,96,0,0,1175,1177,3,126,63,0,1176,1168,1,0,0,0,1176,
  	1169,1,0,0,0,1176,1173,1,0,0,0,1176,1174,1,0,0,0,1177,205,1,0,0,0,1178,
  	1186,3,268,134,0,1179,1186,3,192,96,0,1180,1186,3,190,95,0,1181,1182,
  	5,91,0,0,1182,1183,3,126,63,0,1183,1184,5,92,0,0,1184,1186,1,0,0,0,1185,
  	1178,1,0,0,0,1185,1179,1,0,0,0,1185,1180,1,0,0,0,1185,1181,1,0,0,0,1186,
  	207,1,0,0,0,1187,1189,5,1,0,0,1188,1190,3,266,133,0,1189,1188,1,0,0,0,
  	1189,1190,1,0,0,0,1190,1191,1,0,0,0,1191,1193,5,2,0,0,1192,1194,3,238,
  	119,0,1193,1192,1,0,0,0,1193,1194,1,0,0,0,1194,1195,1,0,0,0,1195,1196,
  	5,3,0,0,1196,1197,5,4,0,0,1197,1198,3,260,130,0,1198,1199,5,5,0,0,1199,
  	209,1,0,0,0,1200,1201,5,1,0,0,1201,1203,5,6,0,0,1202,1204,3,266,133,0,
  	1203,1202,1,0,0,0,1203,1204,1,0,0,0,1204,1205,1,0,0,0,1205,1207,5,2,0,
  	0,1206,1208,3,238,119,0,1207,1206,1,0,0,0,1207,1208,1,0,0,0,1208,1209,
  	1,0,0,0,1209,1210,5,3,0,0,1210,1211,5,4,0,0,1211,1212,3,260,130,0,1212,
  	1213,5,5,0,0,1213,211,1,0,0,0,1214,1215,5,7,0,0,1215,1217,5,1,0,0,1216,
  	1218,3,266,133,0,1217,1216,1,0,0,0,1217,1218,1,0,0,0,1218,1219,1,0,0,
  	0,1219,1221,5,2,0,0,1220,1222,3,238,119,0,1221,1220,1,0,0,0,1221,1222,
  	1,0,0,0,1222,1223,1,0,0,0,1223,1224,5,3,0,0,1224,1225,5,4,0,0,1225,1226,
  	3,260,130,0,1226,1227,5,5,0,0,1227,213,1,0,0,0,1228,1229,5,7,0,0,1229,
  	1230,5,1,0,0,1230,1232,5,6,0,0,1231,1233,3,266,133,0,1232,1231,1,0,0,
  	0,1232,1233,1,0,0,0,1233,1234,1,0,0,0,1234,1236,5,2,0,0,1235,1237,3,238,
  	119,0,1236,1235,1,0,0,0,1236,1237,1,0,0,0,1237,1238,1,0,0,0,1238,1239,
  	5,3,0,0,1239,1240,5,4,0,0,1240,1241,3,260,130,0,1241,1242,5,5,0,0,1242,
  	215,1,0,0,0,1243,1245,5,8,0,0,1244,1246,3,266,133,0,1245,1244,1,0,0,0,
  	1245,1246,1,0,0,0,1246,1248,1,0,0,0,1247,1249,3,20,10,0,1248,1247,1,0,
  	0,0,1248,1249,1,0,0,0,1249,1250,1,0,0,0,1250,1251,5,4,0,0,1251,1252,3,
  	22,11,0,1252,1253,5,5,0,0,1253,217,1,0,0,0,1254,1255,3,222,111,0,1255,
  	1256,5,103,0,0,1256,1257,3,224,112,0,1257,219,1,0,0,0,1258,1259,5,7,0,
  	0,1259,1260,3,222,111,0,1260,1261,5,103,0,0,1261,1262,3,224,112,0,1262,
  	221,1,0,0,0,1263,1270,3,264,132,0,1264,1266,5,2,0,0,1265,1267,3,238,119,
  	0,1266,1265,1,0,0,0,1266,1267,1,0,0,0,1267,1268,1,0,0,0,1268,1270,5,3,
  	0,0,1269,1263,1,0,0,0,1269,1264,1,0,0,0,1270,223,1,0,0,0,1271,1277,3,
  	126,63,0,1272,1273,5,4,0,0,1273,1274,3,260,130,0,1274,1275,5,5,0,0,1275,
  	1277,1,0,0,0,1276,1271,1,0,0,0,1276,1272,1,0,0,0,1277,225,1,0,0,0,1278,
  	1285,5,104,0,0,1279,1280,5,104,0,0,1280,1285,3,126,63,0,1281,1282,5,104,
  	0,0,1282,1283,5,6,0,0,1283,1285,3,126,63,0,1284,1278,1,0,0,0,1284,1279,
  	1,0,0,0,1284,1281,1,0,0,0,1285,227,1,0,0,0,1286,1288,5,105,0,0,1287,1289,
  	3,230,115,0,1288,1287,1,0,0,0,1288,1289,1,0,0,0,1289,1290,1,0,0,0,1290,
  	1291,5,105,0,0,1291,229,1,0,0,0,1292,1294,3,232,116,0,1293,1292,1,0,0,
  	0,1294,1295,1,0,0,0,1295,1293,1,0,0,0,1295,1296,1,0,0,0,1296,231,1,0,
  	0,0,1297,1309,5,118,0,0,1298,1299,5,119,0,0,1299,1303,3,124,62,0,1300,
  	1302,3,234,117,0,1301,1300,1,0,0,0,1302,1305,1,0,0,0,1303,1301,1,0,0,
  	0,1303,1304,1,0,0,0,1304,1306,1,0,0,0,1305,1303,1,0,0,0,1306,1307,5,121,
  	0,0,1307,1309,1,0,0,0,1308,1297,1,0,0,0,1308,1298,1,0,0,0,1309,233,1,
  	0,0,0,1310,1311,5,120,0,0,1311,1312,3,124,62,0,1312,235,1,0,0,0,1313,
  	1314,5,122,0,0,1314,237,1,0,0,0,1315,1320,3,240,120,0,1316,1317,5,16,
  	0,0,1317,1319,3,240,120,0,1318,1316,1,0,0,0,1319,1322,1,0,0,0,1320,1318,
  	1,0,0,0,1320,1321,1,0,0,0,1321,1325,1,0,0,0,1322,1320,1,0,0,0,1323,1324,
  	5,16,0,0,1324,1326,3,242,121,0,1325,1323,1,0,0,0,1325,1326,1,0,0,0,1326,
  	1329,1,0,0,0,1327,1329,3,242,121,0,1328,1315,1,0,0,0,1328,1327,1,0,0,
  	0,1329,239,1,0,0,0,1330,1331,3,244,122,0,1331,241,1,0,0,0,1332,1333,5,
  	96,0,0,1333,1337,3,264,132,0,1334,1335,5,96,0,0,1335,1337,3,246,123,0,
  	1336,1332,1,0,0,0,1336,1334,1,0,0,0,1337,243,1,0,0,0,1338,1340,3,264,
  	132,0,1339,1341,3,262,131,0,1340,1339,1,0,0,0,1340,1341,1,0,0,0,1341,
  	1347,1,0,0,0,1342,1344,3,246,123,0,1343,1345,3,262,131,0,1344,1343,1,
  	0,0,0,1344,1345,1,0,0,0,1345,1347,1,0,0,0,1346,1338,1,0,0,0,1346,1342,
  	1,0,0,0,1347,245,1,0,0,0,1348,1351,3,248,124,0,1349,1351,3,254,127,0,
  	1350,1348,1,0,0,0,1350,1349,1,0,0,0,1351,247,1,0,0,0,1352,1354,5,4,0,
  	0,1353,1355,3,250,125,0,1354,1353,1,0,0,0,1354,1355,1,0,0,0,1355,1356,
  	1,0,0,0,1356,1363,5,5,0,0,1357,1358,5,4,0,0,1358,1359,3,250,125,0,1359,
  	1360,5,16,0,0,1360,1361,5,5,0,0,1361,1363,1,0,0,0,1362,1352,1,0,0,0,1362,
  	1357,1,0,0,0,1363,249,1,0,0,0,1364,1369,3,252,126,0,1365,1366,5,16,0,
  	0,1366,1368,3,252,126,0,1367,1365,1,0,0,0,1368,1371,1,0,0,0,1369,1367,
  	1,0,0,0,1369,1370,1,0,0,0,1370,251,1,0,0,0,1371,1369,1,0,0,0,1372,1380,
  	3,264,132,0,1373,1374,3,206,103,0,1374,1375,5,30,0,0,1375,1376,3,244,
  	122,0,1376,1380,1,0,0,0,1377,1378,5,96,0,0,1378,1380,3,264,132,0,1379,
  	1372,1,0,0,0,1379,1373,1,0,0,0,1379,1377,1,0,0,0,1380,253,1,0,0,0,1381,
  	1383,5,91,0,0,1382,1384,3,256,128,0,1383,1382,1,0,0,0,1383,1384,1,0,0,
  	0,1384,1385,1,0,0,0,1385,1386,5,92,0,0,1386,255,1,0,0,0,1387,1389,3,258,
  	129,0,1388,1387,1,0,0,0,1388,1389,1,0,0,0,1389,1390,1,0,0,0,1390,1398,
  	3,244,122,0,1391,1393,5,16,0,0,1392,1394,3,258,129,0,1393,1392,1,0,0,
  	0,1393,1394,1,0,0,0,1394,1395,1,0,0,0,1395,1397,3,244,122,0,1396,1391,
  	1,0,0,0,1397,1400,1,0,0,0,1398,1396,1,0,0,0,1398,1399,1,0,0,0,1399,1405,
  	1,0,0,0,1400,1398,1,0,0,0,1401,1403,5,16,0,0,1402,1404,3,258,129,0,1403,
  	1402,1,0,0,0,1403,1404,1,0,0,0,1404,1406,1,0,0,0,1405,1401,1,0,0,0,1405,
  	1406,1,0,0,0,1406,257,1,0,0,0,1407,1408,5,16,0,0,1408,259,1,0,0,0,1409,
  	1411,3,2,1,0,1410,1409,1,0,0,0,1410,1411,1,0,0,0,1411,261,1,0,0,0,1412,
  	1413,5,43,0,0,1413,1414,3,126,63,0,1414,263,1,0,0,0,1415,1419,3,266,133,
  	0,1416,1419,5,104,0,0,1417,1419,5,24,0,0,1418,1415,1,0,0,0,1418,1416,
  	1,0,0,0,1418,1417,1,0,0,0,1419,265,1,0,0,0,1420,1421,7,9,0,0,1421,267,
  	1,0,0,0,1422,1425,5,123,0,0,1423,1425,3,270,135,0,1424,1422,1,0,0,0,1424,
  	1423,1,0,0,0,1425,269,1,0,0,0,1426,1431,3,272,136,0,1427,1431,3,274,137,
  	0,1428,1431,3,186,93,0,1429,1431,3,188,94,0,1430,1426,1,0,0,0,1430,1427,
  	1,0,0,0,1430,1428,1,0,0,0,1430,1429,1,0,0,0,1431,271,1,0,0,0,1432,1433,
  	7,10,0,0,1433,273,1,0,0,0,1434,1435,7,11,0,0,1435,275,1,0,0,0,139,277,
  	284,288,293,299,305,317,329,342,352,364,374,379,407,418,430,437,441,454,
  	459,464,483,487,494,505,510,515,529,536,555,559,563,572,584,598,610,614,
  	620,626,648,652,657,666,671,680,683,689,696,702,720,733,746,750,757,765,
  	794,801,809,816,824,831,842,852,857,864,872,880,888,896,904,912,920,928,
  	936,942,961,974,978,983,991,1014,1016,1029,1038,1044,1061,1082,1084,1093,
  	1108,1118,1130,1139,1146,1150,1158,1165,1176,1185,1189,1193,1203,1207,
  	1217,1221,1232,1236,1245,1248,1266,1269,1276,1284,1288,1295,1303,1308,
  	1320,1325,1328,1336,1340,1344,1346,1350,1354,1362,1369,1379,1383,1388,
  	1393,1398,1403,1405,1410,1418,1424,1430
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  javascriptParserStaticData = staticData.release();
}

}

JavaScriptParser::JavaScriptParser(TokenStream *input) : JavaScriptParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

JavaScriptParser::JavaScriptParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  JavaScriptParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *javascriptParserStaticData->atn, javascriptParserStaticData->decisionToDFA, javascriptParserStaticData->sharedContextCache, options);
}

JavaScriptParser::~JavaScriptParser() {
  delete _interpreter;
}

const atn::ATN& JavaScriptParser::getATN() const {
  return *javascriptParserStaticData->atn;
}

std::string JavaScriptParser::getGrammarFileName() const {
  return "JavaScript.g4";
}

const std::vector<std::string>& JavaScriptParser::getRuleNames() const {
  return javascriptParserStaticData->ruleNames;
}

const dfa::Vocabulary& JavaScriptParser::getVocabulary() const {
  return javascriptParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView JavaScriptParser::getSerializedATN() const {
  return javascriptParserStaticData->serializedATN;
}


//----------------- ProgramContext ------------------------------------------------------------------

JavaScriptParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser::ProgramContext::EOF() {
  return getToken(JavaScriptParser::EOF, 0);
}

JavaScriptParser::SourceElementsContext* JavaScriptParser::ProgramContext::sourceElements() {
  return getRuleContext<JavaScriptParser::SourceElementsContext>(0);
}


size_t JavaScriptParser::ProgramContext::getRuleIndex() const {
  return JavaScriptParser::RuleProgram;
}

void JavaScriptParser::ProgramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram(this);
}

void JavaScriptParser::ProgramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram(this);
}

JavaScriptParser::ProgramContext* JavaScriptParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 0, JavaScriptParser::RuleProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(277);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5277398518166) != 0) || ((((_la - 78) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 78)) & 53841942953955) != 0)) {
      setState(276);
      sourceElements();
    }
    setState(279);
    match(JavaScriptParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SourceElementsContext ------------------------------------------------------------------

JavaScriptParser::SourceElementsContext::SourceElementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::SourceElementContext *> JavaScriptParser::SourceElementsContext::sourceElement() {
  return getRuleContexts<JavaScriptParser::SourceElementContext>();
}

JavaScriptParser::SourceElementContext* JavaScriptParser::SourceElementsContext::sourceElement(size_t i) {
  return getRuleContext<JavaScriptParser::SourceElementContext>(i);
}


size_t JavaScriptParser::SourceElementsContext::getRuleIndex() const {
  return JavaScriptParser::RuleSourceElements;
}

void JavaScriptParser::SourceElementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSourceElements(this);
}

void JavaScriptParser::SourceElementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSourceElements(this);
}

JavaScriptParser::SourceElementsContext* JavaScriptParser::sourceElements() {
  SourceElementsContext *_localctx = _tracker.createInstance<SourceElementsContext>(_ctx, getState());
  enterRule(_localctx, 2, JavaScriptParser::RuleSourceElements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(282); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(281);
      sourceElement();
      setState(284); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5277398518166) != 0) || ((((_la - 78) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 78)) & 53841942953955) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SourceElementContext ------------------------------------------------------------------

JavaScriptParser::SourceElementContext::SourceElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::StatementContext* JavaScriptParser::SourceElementContext::statement() {
  return getRuleContext<JavaScriptParser::StatementContext>(0);
}

JavaScriptParser::DeclarationContext* JavaScriptParser::SourceElementContext::declaration() {
  return getRuleContext<JavaScriptParser::DeclarationContext>(0);
}


size_t JavaScriptParser::SourceElementContext::getRuleIndex() const {
  return JavaScriptParser::RuleSourceElement;
}

void JavaScriptParser::SourceElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSourceElement(this);
}

void JavaScriptParser::SourceElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSourceElement(this);
}

JavaScriptParser::SourceElementContext* JavaScriptParser::sourceElement() {
  SourceElementContext *_localctx = _tracker.createInstance<SourceElementContext>(_ctx, getState());
  enterRule(_localctx, 4, JavaScriptParser::RuleSourceElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(288);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(286);
      statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(287);
      declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationContext ------------------------------------------------------------------

JavaScriptParser::DeclarationContext::DeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::HoistableDeclarationContext* JavaScriptParser::DeclarationContext::hoistableDeclaration() {
  return getRuleContext<JavaScriptParser::HoistableDeclarationContext>(0);
}

JavaScriptParser::ClassDeclarationContext* JavaScriptParser::DeclarationContext::classDeclaration() {
  return getRuleContext<JavaScriptParser::ClassDeclarationContext>(0);
}

JavaScriptParser::LexicalDeclarationContext* JavaScriptParser::DeclarationContext::lexicalDeclaration() {
  return getRuleContext<JavaScriptParser::LexicalDeclarationContext>(0);
}


size_t JavaScriptParser::DeclarationContext::getRuleIndex() const {
  return JavaScriptParser::RuleDeclaration;
}

void JavaScriptParser::DeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclaration(this);
}

void JavaScriptParser::DeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclaration(this);
}

JavaScriptParser::DeclarationContext* JavaScriptParser::declaration() {
  DeclarationContext *_localctx = _tracker.createInstance<DeclarationContext>(_ctx, getState());
  enterRule(_localctx, 6, JavaScriptParser::RuleDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(293);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser::T__0:
      case JavaScriptParser::T__6: {
        enterOuterAlt(_localctx, 1);
        setState(290);
        hoistableDeclaration();
        break;
      }

      case JavaScriptParser::T__7: {
        enterOuterAlt(_localctx, 2);
        setState(291);
        classDeclaration();
        break;
      }

      case JavaScriptParser::T__13:
      case JavaScriptParser::T__14: {
        enterOuterAlt(_localctx, 3);
        setState(292);
        lexicalDeclaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HoistableDeclarationContext ------------------------------------------------------------------

JavaScriptParser::HoistableDeclarationContext::HoistableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::FunctionDeclarationContext* JavaScriptParser::HoistableDeclarationContext::functionDeclaration() {
  return getRuleContext<JavaScriptParser::FunctionDeclarationContext>(0);
}

JavaScriptParser::GeneratorDeclarationContext* JavaScriptParser::HoistableDeclarationContext::generatorDeclaration() {
  return getRuleContext<JavaScriptParser::GeneratorDeclarationContext>(0);
}

JavaScriptParser::AsyncFunctionDeclarationContext* JavaScriptParser::HoistableDeclarationContext::asyncFunctionDeclaration() {
  return getRuleContext<JavaScriptParser::AsyncFunctionDeclarationContext>(0);
}

JavaScriptParser::AsyncGeneratorDeclarationContext* JavaScriptParser::HoistableDeclarationContext::asyncGeneratorDeclaration() {
  return getRuleContext<JavaScriptParser::AsyncGeneratorDeclarationContext>(0);
}


size_t JavaScriptParser::HoistableDeclarationContext::getRuleIndex() const {
  return JavaScriptParser::RuleHoistableDeclaration;
}

void JavaScriptParser::HoistableDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHoistableDeclaration(this);
}

void JavaScriptParser::HoistableDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHoistableDeclaration(this);
}

JavaScriptParser::HoistableDeclarationContext* JavaScriptParser::hoistableDeclaration() {
  HoistableDeclarationContext *_localctx = _tracker.createInstance<HoistableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 8, JavaScriptParser::RuleHoistableDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(299);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(295);
      functionDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(296);
      generatorDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(297);
      asyncFunctionDeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(298);
      asyncGeneratorDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionDeclarationContext ------------------------------------------------------------------

JavaScriptParser::FunctionDeclarationContext::FunctionDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::IdentifierContext* JavaScriptParser::FunctionDeclarationContext::identifier() {
  return getRuleContext<JavaScriptParser::IdentifierContext>(0);
}

JavaScriptParser::FunctionBodyContext* JavaScriptParser::FunctionDeclarationContext::functionBody() {
  return getRuleContext<JavaScriptParser::FunctionBodyContext>(0);
}

JavaScriptParser::FormalParameterListContext* JavaScriptParser::FunctionDeclarationContext::formalParameterList() {
  return getRuleContext<JavaScriptParser::FormalParameterListContext>(0);
}


size_t JavaScriptParser::FunctionDeclarationContext::getRuleIndex() const {
  return JavaScriptParser::RuleFunctionDeclaration;
}

void JavaScriptParser::FunctionDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionDeclaration(this);
}

void JavaScriptParser::FunctionDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionDeclaration(this);
}

JavaScriptParser::FunctionDeclarationContext* JavaScriptParser::functionDeclaration() {
  FunctionDeclarationContext *_localctx = _tracker.createInstance<FunctionDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 10, JavaScriptParser::RuleFunctionDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(301);
    match(JavaScriptParser::T__0);
    setState(302);
    identifier();
    setState(303);
    match(JavaScriptParser::T__1);
    setState(305);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__3

    || _la == JavaScriptParser::T__23 || ((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 4294975521) != 0)) {
      setState(304);
      formalParameterList();
    }
    setState(307);
    match(JavaScriptParser::T__2);
    setState(308);
    match(JavaScriptParser::T__3);
    setState(309);
    functionBody();
    setState(310);
    match(JavaScriptParser::T__4);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GeneratorDeclarationContext ------------------------------------------------------------------

JavaScriptParser::GeneratorDeclarationContext::GeneratorDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::IdentifierContext* JavaScriptParser::GeneratorDeclarationContext::identifier() {
  return getRuleContext<JavaScriptParser::IdentifierContext>(0);
}

JavaScriptParser::FunctionBodyContext* JavaScriptParser::GeneratorDeclarationContext::functionBody() {
  return getRuleContext<JavaScriptParser::FunctionBodyContext>(0);
}

JavaScriptParser::FormalParameterListContext* JavaScriptParser::GeneratorDeclarationContext::formalParameterList() {
  return getRuleContext<JavaScriptParser::FormalParameterListContext>(0);
}


size_t JavaScriptParser::GeneratorDeclarationContext::getRuleIndex() const {
  return JavaScriptParser::RuleGeneratorDeclaration;
}

void JavaScriptParser::GeneratorDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneratorDeclaration(this);
}

void JavaScriptParser::GeneratorDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneratorDeclaration(this);
}

JavaScriptParser::GeneratorDeclarationContext* JavaScriptParser::generatorDeclaration() {
  GeneratorDeclarationContext *_localctx = _tracker.createInstance<GeneratorDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 12, JavaScriptParser::RuleGeneratorDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(312);
    match(JavaScriptParser::T__0);
    setState(313);
    match(JavaScriptParser::T__5);
    setState(314);
    identifier();
    setState(315);
    match(JavaScriptParser::T__1);
    setState(317);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__3

    || _la == JavaScriptParser::T__23 || ((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 4294975521) != 0)) {
      setState(316);
      formalParameterList();
    }
    setState(319);
    match(JavaScriptParser::T__2);
    setState(320);
    match(JavaScriptParser::T__3);
    setState(321);
    functionBody();
    setState(322);
    match(JavaScriptParser::T__4);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AsyncFunctionDeclarationContext ------------------------------------------------------------------

JavaScriptParser::AsyncFunctionDeclarationContext::AsyncFunctionDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::IdentifierContext* JavaScriptParser::AsyncFunctionDeclarationContext::identifier() {
  return getRuleContext<JavaScriptParser::IdentifierContext>(0);
}

JavaScriptParser::FunctionBodyContext* JavaScriptParser::AsyncFunctionDeclarationContext::functionBody() {
  return getRuleContext<JavaScriptParser::FunctionBodyContext>(0);
}

JavaScriptParser::FormalParameterListContext* JavaScriptParser::AsyncFunctionDeclarationContext::formalParameterList() {
  return getRuleContext<JavaScriptParser::FormalParameterListContext>(0);
}


size_t JavaScriptParser::AsyncFunctionDeclarationContext::getRuleIndex() const {
  return JavaScriptParser::RuleAsyncFunctionDeclaration;
}

void JavaScriptParser::AsyncFunctionDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAsyncFunctionDeclaration(this);
}

void JavaScriptParser::AsyncFunctionDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAsyncFunctionDeclaration(this);
}

JavaScriptParser::AsyncFunctionDeclarationContext* JavaScriptParser::asyncFunctionDeclaration() {
  AsyncFunctionDeclarationContext *_localctx = _tracker.createInstance<AsyncFunctionDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 14, JavaScriptParser::RuleAsyncFunctionDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(324);
    match(JavaScriptParser::T__6);
    setState(325);
    match(JavaScriptParser::T__0);
    setState(326);
    identifier();
    setState(327);
    match(JavaScriptParser::T__1);
    setState(329);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__3

    || _la == JavaScriptParser::T__23 || ((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 4294975521) != 0)) {
      setState(328);
      formalParameterList();
    }
    setState(331);
    match(JavaScriptParser::T__2);
    setState(332);
    match(JavaScriptParser::T__3);
    setState(333);
    functionBody();
    setState(334);
    match(JavaScriptParser::T__4);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AsyncGeneratorDeclarationContext ------------------------------------------------------------------

JavaScriptParser::AsyncGeneratorDeclarationContext::AsyncGeneratorDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::IdentifierContext* JavaScriptParser::AsyncGeneratorDeclarationContext::identifier() {
  return getRuleContext<JavaScriptParser::IdentifierContext>(0);
}

JavaScriptParser::FunctionBodyContext* JavaScriptParser::AsyncGeneratorDeclarationContext::functionBody() {
  return getRuleContext<JavaScriptParser::FunctionBodyContext>(0);
}

JavaScriptParser::FormalParameterListContext* JavaScriptParser::AsyncGeneratorDeclarationContext::formalParameterList() {
  return getRuleContext<JavaScriptParser::FormalParameterListContext>(0);
}


size_t JavaScriptParser::AsyncGeneratorDeclarationContext::getRuleIndex() const {
  return JavaScriptParser::RuleAsyncGeneratorDeclaration;
}

void JavaScriptParser::AsyncGeneratorDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAsyncGeneratorDeclaration(this);
}

void JavaScriptParser::AsyncGeneratorDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAsyncGeneratorDeclaration(this);
}

JavaScriptParser::AsyncGeneratorDeclarationContext* JavaScriptParser::asyncGeneratorDeclaration() {
  AsyncGeneratorDeclarationContext *_localctx = _tracker.createInstance<AsyncGeneratorDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 16, JavaScriptParser::RuleAsyncGeneratorDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(336);
    match(JavaScriptParser::T__6);
    setState(337);
    match(JavaScriptParser::T__0);
    setState(338);
    match(JavaScriptParser::T__5);
    setState(339);
    identifier();
    setState(340);
    match(JavaScriptParser::T__1);
    setState(342);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__3

    || _la == JavaScriptParser::T__23 || ((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 4294975521) != 0)) {
      setState(341);
      formalParameterList();
    }
    setState(344);
    match(JavaScriptParser::T__2);
    setState(345);
    match(JavaScriptParser::T__3);
    setState(346);
    functionBody();
    setState(347);
    match(JavaScriptParser::T__4);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassDeclarationContext ------------------------------------------------------------------

JavaScriptParser::ClassDeclarationContext::ClassDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::IdentifierContext* JavaScriptParser::ClassDeclarationContext::identifier() {
  return getRuleContext<JavaScriptParser::IdentifierContext>(0);
}

JavaScriptParser::ClassBodyContext* JavaScriptParser::ClassDeclarationContext::classBody() {
  return getRuleContext<JavaScriptParser::ClassBodyContext>(0);
}

JavaScriptParser::ClassExtendsContext* JavaScriptParser::ClassDeclarationContext::classExtends() {
  return getRuleContext<JavaScriptParser::ClassExtendsContext>(0);
}


size_t JavaScriptParser::ClassDeclarationContext::getRuleIndex() const {
  return JavaScriptParser::RuleClassDeclaration;
}

void JavaScriptParser::ClassDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassDeclaration(this);
}

void JavaScriptParser::ClassDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassDeclaration(this);
}

JavaScriptParser::ClassDeclarationContext* JavaScriptParser::classDeclaration() {
  ClassDeclarationContext *_localctx = _tracker.createInstance<ClassDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 18, JavaScriptParser::RuleClassDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(349);
    match(JavaScriptParser::T__7);
    setState(350);
    identifier();
    setState(352);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__8) {
      setState(351);
      classExtends();
    }
    setState(354);
    match(JavaScriptParser::T__3);
    setState(355);
    classBody();
    setState(356);
    match(JavaScriptParser::T__4);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassExtendsContext ------------------------------------------------------------------

JavaScriptParser::ClassExtendsContext::ClassExtendsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::LeftHandSideExpressionContext* JavaScriptParser::ClassExtendsContext::leftHandSideExpression() {
  return getRuleContext<JavaScriptParser::LeftHandSideExpressionContext>(0);
}


size_t JavaScriptParser::ClassExtendsContext::getRuleIndex() const {
  return JavaScriptParser::RuleClassExtends;
}

void JavaScriptParser::ClassExtendsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassExtends(this);
}

void JavaScriptParser::ClassExtendsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassExtends(this);
}

JavaScriptParser::ClassExtendsContext* JavaScriptParser::classExtends() {
  ClassExtendsContext *_localctx = _tracker.createInstance<ClassExtendsContext>(_ctx, getState());
  enterRule(_localctx, 20, JavaScriptParser::RuleClassExtends);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(358);
    match(JavaScriptParser::T__8);
    setState(359);
    leftHandSideExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassBodyContext ------------------------------------------------------------------

JavaScriptParser::ClassBodyContext::ClassBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::ClassElementContext *> JavaScriptParser::ClassBodyContext::classElement() {
  return getRuleContexts<JavaScriptParser::ClassElementContext>();
}

JavaScriptParser::ClassElementContext* JavaScriptParser::ClassBodyContext::classElement(size_t i) {
  return getRuleContext<JavaScriptParser::ClassElementContext>(i);
}


size_t JavaScriptParser::ClassBodyContext::getRuleIndex() const {
  return JavaScriptParser::RuleClassBody;
}

void JavaScriptParser::ClassBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassBody(this);
}

void JavaScriptParser::ClassBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassBody(this);
}

JavaScriptParser::ClassBodyContext* JavaScriptParser::classBody() {
  ClassBodyContext *_localctx = _tracker.createInstance<ClassBodyContext>(_ctx, getState());
  enterRule(_localctx, 22, JavaScriptParser::RuleClassBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(364);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5496450777026) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 580539423854081) != 0)) {
      setState(361);
      classElement();
      setState(366);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassElementContext ------------------------------------------------------------------

JavaScriptParser::ClassElementContext::ClassElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::MethodDefinitionContext* JavaScriptParser::ClassElementContext::methodDefinition() {
  return getRuleContext<JavaScriptParser::MethodDefinitionContext>(0);
}

JavaScriptParser::FieldDefinitionContext* JavaScriptParser::ClassElementContext::fieldDefinition() {
  return getRuleContext<JavaScriptParser::FieldDefinitionContext>(0);
}


size_t JavaScriptParser::ClassElementContext::getRuleIndex() const {
  return JavaScriptParser::RuleClassElement;
}

void JavaScriptParser::ClassElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassElement(this);
}

void JavaScriptParser::ClassElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassElement(this);
}

JavaScriptParser::ClassElementContext* JavaScriptParser::classElement() {
  ClassElementContext *_localctx = _tracker.createInstance<ClassElementContext>(_ctx, getState());
  enterRule(_localctx, 24, JavaScriptParser::RuleClassElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(374);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(367);
      methodDefinition();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(368);
      match(JavaScriptParser::T__9);
      setState(369);
      methodDefinition();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(370);
      fieldDefinition();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(371);
      match(JavaScriptParser::T__9);
      setState(372);
      fieldDefinition();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(373);
      match(JavaScriptParser::T__10);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodDefinitionContext ------------------------------------------------------------------

JavaScriptParser::MethodDefinitionContext::MethodDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::PropertyNameContext* JavaScriptParser::MethodDefinitionContext::propertyName() {
  return getRuleContext<JavaScriptParser::PropertyNameContext>(0);
}

JavaScriptParser::FunctionBodyContext* JavaScriptParser::MethodDefinitionContext::functionBody() {
  return getRuleContext<JavaScriptParser::FunctionBodyContext>(0);
}

JavaScriptParser::FormalParameterListContext* JavaScriptParser::MethodDefinitionContext::formalParameterList() {
  return getRuleContext<JavaScriptParser::FormalParameterListContext>(0);
}

JavaScriptParser::FormalParameterContext* JavaScriptParser::MethodDefinitionContext::formalParameter() {
  return getRuleContext<JavaScriptParser::FormalParameterContext>(0);
}


size_t JavaScriptParser::MethodDefinitionContext::getRuleIndex() const {
  return JavaScriptParser::RuleMethodDefinition;
}

void JavaScriptParser::MethodDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodDefinition(this);
}

void JavaScriptParser::MethodDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodDefinition(this);
}

JavaScriptParser::MethodDefinitionContext* JavaScriptParser::methodDefinition() {
  MethodDefinitionContext *_localctx = _tracker.createInstance<MethodDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 26, JavaScriptParser::RuleMethodDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(437);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(376);
      propertyName();
      setState(377);
      match(JavaScriptParser::T__1);
      setState(379);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaScriptParser::T__3

      || _la == JavaScriptParser::T__23 || ((((_la - 91) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 91)) & 4294975521) != 0)) {
        setState(378);
        formalParameterList();
      }
      setState(381);
      match(JavaScriptParser::T__2);
      setState(382);
      match(JavaScriptParser::T__3);
      setState(383);
      functionBody();
      setState(384);
      match(JavaScriptParser::T__4);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(386);
      match(JavaScriptParser::T__11);
      setState(387);
      propertyName();
      setState(388);
      match(JavaScriptParser::T__1);
      setState(389);
      match(JavaScriptParser::T__2);
      setState(390);
      match(JavaScriptParser::T__3);
      setState(391);
      functionBody();
      setState(392);
      match(JavaScriptParser::T__4);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(394);
      match(JavaScriptParser::T__12);
      setState(395);
      propertyName();
      setState(396);
      match(JavaScriptParser::T__1);
      setState(397);
      formalParameter();
      setState(398);
      match(JavaScriptParser::T__2);
      setState(399);
      match(JavaScriptParser::T__3);
      setState(400);
      functionBody();
      setState(401);
      match(JavaScriptParser::T__4);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(403);
      match(JavaScriptParser::T__6);
      setState(404);
      propertyName();
      setState(405);
      match(JavaScriptParser::T__1);
      setState(407);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaScriptParser::T__3

      || _la == JavaScriptParser::T__23 || ((((_la - 91) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 91)) & 4294975521) != 0)) {
        setState(406);
        formalParameterList();
      }
      setState(409);
      match(JavaScriptParser::T__2);
      setState(410);
      match(JavaScriptParser::T__3);
      setState(411);
      functionBody();
      setState(412);
      match(JavaScriptParser::T__4);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(414);
      match(JavaScriptParser::T__5);
      setState(415);
      propertyName();
      setState(416);
      match(JavaScriptParser::T__1);
      setState(418);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaScriptParser::T__3

      || _la == JavaScriptParser::T__23 || ((((_la - 91) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 91)) & 4294975521) != 0)) {
        setState(417);
        formalParameterList();
      }
      setState(420);
      match(JavaScriptParser::T__2);
      setState(421);
      match(JavaScriptParser::T__3);
      setState(422);
      functionBody();
      setState(423);
      match(JavaScriptParser::T__4);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(425);
      match(JavaScriptParser::T__6);
      setState(426);
      match(JavaScriptParser::T__5);
      setState(427);
      propertyName();
      setState(428);
      match(JavaScriptParser::T__1);
      setState(430);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaScriptParser::T__3

      || _la == JavaScriptParser::T__23 || ((((_la - 91) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 91)) & 4294975521) != 0)) {
        setState(429);
        formalParameterList();
      }
      setState(432);
      match(JavaScriptParser::T__2);
      setState(433);
      match(JavaScriptParser::T__3);
      setState(434);
      functionBody();
      setState(435);
      match(JavaScriptParser::T__4);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldDefinitionContext ------------------------------------------------------------------

JavaScriptParser::FieldDefinitionContext::FieldDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::PropertyNameContext* JavaScriptParser::FieldDefinitionContext::propertyName() {
  return getRuleContext<JavaScriptParser::PropertyNameContext>(0);
}

JavaScriptParser::InitializerContext* JavaScriptParser::FieldDefinitionContext::initializer() {
  return getRuleContext<JavaScriptParser::InitializerContext>(0);
}


size_t JavaScriptParser::FieldDefinitionContext::getRuleIndex() const {
  return JavaScriptParser::RuleFieldDefinition;
}

void JavaScriptParser::FieldDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldDefinition(this);
}

void JavaScriptParser::FieldDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldDefinition(this);
}

JavaScriptParser::FieldDefinitionContext* JavaScriptParser::fieldDefinition() {
  FieldDefinitionContext *_localctx = _tracker.createInstance<FieldDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 28, JavaScriptParser::RuleFieldDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(439);
    propertyName();
    setState(441);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__42) {
      setState(440);
      initializer();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LexicalDeclarationContext ------------------------------------------------------------------

JavaScriptParser::LexicalDeclarationContext::LexicalDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::LetOrConstContext* JavaScriptParser::LexicalDeclarationContext::letOrConst() {
  return getRuleContext<JavaScriptParser::LetOrConstContext>(0);
}

JavaScriptParser::BindingListContext* JavaScriptParser::LexicalDeclarationContext::bindingList() {
  return getRuleContext<JavaScriptParser::BindingListContext>(0);
}


size_t JavaScriptParser::LexicalDeclarationContext::getRuleIndex() const {
  return JavaScriptParser::RuleLexicalDeclaration;
}

void JavaScriptParser::LexicalDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLexicalDeclaration(this);
}

void JavaScriptParser::LexicalDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLexicalDeclaration(this);
}

JavaScriptParser::LexicalDeclarationContext* JavaScriptParser::lexicalDeclaration() {
  LexicalDeclarationContext *_localctx = _tracker.createInstance<LexicalDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 30, JavaScriptParser::RuleLexicalDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(443);
    letOrConst();
    setState(444);
    bindingList();
    setState(445);
    match(JavaScriptParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LetOrConstContext ------------------------------------------------------------------

JavaScriptParser::LetOrConstContext::LetOrConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaScriptParser::LetOrConstContext::getRuleIndex() const {
  return JavaScriptParser::RuleLetOrConst;
}

void JavaScriptParser::LetOrConstContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLetOrConst(this);
}

void JavaScriptParser::LetOrConstContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLetOrConst(this);
}

JavaScriptParser::LetOrConstContext* JavaScriptParser::letOrConst() {
  LetOrConstContext *_localctx = _tracker.createInstance<LetOrConstContext>(_ctx, getState());
  enterRule(_localctx, 32, JavaScriptParser::RuleLetOrConst);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(447);
    _la = _input->LA(1);
    if (!(_la == JavaScriptParser::T__13

    || _la == JavaScriptParser::T__14)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingListContext ------------------------------------------------------------------

JavaScriptParser::BindingListContext::BindingListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::LexicalBindingContext *> JavaScriptParser::BindingListContext::lexicalBinding() {
  return getRuleContexts<JavaScriptParser::LexicalBindingContext>();
}

JavaScriptParser::LexicalBindingContext* JavaScriptParser::BindingListContext::lexicalBinding(size_t i) {
  return getRuleContext<JavaScriptParser::LexicalBindingContext>(i);
}


size_t JavaScriptParser::BindingListContext::getRuleIndex() const {
  return JavaScriptParser::RuleBindingList;
}

void JavaScriptParser::BindingListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBindingList(this);
}

void JavaScriptParser::BindingListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBindingList(this);
}

JavaScriptParser::BindingListContext* JavaScriptParser::bindingList() {
  BindingListContext *_localctx = _tracker.createInstance<BindingListContext>(_ctx, getState());
  enterRule(_localctx, 34, JavaScriptParser::RuleBindingList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(449);
    lexicalBinding();
    setState(454);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaScriptParser::T__15) {
      setState(450);
      match(JavaScriptParser::T__15);
      setState(451);
      lexicalBinding();
      setState(456);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LexicalBindingContext ------------------------------------------------------------------

JavaScriptParser::LexicalBindingContext::LexicalBindingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::BindingIdentifierContext* JavaScriptParser::LexicalBindingContext::bindingIdentifier() {
  return getRuleContext<JavaScriptParser::BindingIdentifierContext>(0);
}

JavaScriptParser::InitializerContext* JavaScriptParser::LexicalBindingContext::initializer() {
  return getRuleContext<JavaScriptParser::InitializerContext>(0);
}

JavaScriptParser::BindingPatternContext* JavaScriptParser::LexicalBindingContext::bindingPattern() {
  return getRuleContext<JavaScriptParser::BindingPatternContext>(0);
}


size_t JavaScriptParser::LexicalBindingContext::getRuleIndex() const {
  return JavaScriptParser::RuleLexicalBinding;
}

void JavaScriptParser::LexicalBindingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLexicalBinding(this);
}

void JavaScriptParser::LexicalBindingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLexicalBinding(this);
}

JavaScriptParser::LexicalBindingContext* JavaScriptParser::lexicalBinding() {
  LexicalBindingContext *_localctx = _tracker.createInstance<LexicalBindingContext>(_ctx, getState());
  enterRule(_localctx, 36, JavaScriptParser::RuleLexicalBinding);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(464);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser::T__23:
      case JavaScriptParser::T__103:
      case JavaScriptParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(457);
        bindingIdentifier();
        setState(459);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaScriptParser::T__42) {
          setState(458);
          initializer();
        }
        break;
      }

      case JavaScriptParser::T__3:
      case JavaScriptParser::T__90: {
        enterOuterAlt(_localctx, 2);
        setState(461);
        bindingPattern();
        setState(462);
        initializer();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

JavaScriptParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::BlockStatementContext* JavaScriptParser::StatementContext::blockStatement() {
  return getRuleContext<JavaScriptParser::BlockStatementContext>(0);
}

JavaScriptParser::VariableStatementContext* JavaScriptParser::StatementContext::variableStatement() {
  return getRuleContext<JavaScriptParser::VariableStatementContext>(0);
}

JavaScriptParser::EmptyStatementContext* JavaScriptParser::StatementContext::emptyStatement() {
  return getRuleContext<JavaScriptParser::EmptyStatementContext>(0);
}

JavaScriptParser::ExpressionStatementContext* JavaScriptParser::StatementContext::expressionStatement() {
  return getRuleContext<JavaScriptParser::ExpressionStatementContext>(0);
}

JavaScriptParser::IfStatementContext* JavaScriptParser::StatementContext::ifStatement() {
  return getRuleContext<JavaScriptParser::IfStatementContext>(0);
}

JavaScriptParser::IterationStatementContext* JavaScriptParser::StatementContext::iterationStatement() {
  return getRuleContext<JavaScriptParser::IterationStatementContext>(0);
}

JavaScriptParser::ContinueStatementContext* JavaScriptParser::StatementContext::continueStatement() {
  return getRuleContext<JavaScriptParser::ContinueStatementContext>(0);
}

JavaScriptParser::BreakStatementContext* JavaScriptParser::StatementContext::breakStatement() {
  return getRuleContext<JavaScriptParser::BreakStatementContext>(0);
}

JavaScriptParser::ReturnStatementContext* JavaScriptParser::StatementContext::returnStatement() {
  return getRuleContext<JavaScriptParser::ReturnStatementContext>(0);
}

JavaScriptParser::WithStatementContext* JavaScriptParser::StatementContext::withStatement() {
  return getRuleContext<JavaScriptParser::WithStatementContext>(0);
}

JavaScriptParser::LabelledStatementContext* JavaScriptParser::StatementContext::labelledStatement() {
  return getRuleContext<JavaScriptParser::LabelledStatementContext>(0);
}

JavaScriptParser::SwitchStatementContext* JavaScriptParser::StatementContext::switchStatement() {
  return getRuleContext<JavaScriptParser::SwitchStatementContext>(0);
}

JavaScriptParser::ThrowStatementContext* JavaScriptParser::StatementContext::throwStatement() {
  return getRuleContext<JavaScriptParser::ThrowStatementContext>(0);
}

JavaScriptParser::TryStatementContext* JavaScriptParser::StatementContext::tryStatement() {
  return getRuleContext<JavaScriptParser::TryStatementContext>(0);
}

JavaScriptParser::DebuggerStatementContext* JavaScriptParser::StatementContext::debuggerStatement() {
  return getRuleContext<JavaScriptParser::DebuggerStatementContext>(0);
}

JavaScriptParser::ImportStatementContext* JavaScriptParser::StatementContext::importStatement() {
  return getRuleContext<JavaScriptParser::ImportStatementContext>(0);
}

JavaScriptParser::ExportStatementContext* JavaScriptParser::StatementContext::exportStatement() {
  return getRuleContext<JavaScriptParser::ExportStatementContext>(0);
}


size_t JavaScriptParser::StatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleStatement;
}

void JavaScriptParser::StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement(this);
}

void JavaScriptParser::StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement(this);
}

JavaScriptParser::StatementContext* JavaScriptParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 38, JavaScriptParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(483);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(466);
      blockStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(467);
      variableStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(468);
      emptyStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(469);
      expressionStatement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(470);
      ifStatement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(471);
      iterationStatement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(472);
      continueStatement();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(473);
      breakStatement();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(474);
      returnStatement();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(475);
      withStatement();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(476);
      labelledStatement();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(477);
      switchStatement();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(478);
      throwStatement();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(479);
      tryStatement();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(480);
      debuggerStatement();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(481);
      importStatement();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(482);
      exportStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockStatementContext ------------------------------------------------------------------

JavaScriptParser::BlockStatementContext::BlockStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::StatementListContext* JavaScriptParser::BlockStatementContext::statementList() {
  return getRuleContext<JavaScriptParser::StatementListContext>(0);
}


size_t JavaScriptParser::BlockStatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleBlockStatement;
}

void JavaScriptParser::BlockStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockStatement(this);
}

void JavaScriptParser::BlockStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockStatement(this);
}

JavaScriptParser::BlockStatementContext* JavaScriptParser::blockStatement() {
  BlockStatementContext *_localctx = _tracker.createInstance<BlockStatementContext>(_ctx, getState());
  enterRule(_localctx, 40, JavaScriptParser::RuleBlockStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(485);
    match(JavaScriptParser::T__3);
    setState(487);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5277398469014) != 0) || ((((_la - 78) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 78)) & 53841942953955) != 0)) {
      setState(486);
      statementList();
    }
    setState(489);
    match(JavaScriptParser::T__4);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementListContext ------------------------------------------------------------------

JavaScriptParser::StatementListContext::StatementListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::StatementContext *> JavaScriptParser::StatementListContext::statement() {
  return getRuleContexts<JavaScriptParser::StatementContext>();
}

JavaScriptParser::StatementContext* JavaScriptParser::StatementListContext::statement(size_t i) {
  return getRuleContext<JavaScriptParser::StatementContext>(i);
}


size_t JavaScriptParser::StatementListContext::getRuleIndex() const {
  return JavaScriptParser::RuleStatementList;
}

void JavaScriptParser::StatementListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementList(this);
}

void JavaScriptParser::StatementListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementList(this);
}

JavaScriptParser::StatementListContext* JavaScriptParser::statementList() {
  StatementListContext *_localctx = _tracker.createInstance<StatementListContext>(_ctx, getState());
  enterRule(_localctx, 42, JavaScriptParser::RuleStatementList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(492); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(491);
      statement();
      setState(494); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5277398469014) != 0) || ((((_la - 78) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 78)) & 53841942953955) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableStatementContext ------------------------------------------------------------------

JavaScriptParser::VariableStatementContext::VariableStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::VariableDeclarationListContext* JavaScriptParser::VariableStatementContext::variableDeclarationList() {
  return getRuleContext<JavaScriptParser::VariableDeclarationListContext>(0);
}


size_t JavaScriptParser::VariableStatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleVariableStatement;
}

void JavaScriptParser::VariableStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableStatement(this);
}

void JavaScriptParser::VariableStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableStatement(this);
}

JavaScriptParser::VariableStatementContext* JavaScriptParser::variableStatement() {
  VariableStatementContext *_localctx = _tracker.createInstance<VariableStatementContext>(_ctx, getState());
  enterRule(_localctx, 44, JavaScriptParser::RuleVariableStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(496);
    match(JavaScriptParser::T__16);
    setState(497);
    variableDeclarationList();
    setState(498);
    match(JavaScriptParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclarationListContext ------------------------------------------------------------------

JavaScriptParser::VariableDeclarationListContext::VariableDeclarationListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::VariableDeclarationContext *> JavaScriptParser::VariableDeclarationListContext::variableDeclaration() {
  return getRuleContexts<JavaScriptParser::VariableDeclarationContext>();
}

JavaScriptParser::VariableDeclarationContext* JavaScriptParser::VariableDeclarationListContext::variableDeclaration(size_t i) {
  return getRuleContext<JavaScriptParser::VariableDeclarationContext>(i);
}


size_t JavaScriptParser::VariableDeclarationListContext::getRuleIndex() const {
  return JavaScriptParser::RuleVariableDeclarationList;
}

void JavaScriptParser::VariableDeclarationListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableDeclarationList(this);
}

void JavaScriptParser::VariableDeclarationListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableDeclarationList(this);
}

JavaScriptParser::VariableDeclarationListContext* JavaScriptParser::variableDeclarationList() {
  VariableDeclarationListContext *_localctx = _tracker.createInstance<VariableDeclarationListContext>(_ctx, getState());
  enterRule(_localctx, 46, JavaScriptParser::RuleVariableDeclarationList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(500);
    variableDeclaration();
    setState(505);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaScriptParser::T__15) {
      setState(501);
      match(JavaScriptParser::T__15);
      setState(502);
      variableDeclaration();
      setState(507);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclarationContext ------------------------------------------------------------------

JavaScriptParser::VariableDeclarationContext::VariableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::BindingIdentifierContext* JavaScriptParser::VariableDeclarationContext::bindingIdentifier() {
  return getRuleContext<JavaScriptParser::BindingIdentifierContext>(0);
}

JavaScriptParser::InitializerContext* JavaScriptParser::VariableDeclarationContext::initializer() {
  return getRuleContext<JavaScriptParser::InitializerContext>(0);
}

JavaScriptParser::BindingPatternContext* JavaScriptParser::VariableDeclarationContext::bindingPattern() {
  return getRuleContext<JavaScriptParser::BindingPatternContext>(0);
}


size_t JavaScriptParser::VariableDeclarationContext::getRuleIndex() const {
  return JavaScriptParser::RuleVariableDeclaration;
}

void JavaScriptParser::VariableDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableDeclaration(this);
}

void JavaScriptParser::VariableDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableDeclaration(this);
}

JavaScriptParser::VariableDeclarationContext* JavaScriptParser::variableDeclaration() {
  VariableDeclarationContext *_localctx = _tracker.createInstance<VariableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 48, JavaScriptParser::RuleVariableDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(515);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser::T__23:
      case JavaScriptParser::T__103:
      case JavaScriptParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(508);
        bindingIdentifier();
        setState(510);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaScriptParser::T__42) {
          setState(509);
          initializer();
        }
        break;
      }

      case JavaScriptParser::T__3:
      case JavaScriptParser::T__90: {
        enterOuterAlt(_localctx, 2);
        setState(512);
        bindingPattern();
        setState(513);
        initializer();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmptyStatementContext ------------------------------------------------------------------

JavaScriptParser::EmptyStatementContext::EmptyStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaScriptParser::EmptyStatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleEmptyStatement;
}

void JavaScriptParser::EmptyStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEmptyStatement(this);
}

void JavaScriptParser::EmptyStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEmptyStatement(this);
}

JavaScriptParser::EmptyStatementContext* JavaScriptParser::emptyStatement() {
  EmptyStatementContext *_localctx = _tracker.createInstance<EmptyStatementContext>(_ctx, getState());
  enterRule(_localctx, 50, JavaScriptParser::RuleEmptyStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(517);
    match(JavaScriptParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionStatementContext ------------------------------------------------------------------

JavaScriptParser::ExpressionStatementContext::ExpressionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ExpressionContext* JavaScriptParser::ExpressionStatementContext::expression() {
  return getRuleContext<JavaScriptParser::ExpressionContext>(0);
}


size_t JavaScriptParser::ExpressionStatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleExpressionStatement;
}

void JavaScriptParser::ExpressionStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionStatement(this);
}

void JavaScriptParser::ExpressionStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionStatement(this);
}

JavaScriptParser::ExpressionStatementContext* JavaScriptParser::expressionStatement() {
  ExpressionStatementContext *_localctx = _tracker.createInstance<ExpressionStatementContext>(_ctx, getState());
  enterRule(_localctx, 52, JavaScriptParser::RuleExpressionStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(519);
    expression();
    setState(520);
    match(JavaScriptParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfStatementContext ------------------------------------------------------------------

JavaScriptParser::IfStatementContext::IfStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ExpressionContext* JavaScriptParser::IfStatementContext::expression() {
  return getRuleContext<JavaScriptParser::ExpressionContext>(0);
}

std::vector<JavaScriptParser::StatementContext *> JavaScriptParser::IfStatementContext::statement() {
  return getRuleContexts<JavaScriptParser::StatementContext>();
}

JavaScriptParser::StatementContext* JavaScriptParser::IfStatementContext::statement(size_t i) {
  return getRuleContext<JavaScriptParser::StatementContext>(i);
}


size_t JavaScriptParser::IfStatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleIfStatement;
}

void JavaScriptParser::IfStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfStatement(this);
}

void JavaScriptParser::IfStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfStatement(this);
}

JavaScriptParser::IfStatementContext* JavaScriptParser::ifStatement() {
  IfStatementContext *_localctx = _tracker.createInstance<IfStatementContext>(_ctx, getState());
  enterRule(_localctx, 54, JavaScriptParser::RuleIfStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(522);
    match(JavaScriptParser::T__17);
    setState(523);
    match(JavaScriptParser::T__1);
    setState(524);
    expression();
    setState(525);
    match(JavaScriptParser::T__2);
    setState(526);
    statement();
    setState(529);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
    case 1: {
      setState(527);
      match(JavaScriptParser::T__18);
      setState(528);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IterationStatementContext ------------------------------------------------------------------

JavaScriptParser::IterationStatementContext::IterationStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::DoWhileStatementContext* JavaScriptParser::IterationStatementContext::doWhileStatement() {
  return getRuleContext<JavaScriptParser::DoWhileStatementContext>(0);
}

JavaScriptParser::WhileStatementContext* JavaScriptParser::IterationStatementContext::whileStatement() {
  return getRuleContext<JavaScriptParser::WhileStatementContext>(0);
}

JavaScriptParser::ForStatementContext* JavaScriptParser::IterationStatementContext::forStatement() {
  return getRuleContext<JavaScriptParser::ForStatementContext>(0);
}

JavaScriptParser::ForInStatementContext* JavaScriptParser::IterationStatementContext::forInStatement() {
  return getRuleContext<JavaScriptParser::ForInStatementContext>(0);
}

JavaScriptParser::ForOfStatementContext* JavaScriptParser::IterationStatementContext::forOfStatement() {
  return getRuleContext<JavaScriptParser::ForOfStatementContext>(0);
}


size_t JavaScriptParser::IterationStatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleIterationStatement;
}

void JavaScriptParser::IterationStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIterationStatement(this);
}

void JavaScriptParser::IterationStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIterationStatement(this);
}

JavaScriptParser::IterationStatementContext* JavaScriptParser::iterationStatement() {
  IterationStatementContext *_localctx = _tracker.createInstance<IterationStatementContext>(_ctx, getState());
  enterRule(_localctx, 56, JavaScriptParser::RuleIterationStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(536);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(531);
      doWhileStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(532);
      whileStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(533);
      forStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(534);
      forInStatement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(535);
      forOfStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DoWhileStatementContext ------------------------------------------------------------------

JavaScriptParser::DoWhileStatementContext::DoWhileStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::StatementContext* JavaScriptParser::DoWhileStatementContext::statement() {
  return getRuleContext<JavaScriptParser::StatementContext>(0);
}

JavaScriptParser::ExpressionContext* JavaScriptParser::DoWhileStatementContext::expression() {
  return getRuleContext<JavaScriptParser::ExpressionContext>(0);
}


size_t JavaScriptParser::DoWhileStatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleDoWhileStatement;
}

void JavaScriptParser::DoWhileStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoWhileStatement(this);
}

void JavaScriptParser::DoWhileStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoWhileStatement(this);
}

JavaScriptParser::DoWhileStatementContext* JavaScriptParser::doWhileStatement() {
  DoWhileStatementContext *_localctx = _tracker.createInstance<DoWhileStatementContext>(_ctx, getState());
  enterRule(_localctx, 58, JavaScriptParser::RuleDoWhileStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(538);
    match(JavaScriptParser::T__19);
    setState(539);
    statement();
    setState(540);
    match(JavaScriptParser::T__20);
    setState(541);
    match(JavaScriptParser::T__1);
    setState(542);
    expression();
    setState(543);
    match(JavaScriptParser::T__2);
    setState(544);
    match(JavaScriptParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStatementContext ------------------------------------------------------------------

JavaScriptParser::WhileStatementContext::WhileStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ExpressionContext* JavaScriptParser::WhileStatementContext::expression() {
  return getRuleContext<JavaScriptParser::ExpressionContext>(0);
}

JavaScriptParser::StatementContext* JavaScriptParser::WhileStatementContext::statement() {
  return getRuleContext<JavaScriptParser::StatementContext>(0);
}


size_t JavaScriptParser::WhileStatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleWhileStatement;
}

void JavaScriptParser::WhileStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhileStatement(this);
}

void JavaScriptParser::WhileStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhileStatement(this);
}

JavaScriptParser::WhileStatementContext* JavaScriptParser::whileStatement() {
  WhileStatementContext *_localctx = _tracker.createInstance<WhileStatementContext>(_ctx, getState());
  enterRule(_localctx, 60, JavaScriptParser::RuleWhileStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(546);
    match(JavaScriptParser::T__20);
    setState(547);
    match(JavaScriptParser::T__1);
    setState(548);
    expression();
    setState(549);
    match(JavaScriptParser::T__2);
    setState(550);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStatementContext ------------------------------------------------------------------

JavaScriptParser::ForStatementContext::ForStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::StatementContext* JavaScriptParser::ForStatementContext::statement() {
  return getRuleContext<JavaScriptParser::StatementContext>(0);
}

JavaScriptParser::ForInitContext* JavaScriptParser::ForStatementContext::forInit() {
  return getRuleContext<JavaScriptParser::ForInitContext>(0);
}

std::vector<JavaScriptParser::ExpressionContext *> JavaScriptParser::ForStatementContext::expression() {
  return getRuleContexts<JavaScriptParser::ExpressionContext>();
}

JavaScriptParser::ExpressionContext* JavaScriptParser::ForStatementContext::expression(size_t i) {
  return getRuleContext<JavaScriptParser::ExpressionContext>(i);
}


size_t JavaScriptParser::ForStatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleForStatement;
}

void JavaScriptParser::ForStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForStatement(this);
}

void JavaScriptParser::ForStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForStatement(this);
}

JavaScriptParser::ForStatementContext* JavaScriptParser::forStatement() {
  ForStatementContext *_localctx = _tracker.createInstance<ForStatementContext>(_ctx, getState());
  enterRule(_localctx, 62, JavaScriptParser::RuleForStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(552);
    match(JavaScriptParser::T__21);
    setState(553);
    match(JavaScriptParser::T__1);
    setState(555);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 549772771734) != 0) || ((((_la - 78) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 78)) & 53841942953955) != 0)) {
      setState(554);
      forInit();
    }
    setState(557);
    match(JavaScriptParser::T__10);
    setState(559);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 549772591510) != 0) || ((((_la - 78) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 78)) & 53841942953955) != 0)) {
      setState(558);
      expression();
    }
    setState(561);
    match(JavaScriptParser::T__10);
    setState(563);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 549772591510) != 0) || ((((_la - 78) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 78)) & 53841942953955) != 0)) {
      setState(562);
      expression();
    }
    setState(565);
    match(JavaScriptParser::T__2);
    setState(566);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForInitContext ------------------------------------------------------------------

JavaScriptParser::ForInitContext::ForInitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ExpressionContext* JavaScriptParser::ForInitContext::expression() {
  return getRuleContext<JavaScriptParser::ExpressionContext>(0);
}

JavaScriptParser::VariableDeclarationListContext* JavaScriptParser::ForInitContext::variableDeclarationList() {
  return getRuleContext<JavaScriptParser::VariableDeclarationListContext>(0);
}

JavaScriptParser::LexicalDeclarationContext* JavaScriptParser::ForInitContext::lexicalDeclaration() {
  return getRuleContext<JavaScriptParser::LexicalDeclarationContext>(0);
}


size_t JavaScriptParser::ForInitContext::getRuleIndex() const {
  return JavaScriptParser::RuleForInit;
}

void JavaScriptParser::ForInitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForInit(this);
}

void JavaScriptParser::ForInitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForInit(this);
}

JavaScriptParser::ForInitContext* JavaScriptParser::forInit() {
  ForInitContext *_localctx = _tracker.createInstance<ForInitContext>(_ctx, getState());
  enterRule(_localctx, 64, JavaScriptParser::RuleForInit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(572);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser::T__0:
      case JavaScriptParser::T__1:
      case JavaScriptParser::T__3:
      case JavaScriptParser::T__6:
      case JavaScriptParser::T__7:
      case JavaScriptParser::T__23:
      case JavaScriptParser::T__38:
      case JavaScriptParser::T__77:
      case JavaScriptParser::T__78:
      case JavaScriptParser::T__82:
      case JavaScriptParser::T__83:
      case JavaScriptParser::T__84:
      case JavaScriptParser::T__85:
      case JavaScriptParser::T__86:
      case JavaScriptParser::T__87:
      case JavaScriptParser::T__88:
      case JavaScriptParser::T__89:
      case JavaScriptParser::T__90:
      case JavaScriptParser::T__94:
      case JavaScriptParser::T__98:
      case JavaScriptParser::T__99:
      case JavaScriptParser::T__100:
      case JavaScriptParser::T__101:
      case JavaScriptParser::T__103:
      case JavaScriptParser::T__104:
      case JavaScriptParser::DECIMAL_LITERAL:
      case JavaScriptParser::BINARY_LITERAL:
      case JavaScriptParser::OCTAL_LITERAL:
      case JavaScriptParser::HEX_LITERAL:
      case JavaScriptParser::STRING_LITERAL:
      case JavaScriptParser::REGEX_LITERAL:
      case JavaScriptParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(568);
        expression();
        break;
      }

      case JavaScriptParser::T__16: {
        enterOuterAlt(_localctx, 2);
        setState(569);
        match(JavaScriptParser::T__16);
        setState(570);
        variableDeclarationList();
        break;
      }

      case JavaScriptParser::T__13:
      case JavaScriptParser::T__14: {
        enterOuterAlt(_localctx, 3);
        setState(571);
        lexicalDeclaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForInStatementContext ------------------------------------------------------------------

JavaScriptParser::ForInStatementContext::ForInStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ForInBindingContext* JavaScriptParser::ForInStatementContext::forInBinding() {
  return getRuleContext<JavaScriptParser::ForInBindingContext>(0);
}

JavaScriptParser::ExpressionContext* JavaScriptParser::ForInStatementContext::expression() {
  return getRuleContext<JavaScriptParser::ExpressionContext>(0);
}

JavaScriptParser::StatementContext* JavaScriptParser::ForInStatementContext::statement() {
  return getRuleContext<JavaScriptParser::StatementContext>(0);
}


size_t JavaScriptParser::ForInStatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleForInStatement;
}

void JavaScriptParser::ForInStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForInStatement(this);
}

void JavaScriptParser::ForInStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForInStatement(this);
}

JavaScriptParser::ForInStatementContext* JavaScriptParser::forInStatement() {
  ForInStatementContext *_localctx = _tracker.createInstance<ForInStatementContext>(_ctx, getState());
  enterRule(_localctx, 66, JavaScriptParser::RuleForInStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(574);
    match(JavaScriptParser::T__21);
    setState(575);
    match(JavaScriptParser::T__1);
    setState(576);
    forInBinding();
    setState(577);
    match(JavaScriptParser::T__22);
    setState(578);
    expression();
    setState(579);
    match(JavaScriptParser::T__2);
    setState(580);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForOfStatementContext ------------------------------------------------------------------

JavaScriptParser::ForOfStatementContext::ForOfStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ForInBindingContext* JavaScriptParser::ForOfStatementContext::forInBinding() {
  return getRuleContext<JavaScriptParser::ForInBindingContext>(0);
}

JavaScriptParser::ExpressionContext* JavaScriptParser::ForOfStatementContext::expression() {
  return getRuleContext<JavaScriptParser::ExpressionContext>(0);
}

JavaScriptParser::StatementContext* JavaScriptParser::ForOfStatementContext::statement() {
  return getRuleContext<JavaScriptParser::StatementContext>(0);
}


size_t JavaScriptParser::ForOfStatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleForOfStatement;
}

void JavaScriptParser::ForOfStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForOfStatement(this);
}

void JavaScriptParser::ForOfStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForOfStatement(this);
}

JavaScriptParser::ForOfStatementContext* JavaScriptParser::forOfStatement() {
  ForOfStatementContext *_localctx = _tracker.createInstance<ForOfStatementContext>(_ctx, getState());
  enterRule(_localctx, 68, JavaScriptParser::RuleForOfStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(582);
    match(JavaScriptParser::T__21);
    setState(584);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__23) {
      setState(583);
      match(JavaScriptParser::T__23);
    }
    setState(586);
    match(JavaScriptParser::T__1);
    setState(587);
    forInBinding();
    setState(588);
    match(JavaScriptParser::T__24);
    setState(589);
    expression();
    setState(590);
    match(JavaScriptParser::T__2);
    setState(591);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForInBindingContext ------------------------------------------------------------------

JavaScriptParser::ForInBindingContext::ForInBindingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::BindingIdentifierContext* JavaScriptParser::ForInBindingContext::bindingIdentifier() {
  return getRuleContext<JavaScriptParser::BindingIdentifierContext>(0);
}

JavaScriptParser::BindingPatternContext* JavaScriptParser::ForInBindingContext::bindingPattern() {
  return getRuleContext<JavaScriptParser::BindingPatternContext>(0);
}

JavaScriptParser::InitializerContext* JavaScriptParser::ForInBindingContext::initializer() {
  return getRuleContext<JavaScriptParser::InitializerContext>(0);
}

JavaScriptParser::LetOrConstContext* JavaScriptParser::ForInBindingContext::letOrConst() {
  return getRuleContext<JavaScriptParser::LetOrConstContext>(0);
}


size_t JavaScriptParser::ForInBindingContext::getRuleIndex() const {
  return JavaScriptParser::RuleForInBinding;
}

void JavaScriptParser::ForInBindingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForInBinding(this);
}

void JavaScriptParser::ForInBindingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForInBinding(this);
}

JavaScriptParser::ForInBindingContext* JavaScriptParser::forInBinding() {
  ForInBindingContext *_localctx = _tracker.createInstance<ForInBindingContext>(_ctx, getState());
  enterRule(_localctx, 70, JavaScriptParser::RuleForInBinding);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(610);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(593);
      bindingIdentifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(594);
      bindingPattern();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(595);
      match(JavaScriptParser::T__16);
      setState(596);
      bindingIdentifier();
      setState(598);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaScriptParser::T__42) {
        setState(597);
        initializer();
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(600);
      match(JavaScriptParser::T__16);
      setState(601);
      bindingPattern();
      setState(602);
      initializer();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(604);
      letOrConst();
      setState(605);
      bindingIdentifier();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(607);
      letOrConst();
      setState(608);
      bindingPattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ContinueStatementContext ------------------------------------------------------------------

JavaScriptParser::ContinueStatementContext::ContinueStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::IdentifierContext* JavaScriptParser::ContinueStatementContext::identifier() {
  return getRuleContext<JavaScriptParser::IdentifierContext>(0);
}


size_t JavaScriptParser::ContinueStatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleContinueStatement;
}

void JavaScriptParser::ContinueStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContinueStatement(this);
}

void JavaScriptParser::ContinueStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContinueStatement(this);
}

JavaScriptParser::ContinueStatementContext* JavaScriptParser::continueStatement() {
  ContinueStatementContext *_localctx = _tracker.createInstance<ContinueStatementContext>(_ctx, getState());
  enterRule(_localctx, 72, JavaScriptParser::RuleContinueStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(612);
    match(JavaScriptParser::T__25);
    setState(614);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__23 || _la == JavaScriptParser::T__103

    || _la == JavaScriptParser::IDENTIFIER) {
      setState(613);
      identifier();
    }
    setState(616);
    match(JavaScriptParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BreakStatementContext ------------------------------------------------------------------

JavaScriptParser::BreakStatementContext::BreakStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::IdentifierContext* JavaScriptParser::BreakStatementContext::identifier() {
  return getRuleContext<JavaScriptParser::IdentifierContext>(0);
}


size_t JavaScriptParser::BreakStatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleBreakStatement;
}

void JavaScriptParser::BreakStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBreakStatement(this);
}

void JavaScriptParser::BreakStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBreakStatement(this);
}

JavaScriptParser::BreakStatementContext* JavaScriptParser::breakStatement() {
  BreakStatementContext *_localctx = _tracker.createInstance<BreakStatementContext>(_ctx, getState());
  enterRule(_localctx, 74, JavaScriptParser::RuleBreakStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(618);
    match(JavaScriptParser::T__26);
    setState(620);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__23 || _la == JavaScriptParser::T__103

    || _la == JavaScriptParser::IDENTIFIER) {
      setState(619);
      identifier();
    }
    setState(622);
    match(JavaScriptParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnStatementContext ------------------------------------------------------------------

JavaScriptParser::ReturnStatementContext::ReturnStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ExpressionContext* JavaScriptParser::ReturnStatementContext::expression() {
  return getRuleContext<JavaScriptParser::ExpressionContext>(0);
}


size_t JavaScriptParser::ReturnStatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleReturnStatement;
}

void JavaScriptParser::ReturnStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturnStatement(this);
}

void JavaScriptParser::ReturnStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturnStatement(this);
}

JavaScriptParser::ReturnStatementContext* JavaScriptParser::returnStatement() {
  ReturnStatementContext *_localctx = _tracker.createInstance<ReturnStatementContext>(_ctx, getState());
  enterRule(_localctx, 76, JavaScriptParser::RuleReturnStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(624);
    match(JavaScriptParser::T__27);
    setState(626);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 549772591510) != 0) || ((((_la - 78) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 78)) & 53841942953955) != 0)) {
      setState(625);
      expression();
    }
    setState(628);
    match(JavaScriptParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithStatementContext ------------------------------------------------------------------

JavaScriptParser::WithStatementContext::WithStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ExpressionContext* JavaScriptParser::WithStatementContext::expression() {
  return getRuleContext<JavaScriptParser::ExpressionContext>(0);
}

JavaScriptParser::StatementContext* JavaScriptParser::WithStatementContext::statement() {
  return getRuleContext<JavaScriptParser::StatementContext>(0);
}


size_t JavaScriptParser::WithStatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleWithStatement;
}

void JavaScriptParser::WithStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWithStatement(this);
}

void JavaScriptParser::WithStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWithStatement(this);
}

JavaScriptParser::WithStatementContext* JavaScriptParser::withStatement() {
  WithStatementContext *_localctx = _tracker.createInstance<WithStatementContext>(_ctx, getState());
  enterRule(_localctx, 78, JavaScriptParser::RuleWithStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(630);
    match(JavaScriptParser::T__28);
    setState(631);
    match(JavaScriptParser::T__1);
    setState(632);
    expression();
    setState(633);
    match(JavaScriptParser::T__2);
    setState(634);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelledStatementContext ------------------------------------------------------------------

JavaScriptParser::LabelledStatementContext::LabelledStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::IdentifierContext* JavaScriptParser::LabelledStatementContext::identifier() {
  return getRuleContext<JavaScriptParser::IdentifierContext>(0);
}

JavaScriptParser::StatementContext* JavaScriptParser::LabelledStatementContext::statement() {
  return getRuleContext<JavaScriptParser::StatementContext>(0);
}


size_t JavaScriptParser::LabelledStatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleLabelledStatement;
}

void JavaScriptParser::LabelledStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabelledStatement(this);
}

void JavaScriptParser::LabelledStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabelledStatement(this);
}

JavaScriptParser::LabelledStatementContext* JavaScriptParser::labelledStatement() {
  LabelledStatementContext *_localctx = _tracker.createInstance<LabelledStatementContext>(_ctx, getState());
  enterRule(_localctx, 80, JavaScriptParser::RuleLabelledStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(636);
    identifier();
    setState(637);
    match(JavaScriptParser::T__29);
    setState(638);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchStatementContext ------------------------------------------------------------------

JavaScriptParser::SwitchStatementContext::SwitchStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ExpressionContext* JavaScriptParser::SwitchStatementContext::expression() {
  return getRuleContext<JavaScriptParser::ExpressionContext>(0);
}

std::vector<JavaScriptParser::CaseClauseContext *> JavaScriptParser::SwitchStatementContext::caseClause() {
  return getRuleContexts<JavaScriptParser::CaseClauseContext>();
}

JavaScriptParser::CaseClauseContext* JavaScriptParser::SwitchStatementContext::caseClause(size_t i) {
  return getRuleContext<JavaScriptParser::CaseClauseContext>(i);
}

JavaScriptParser::DefaultClauseContext* JavaScriptParser::SwitchStatementContext::defaultClause() {
  return getRuleContext<JavaScriptParser::DefaultClauseContext>(0);
}


size_t JavaScriptParser::SwitchStatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleSwitchStatement;
}

void JavaScriptParser::SwitchStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchStatement(this);
}

void JavaScriptParser::SwitchStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchStatement(this);
}

JavaScriptParser::SwitchStatementContext* JavaScriptParser::switchStatement() {
  SwitchStatementContext *_localctx = _tracker.createInstance<SwitchStatementContext>(_ctx, getState());
  enterRule(_localctx, 82, JavaScriptParser::RuleSwitchStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(640);
    match(JavaScriptParser::T__30);
    setState(641);
    match(JavaScriptParser::T__1);
    setState(642);
    expression();
    setState(643);
    match(JavaScriptParser::T__2);
    setState(644);
    match(JavaScriptParser::T__3);
    setState(648);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(645);
        caseClause(); 
      }
      setState(650);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx);
    }
    setState(652);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__32) {
      setState(651);
      defaultClause();
    }
    setState(657);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaScriptParser::T__31) {
      setState(654);
      caseClause();
      setState(659);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(660);
    match(JavaScriptParser::T__4);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseClauseContext ------------------------------------------------------------------

JavaScriptParser::CaseClauseContext::CaseClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ExpressionContext* JavaScriptParser::CaseClauseContext::expression() {
  return getRuleContext<JavaScriptParser::ExpressionContext>(0);
}

JavaScriptParser::StatementListContext* JavaScriptParser::CaseClauseContext::statementList() {
  return getRuleContext<JavaScriptParser::StatementListContext>(0);
}


size_t JavaScriptParser::CaseClauseContext::getRuleIndex() const {
  return JavaScriptParser::RuleCaseClause;
}

void JavaScriptParser::CaseClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaseClause(this);
}

void JavaScriptParser::CaseClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaseClause(this);
}

JavaScriptParser::CaseClauseContext* JavaScriptParser::caseClause() {
  CaseClauseContext *_localctx = _tracker.createInstance<CaseClauseContext>(_ctx, getState());
  enterRule(_localctx, 84, JavaScriptParser::RuleCaseClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(662);
    match(JavaScriptParser::T__31);
    setState(663);
    expression();
    setState(664);
    match(JavaScriptParser::T__29);
    setState(666);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5277398469014) != 0) || ((((_la - 78) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 78)) & 53841942953955) != 0)) {
      setState(665);
      statementList();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultClauseContext ------------------------------------------------------------------

JavaScriptParser::DefaultClauseContext::DefaultClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::StatementListContext* JavaScriptParser::DefaultClauseContext::statementList() {
  return getRuleContext<JavaScriptParser::StatementListContext>(0);
}


size_t JavaScriptParser::DefaultClauseContext::getRuleIndex() const {
  return JavaScriptParser::RuleDefaultClause;
}

void JavaScriptParser::DefaultClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefaultClause(this);
}

void JavaScriptParser::DefaultClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefaultClause(this);
}

JavaScriptParser::DefaultClauseContext* JavaScriptParser::defaultClause() {
  DefaultClauseContext *_localctx = _tracker.createInstance<DefaultClauseContext>(_ctx, getState());
  enterRule(_localctx, 86, JavaScriptParser::RuleDefaultClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(668);
    match(JavaScriptParser::T__32);
    setState(669);
    match(JavaScriptParser::T__29);
    setState(671);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5277398469014) != 0) || ((((_la - 78) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 78)) & 53841942953955) != 0)) {
      setState(670);
      statementList();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThrowStatementContext ------------------------------------------------------------------

JavaScriptParser::ThrowStatementContext::ThrowStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ExpressionContext* JavaScriptParser::ThrowStatementContext::expression() {
  return getRuleContext<JavaScriptParser::ExpressionContext>(0);
}


size_t JavaScriptParser::ThrowStatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleThrowStatement;
}

void JavaScriptParser::ThrowStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrowStatement(this);
}

void JavaScriptParser::ThrowStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrowStatement(this);
}

JavaScriptParser::ThrowStatementContext* JavaScriptParser::throwStatement() {
  ThrowStatementContext *_localctx = _tracker.createInstance<ThrowStatementContext>(_ctx, getState());
  enterRule(_localctx, 88, JavaScriptParser::RuleThrowStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(673);
    match(JavaScriptParser::T__33);
    setState(674);
    expression();
    setState(675);
    match(JavaScriptParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryStatementContext ------------------------------------------------------------------

JavaScriptParser::TryStatementContext::TryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::BlockStatementContext* JavaScriptParser::TryStatementContext::blockStatement() {
  return getRuleContext<JavaScriptParser::BlockStatementContext>(0);
}

JavaScriptParser::CatchClauseContext* JavaScriptParser::TryStatementContext::catchClause() {
  return getRuleContext<JavaScriptParser::CatchClauseContext>(0);
}

JavaScriptParser::FinallyClauseContext* JavaScriptParser::TryStatementContext::finallyClause() {
  return getRuleContext<JavaScriptParser::FinallyClauseContext>(0);
}


size_t JavaScriptParser::TryStatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleTryStatement;
}

void JavaScriptParser::TryStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTryStatement(this);
}

void JavaScriptParser::TryStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTryStatement(this);
}

JavaScriptParser::TryStatementContext* JavaScriptParser::tryStatement() {
  TryStatementContext *_localctx = _tracker.createInstance<TryStatementContext>(_ctx, getState());
  enterRule(_localctx, 90, JavaScriptParser::RuleTryStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(689);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(677);
      match(JavaScriptParser::T__34);
      setState(678);
      blockStatement();
      setState(680);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaScriptParser::T__35) {
        setState(679);
        catchClause();
      }
      setState(683);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaScriptParser::T__36) {
        setState(682);
        finallyClause();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(685);
      match(JavaScriptParser::T__34);
      setState(686);
      blockStatement();
      setState(687);
      finallyClause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchClauseContext ------------------------------------------------------------------

JavaScriptParser::CatchClauseContext::CatchClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::BlockStatementContext* JavaScriptParser::CatchClauseContext::blockStatement() {
  return getRuleContext<JavaScriptParser::BlockStatementContext>(0);
}

JavaScriptParser::CatchParameterContext* JavaScriptParser::CatchClauseContext::catchParameter() {
  return getRuleContext<JavaScriptParser::CatchParameterContext>(0);
}


size_t JavaScriptParser::CatchClauseContext::getRuleIndex() const {
  return JavaScriptParser::RuleCatchClause;
}

void JavaScriptParser::CatchClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatchClause(this);
}

void JavaScriptParser::CatchClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatchClause(this);
}

JavaScriptParser::CatchClauseContext* JavaScriptParser::catchClause() {
  CatchClauseContext *_localctx = _tracker.createInstance<CatchClauseContext>(_ctx, getState());
  enterRule(_localctx, 92, JavaScriptParser::RuleCatchClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(691);
    match(JavaScriptParser::T__35);
    setState(696);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__1) {
      setState(692);
      match(JavaScriptParser::T__1);
      setState(693);
      catchParameter();
      setState(694);
      match(JavaScriptParser::T__2);
    }
    setState(698);
    blockStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchParameterContext ------------------------------------------------------------------

JavaScriptParser::CatchParameterContext::CatchParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::BindingIdentifierContext* JavaScriptParser::CatchParameterContext::bindingIdentifier() {
  return getRuleContext<JavaScriptParser::BindingIdentifierContext>(0);
}

JavaScriptParser::BindingPatternContext* JavaScriptParser::CatchParameterContext::bindingPattern() {
  return getRuleContext<JavaScriptParser::BindingPatternContext>(0);
}


size_t JavaScriptParser::CatchParameterContext::getRuleIndex() const {
  return JavaScriptParser::RuleCatchParameter;
}

void JavaScriptParser::CatchParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatchParameter(this);
}

void JavaScriptParser::CatchParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatchParameter(this);
}

JavaScriptParser::CatchParameterContext* JavaScriptParser::catchParameter() {
  CatchParameterContext *_localctx = _tracker.createInstance<CatchParameterContext>(_ctx, getState());
  enterRule(_localctx, 94, JavaScriptParser::RuleCatchParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(702);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser::T__23:
      case JavaScriptParser::T__103:
      case JavaScriptParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(700);
        bindingIdentifier();
        break;
      }

      case JavaScriptParser::T__3:
      case JavaScriptParser::T__90: {
        enterOuterAlt(_localctx, 2);
        setState(701);
        bindingPattern();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FinallyClauseContext ------------------------------------------------------------------

JavaScriptParser::FinallyClauseContext::FinallyClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::BlockStatementContext* JavaScriptParser::FinallyClauseContext::blockStatement() {
  return getRuleContext<JavaScriptParser::BlockStatementContext>(0);
}


size_t JavaScriptParser::FinallyClauseContext::getRuleIndex() const {
  return JavaScriptParser::RuleFinallyClause;
}

void JavaScriptParser::FinallyClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFinallyClause(this);
}

void JavaScriptParser::FinallyClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFinallyClause(this);
}

JavaScriptParser::FinallyClauseContext* JavaScriptParser::finallyClause() {
  FinallyClauseContext *_localctx = _tracker.createInstance<FinallyClauseContext>(_ctx, getState());
  enterRule(_localctx, 96, JavaScriptParser::RuleFinallyClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(704);
    match(JavaScriptParser::T__36);
    setState(705);
    blockStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DebuggerStatementContext ------------------------------------------------------------------

JavaScriptParser::DebuggerStatementContext::DebuggerStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaScriptParser::DebuggerStatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleDebuggerStatement;
}

void JavaScriptParser::DebuggerStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDebuggerStatement(this);
}

void JavaScriptParser::DebuggerStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDebuggerStatement(this);
}

JavaScriptParser::DebuggerStatementContext* JavaScriptParser::debuggerStatement() {
  DebuggerStatementContext *_localctx = _tracker.createInstance<DebuggerStatementContext>(_ctx, getState());
  enterRule(_localctx, 98, JavaScriptParser::RuleDebuggerStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(707);
    match(JavaScriptParser::T__37);
    setState(708);
    match(JavaScriptParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportStatementContext ------------------------------------------------------------------

JavaScriptParser::ImportStatementContext::ImportStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ImportClauseContext* JavaScriptParser::ImportStatementContext::importClause() {
  return getRuleContext<JavaScriptParser::ImportClauseContext>(0);
}

JavaScriptParser::ModuleSpecifierContext* JavaScriptParser::ImportStatementContext::moduleSpecifier() {
  return getRuleContext<JavaScriptParser::ModuleSpecifierContext>(0);
}


size_t JavaScriptParser::ImportStatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleImportStatement;
}

void JavaScriptParser::ImportStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportStatement(this);
}

void JavaScriptParser::ImportStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportStatement(this);
}

JavaScriptParser::ImportStatementContext* JavaScriptParser::importStatement() {
  ImportStatementContext *_localctx = _tracker.createInstance<ImportStatementContext>(_ctx, getState());
  enterRule(_localctx, 100, JavaScriptParser::RuleImportStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(720);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(710);
      match(JavaScriptParser::T__38);
      setState(711);
      importClause();
      setState(712);
      match(JavaScriptParser::T__39);
      setState(713);
      moduleSpecifier();
      setState(714);
      match(JavaScriptParser::T__10);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(716);
      match(JavaScriptParser::T__38);
      setState(717);
      moduleSpecifier();
      setState(718);
      match(JavaScriptParser::T__10);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportClauseContext ------------------------------------------------------------------

JavaScriptParser::ImportClauseContext::ImportClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ImportedDefaultBindingContext* JavaScriptParser::ImportClauseContext::importedDefaultBinding() {
  return getRuleContext<JavaScriptParser::ImportedDefaultBindingContext>(0);
}

JavaScriptParser::NamedImportsContext* JavaScriptParser::ImportClauseContext::namedImports() {
  return getRuleContext<JavaScriptParser::NamedImportsContext>(0);
}

JavaScriptParser::NamespaceImportContext* JavaScriptParser::ImportClauseContext::namespaceImport() {
  return getRuleContext<JavaScriptParser::NamespaceImportContext>(0);
}


size_t JavaScriptParser::ImportClauseContext::getRuleIndex() const {
  return JavaScriptParser::RuleImportClause;
}

void JavaScriptParser::ImportClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportClause(this);
}

void JavaScriptParser::ImportClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportClause(this);
}

JavaScriptParser::ImportClauseContext* JavaScriptParser::importClause() {
  ImportClauseContext *_localctx = _tracker.createInstance<ImportClauseContext>(_ctx, getState());
  enterRule(_localctx, 102, JavaScriptParser::RuleImportClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(733);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(722);
      importedDefaultBinding();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(723);
      namedImports();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(724);
      importedDefaultBinding();
      setState(725);
      match(JavaScriptParser::T__15);
      setState(726);
      namedImports();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(728);
      importedDefaultBinding();
      setState(729);
      match(JavaScriptParser::T__15);
      setState(730);
      namespaceImport();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(732);
      namespaceImport();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportedDefaultBindingContext ------------------------------------------------------------------

JavaScriptParser::ImportedDefaultBindingContext::ImportedDefaultBindingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::BindingIdentifierContext* JavaScriptParser::ImportedDefaultBindingContext::bindingIdentifier() {
  return getRuleContext<JavaScriptParser::BindingIdentifierContext>(0);
}


size_t JavaScriptParser::ImportedDefaultBindingContext::getRuleIndex() const {
  return JavaScriptParser::RuleImportedDefaultBinding;
}

void JavaScriptParser::ImportedDefaultBindingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportedDefaultBinding(this);
}

void JavaScriptParser::ImportedDefaultBindingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportedDefaultBinding(this);
}

JavaScriptParser::ImportedDefaultBindingContext* JavaScriptParser::importedDefaultBinding() {
  ImportedDefaultBindingContext *_localctx = _tracker.createInstance<ImportedDefaultBindingContext>(_ctx, getState());
  enterRule(_localctx, 104, JavaScriptParser::RuleImportedDefaultBinding);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(735);
    bindingIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamespaceImportContext ------------------------------------------------------------------

JavaScriptParser::NamespaceImportContext::NamespaceImportContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::BindingIdentifierContext* JavaScriptParser::NamespaceImportContext::bindingIdentifier() {
  return getRuleContext<JavaScriptParser::BindingIdentifierContext>(0);
}


size_t JavaScriptParser::NamespaceImportContext::getRuleIndex() const {
  return JavaScriptParser::RuleNamespaceImport;
}

void JavaScriptParser::NamespaceImportContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespaceImport(this);
}

void JavaScriptParser::NamespaceImportContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespaceImport(this);
}

JavaScriptParser::NamespaceImportContext* JavaScriptParser::namespaceImport() {
  NamespaceImportContext *_localctx = _tracker.createInstance<NamespaceImportContext>(_ctx, getState());
  enterRule(_localctx, 106, JavaScriptParser::RuleNamespaceImport);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(737);
    match(JavaScriptParser::T__5);
    setState(738);
    match(JavaScriptParser::T__40);
    setState(739);
    bindingIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedImportsContext ------------------------------------------------------------------

JavaScriptParser::NamedImportsContext::NamedImportsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ImportsListContext* JavaScriptParser::NamedImportsContext::importsList() {
  return getRuleContext<JavaScriptParser::ImportsListContext>(0);
}


size_t JavaScriptParser::NamedImportsContext::getRuleIndex() const {
  return JavaScriptParser::RuleNamedImports;
}

void JavaScriptParser::NamedImportsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamedImports(this);
}

void JavaScriptParser::NamedImportsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamedImports(this);
}

JavaScriptParser::NamedImportsContext* JavaScriptParser::namedImports() {
  NamedImportsContext *_localctx = _tracker.createInstance<NamedImportsContext>(_ctx, getState());
  enterRule(_localctx, 108, JavaScriptParser::RuleNamedImports);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(750);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(741);
      match(JavaScriptParser::T__3);
      setState(742);
      match(JavaScriptParser::T__4);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(743);
      match(JavaScriptParser::T__3);
      setState(744);
      importsList();
      setState(746);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaScriptParser::T__15) {
        setState(745);
        match(JavaScriptParser::T__15);
      }
      setState(748);
      match(JavaScriptParser::T__4);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportsListContext ------------------------------------------------------------------

JavaScriptParser::ImportsListContext::ImportsListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::ImportSpecifierContext *> JavaScriptParser::ImportsListContext::importSpecifier() {
  return getRuleContexts<JavaScriptParser::ImportSpecifierContext>();
}

JavaScriptParser::ImportSpecifierContext* JavaScriptParser::ImportsListContext::importSpecifier(size_t i) {
  return getRuleContext<JavaScriptParser::ImportSpecifierContext>(i);
}


size_t JavaScriptParser::ImportsListContext::getRuleIndex() const {
  return JavaScriptParser::RuleImportsList;
}

void JavaScriptParser::ImportsListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportsList(this);
}

void JavaScriptParser::ImportsListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportsList(this);
}

JavaScriptParser::ImportsListContext* JavaScriptParser::importsList() {
  ImportsListContext *_localctx = _tracker.createInstance<ImportsListContext>(_ctx, getState());
  enterRule(_localctx, 110, JavaScriptParser::RuleImportsList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(752);
    importSpecifier();
    setState(757);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(753);
        match(JavaScriptParser::T__15);
        setState(754);
        importSpecifier(); 
      }
      setState(759);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportSpecifierContext ------------------------------------------------------------------

JavaScriptParser::ImportSpecifierContext::ImportSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::BindingIdentifierContext* JavaScriptParser::ImportSpecifierContext::bindingIdentifier() {
  return getRuleContext<JavaScriptParser::BindingIdentifierContext>(0);
}

JavaScriptParser::IdentifierNameContext* JavaScriptParser::ImportSpecifierContext::identifierName() {
  return getRuleContext<JavaScriptParser::IdentifierNameContext>(0);
}


size_t JavaScriptParser::ImportSpecifierContext::getRuleIndex() const {
  return JavaScriptParser::RuleImportSpecifier;
}

void JavaScriptParser::ImportSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportSpecifier(this);
}

void JavaScriptParser::ImportSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportSpecifier(this);
}

JavaScriptParser::ImportSpecifierContext* JavaScriptParser::importSpecifier() {
  ImportSpecifierContext *_localctx = _tracker.createInstance<ImportSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 112, JavaScriptParser::RuleImportSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(765);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(760);
      bindingIdentifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(761);
      identifierName();
      setState(762);
      match(JavaScriptParser::T__40);
      setState(763);
      bindingIdentifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleSpecifierContext ------------------------------------------------------------------

JavaScriptParser::ModuleSpecifierContext::ModuleSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser::ModuleSpecifierContext::STRING_LITERAL() {
  return getToken(JavaScriptParser::STRING_LITERAL, 0);
}


size_t JavaScriptParser::ModuleSpecifierContext::getRuleIndex() const {
  return JavaScriptParser::RuleModuleSpecifier;
}

void JavaScriptParser::ModuleSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleSpecifier(this);
}

void JavaScriptParser::ModuleSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleSpecifier(this);
}

JavaScriptParser::ModuleSpecifierContext* JavaScriptParser::moduleSpecifier() {
  ModuleSpecifierContext *_localctx = _tracker.createInstance<ModuleSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 114, JavaScriptParser::RuleModuleSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(767);
    match(JavaScriptParser::STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportStatementContext ------------------------------------------------------------------

JavaScriptParser::ExportStatementContext::ExportStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ExportClauseContext* JavaScriptParser::ExportStatementContext::exportClause() {
  return getRuleContext<JavaScriptParser::ExportClauseContext>(0);
}

JavaScriptParser::ModuleSpecifierContext* JavaScriptParser::ExportStatementContext::moduleSpecifier() {
  return getRuleContext<JavaScriptParser::ModuleSpecifierContext>(0);
}

JavaScriptParser::VariableStatementContext* JavaScriptParser::ExportStatementContext::variableStatement() {
  return getRuleContext<JavaScriptParser::VariableStatementContext>(0);
}

JavaScriptParser::DeclarationContext* JavaScriptParser::ExportStatementContext::declaration() {
  return getRuleContext<JavaScriptParser::DeclarationContext>(0);
}

JavaScriptParser::HoistableDeclarationContext* JavaScriptParser::ExportStatementContext::hoistableDeclaration() {
  return getRuleContext<JavaScriptParser::HoistableDeclarationContext>(0);
}

JavaScriptParser::ClassDeclarationContext* JavaScriptParser::ExportStatementContext::classDeclaration() {
  return getRuleContext<JavaScriptParser::ClassDeclarationContext>(0);
}

JavaScriptParser::AssignmentExpressionContext* JavaScriptParser::ExportStatementContext::assignmentExpression() {
  return getRuleContext<JavaScriptParser::AssignmentExpressionContext>(0);
}


size_t JavaScriptParser::ExportStatementContext::getRuleIndex() const {
  return JavaScriptParser::RuleExportStatement;
}

void JavaScriptParser::ExportStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExportStatement(this);
}

void JavaScriptParser::ExportStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExportStatement(this);
}

JavaScriptParser::ExportStatementContext* JavaScriptParser::exportStatement() {
  ExportStatementContext *_localctx = _tracker.createInstance<ExportStatementContext>(_ctx, getState());
  enterRule(_localctx, 116, JavaScriptParser::RuleExportStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(794);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(769);
      match(JavaScriptParser::T__41);
      setState(770);
      exportClause();
      setState(771);
      match(JavaScriptParser::T__39);
      setState(772);
      moduleSpecifier();
      setState(773);
      match(JavaScriptParser::T__10);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(775);
      match(JavaScriptParser::T__41);
      setState(776);
      exportClause();
      setState(777);
      match(JavaScriptParser::T__10);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(779);
      match(JavaScriptParser::T__41);
      setState(780);
      variableStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(781);
      match(JavaScriptParser::T__41);
      setState(782);
      declaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(783);
      match(JavaScriptParser::T__41);
      setState(784);
      match(JavaScriptParser::T__32);
      setState(785);
      hoistableDeclaration();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(786);
      match(JavaScriptParser::T__41);
      setState(787);
      match(JavaScriptParser::T__32);
      setState(788);
      classDeclaration();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(789);
      match(JavaScriptParser::T__41);
      setState(790);
      match(JavaScriptParser::T__32);
      setState(791);
      assignmentExpression();
      setState(792);
      match(JavaScriptParser::T__10);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportClauseContext ------------------------------------------------------------------

JavaScriptParser::ExportClauseContext::ExportClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ExportsListContext* JavaScriptParser::ExportClauseContext::exportsList() {
  return getRuleContext<JavaScriptParser::ExportsListContext>(0);
}

JavaScriptParser::IdentifierNameContext* JavaScriptParser::ExportClauseContext::identifierName() {
  return getRuleContext<JavaScriptParser::IdentifierNameContext>(0);
}


size_t JavaScriptParser::ExportClauseContext::getRuleIndex() const {
  return JavaScriptParser::RuleExportClause;
}

void JavaScriptParser::ExportClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExportClause(this);
}

void JavaScriptParser::ExportClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExportClause(this);
}

JavaScriptParser::ExportClauseContext* JavaScriptParser::exportClause() {
  ExportClauseContext *_localctx = _tracker.createInstance<ExportClauseContext>(_ctx, getState());
  enterRule(_localctx, 118, JavaScriptParser::RuleExportClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(809);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(796);
      match(JavaScriptParser::T__3);
      setState(797);
      match(JavaScriptParser::T__4);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(798);
      match(JavaScriptParser::T__3);
      setState(799);
      exportsList();
      setState(801);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaScriptParser::T__15) {
        setState(800);
        match(JavaScriptParser::T__15);
      }
      setState(803);
      match(JavaScriptParser::T__4);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(805);
      match(JavaScriptParser::T__5);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(806);
      match(JavaScriptParser::T__5);
      setState(807);
      match(JavaScriptParser::T__40);
      setState(808);
      identifierName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportsListContext ------------------------------------------------------------------

JavaScriptParser::ExportsListContext::ExportsListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::ExportSpecifierContext *> JavaScriptParser::ExportsListContext::exportSpecifier() {
  return getRuleContexts<JavaScriptParser::ExportSpecifierContext>();
}

JavaScriptParser::ExportSpecifierContext* JavaScriptParser::ExportsListContext::exportSpecifier(size_t i) {
  return getRuleContext<JavaScriptParser::ExportSpecifierContext>(i);
}


size_t JavaScriptParser::ExportsListContext::getRuleIndex() const {
  return JavaScriptParser::RuleExportsList;
}

void JavaScriptParser::ExportsListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExportsList(this);
}

void JavaScriptParser::ExportsListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExportsList(this);
}

JavaScriptParser::ExportsListContext* JavaScriptParser::exportsList() {
  ExportsListContext *_localctx = _tracker.createInstance<ExportsListContext>(_ctx, getState());
  enterRule(_localctx, 120, JavaScriptParser::RuleExportsList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(811);
    exportSpecifier();
    setState(816);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(812);
        match(JavaScriptParser::T__15);
        setState(813);
        exportSpecifier(); 
      }
      setState(818);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportSpecifierContext ------------------------------------------------------------------

JavaScriptParser::ExportSpecifierContext::ExportSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::IdentifierNameContext *> JavaScriptParser::ExportSpecifierContext::identifierName() {
  return getRuleContexts<JavaScriptParser::IdentifierNameContext>();
}

JavaScriptParser::IdentifierNameContext* JavaScriptParser::ExportSpecifierContext::identifierName(size_t i) {
  return getRuleContext<JavaScriptParser::IdentifierNameContext>(i);
}


size_t JavaScriptParser::ExportSpecifierContext::getRuleIndex() const {
  return JavaScriptParser::RuleExportSpecifier;
}

void JavaScriptParser::ExportSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExportSpecifier(this);
}

void JavaScriptParser::ExportSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExportSpecifier(this);
}

JavaScriptParser::ExportSpecifierContext* JavaScriptParser::exportSpecifier() {
  ExportSpecifierContext *_localctx = _tracker.createInstance<ExportSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 122, JavaScriptParser::RuleExportSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(824);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(819);
      identifierName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(820);
      identifierName();
      setState(821);
      match(JavaScriptParser::T__40);
      setState(822);
      identifierName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

JavaScriptParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::AssignmentExpressionContext *> JavaScriptParser::ExpressionContext::assignmentExpression() {
  return getRuleContexts<JavaScriptParser::AssignmentExpressionContext>();
}

JavaScriptParser::AssignmentExpressionContext* JavaScriptParser::ExpressionContext::assignmentExpression(size_t i) {
  return getRuleContext<JavaScriptParser::AssignmentExpressionContext>(i);
}


size_t JavaScriptParser::ExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleExpression;
}

void JavaScriptParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void JavaScriptParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}

JavaScriptParser::ExpressionContext* JavaScriptParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 124, JavaScriptParser::RuleExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(826);
    assignmentExpression();
    setState(831);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaScriptParser::T__15) {
      setState(827);
      match(JavaScriptParser::T__15);
      setState(828);
      assignmentExpression();
      setState(833);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentExpressionContext ------------------------------------------------------------------

JavaScriptParser::AssignmentExpressionContext::AssignmentExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ConditionalExpressionContext* JavaScriptParser::AssignmentExpressionContext::conditionalExpression() {
  return getRuleContext<JavaScriptParser::ConditionalExpressionContext>(0);
}

JavaScriptParser::YieldExpressionContext* JavaScriptParser::AssignmentExpressionContext::yieldExpression() {
  return getRuleContext<JavaScriptParser::YieldExpressionContext>(0);
}

JavaScriptParser::ArrowFunctionContext* JavaScriptParser::AssignmentExpressionContext::arrowFunction() {
  return getRuleContext<JavaScriptParser::ArrowFunctionContext>(0);
}

JavaScriptParser::AsyncArrowFunctionContext* JavaScriptParser::AssignmentExpressionContext::asyncArrowFunction() {
  return getRuleContext<JavaScriptParser::AsyncArrowFunctionContext>(0);
}

JavaScriptParser::LeftHandSideExpressionContext* JavaScriptParser::AssignmentExpressionContext::leftHandSideExpression() {
  return getRuleContext<JavaScriptParser::LeftHandSideExpressionContext>(0);
}

JavaScriptParser::AssignmentOperatorContext* JavaScriptParser::AssignmentExpressionContext::assignmentOperator() {
  return getRuleContext<JavaScriptParser::AssignmentOperatorContext>(0);
}

JavaScriptParser::AssignmentExpressionContext* JavaScriptParser::AssignmentExpressionContext::assignmentExpression() {
  return getRuleContext<JavaScriptParser::AssignmentExpressionContext>(0);
}


size_t JavaScriptParser::AssignmentExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleAssignmentExpression;
}

void JavaScriptParser::AssignmentExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentExpression(this);
}

void JavaScriptParser::AssignmentExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentExpression(this);
}

JavaScriptParser::AssignmentExpressionContext* JavaScriptParser::assignmentExpression() {
  AssignmentExpressionContext *_localctx = _tracker.createInstance<AssignmentExpressionContext>(_ctx, getState());
  enterRule(_localctx, 126, JavaScriptParser::RuleAssignmentExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(842);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(834);
      conditionalExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(835);
      yieldExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(836);
      arrowFunction();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(837);
      asyncArrowFunction();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(838);
      leftHandSideExpression();
      setState(839);
      assignmentOperator();
      setState(840);
      assignmentExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentOperatorContext ------------------------------------------------------------------

JavaScriptParser::AssignmentOperatorContext::AssignmentOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaScriptParser::AssignmentOperatorContext::getRuleIndex() const {
  return JavaScriptParser::RuleAssignmentOperator;
}

void JavaScriptParser::AssignmentOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentOperator(this);
}

void JavaScriptParser::AssignmentOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentOperator(this);
}

JavaScriptParser::AssignmentOperatorContext* JavaScriptParser::assignmentOperator() {
  AssignmentOperatorContext *_localctx = _tracker.createInstance<AssignmentOperatorContext>(_ctx, getState());
  enterRule(_localctx, 128, JavaScriptParser::RuleAssignmentOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(844);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 576451956210401280) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalExpressionContext ------------------------------------------------------------------

JavaScriptParser::ConditionalExpressionContext::ConditionalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::CoalesceExpressionContext* JavaScriptParser::ConditionalExpressionContext::coalesceExpression() {
  return getRuleContext<JavaScriptParser::CoalesceExpressionContext>(0);
}

std::vector<JavaScriptParser::AssignmentExpressionContext *> JavaScriptParser::ConditionalExpressionContext::assignmentExpression() {
  return getRuleContexts<JavaScriptParser::AssignmentExpressionContext>();
}

JavaScriptParser::AssignmentExpressionContext* JavaScriptParser::ConditionalExpressionContext::assignmentExpression(size_t i) {
  return getRuleContext<JavaScriptParser::AssignmentExpressionContext>(i);
}


size_t JavaScriptParser::ConditionalExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleConditionalExpression;
}

void JavaScriptParser::ConditionalExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionalExpression(this);
}

void JavaScriptParser::ConditionalExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionalExpression(this);
}

JavaScriptParser::ConditionalExpressionContext* JavaScriptParser::conditionalExpression() {
  ConditionalExpressionContext *_localctx = _tracker.createInstance<ConditionalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 130, JavaScriptParser::RuleConditionalExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(846);
    coalesceExpression();
    setState(852);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__58) {
      setState(847);
      match(JavaScriptParser::T__58);
      setState(848);
      assignmentExpression();
      setState(849);
      match(JavaScriptParser::T__29);
      setState(850);
      assignmentExpression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CoalesceExpressionContext ------------------------------------------------------------------

JavaScriptParser::CoalesceExpressionContext::CoalesceExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::LogicalORExpressionContext* JavaScriptParser::CoalesceExpressionContext::logicalORExpression() {
  return getRuleContext<JavaScriptParser::LogicalORExpressionContext>(0);
}

JavaScriptParser::CoalesceExpressionContext* JavaScriptParser::CoalesceExpressionContext::coalesceExpression() {
  return getRuleContext<JavaScriptParser::CoalesceExpressionContext>(0);
}


size_t JavaScriptParser::CoalesceExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleCoalesceExpression;
}

void JavaScriptParser::CoalesceExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCoalesceExpression(this);
}

void JavaScriptParser::CoalesceExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCoalesceExpression(this);
}

JavaScriptParser::CoalesceExpressionContext* JavaScriptParser::coalesceExpression() {
  CoalesceExpressionContext *_localctx = _tracker.createInstance<CoalesceExpressionContext>(_ctx, getState());
  enterRule(_localctx, 132, JavaScriptParser::RuleCoalesceExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(854);
    logicalORExpression();
    setState(857);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__59) {
      setState(855);
      match(JavaScriptParser::T__59);
      setState(856);
      coalesceExpression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LogicalORExpressionContext ------------------------------------------------------------------

JavaScriptParser::LogicalORExpressionContext::LogicalORExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::LogicalANDExpressionContext *> JavaScriptParser::LogicalORExpressionContext::logicalANDExpression() {
  return getRuleContexts<JavaScriptParser::LogicalANDExpressionContext>();
}

JavaScriptParser::LogicalANDExpressionContext* JavaScriptParser::LogicalORExpressionContext::logicalANDExpression(size_t i) {
  return getRuleContext<JavaScriptParser::LogicalANDExpressionContext>(i);
}


size_t JavaScriptParser::LogicalORExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleLogicalORExpression;
}

void JavaScriptParser::LogicalORExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalORExpression(this);
}

void JavaScriptParser::LogicalORExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalORExpression(this);
}

JavaScriptParser::LogicalORExpressionContext* JavaScriptParser::logicalORExpression() {
  LogicalORExpressionContext *_localctx = _tracker.createInstance<LogicalORExpressionContext>(_ctx, getState());
  enterRule(_localctx, 134, JavaScriptParser::RuleLogicalORExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(859);
    logicalANDExpression();
    setState(864);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaScriptParser::T__60) {
      setState(860);
      match(JavaScriptParser::T__60);
      setState(861);
      logicalANDExpression();
      setState(866);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LogicalANDExpressionContext ------------------------------------------------------------------

JavaScriptParser::LogicalANDExpressionContext::LogicalANDExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::BitwiseORExpressionContext *> JavaScriptParser::LogicalANDExpressionContext::bitwiseORExpression() {
  return getRuleContexts<JavaScriptParser::BitwiseORExpressionContext>();
}

JavaScriptParser::BitwiseORExpressionContext* JavaScriptParser::LogicalANDExpressionContext::bitwiseORExpression(size_t i) {
  return getRuleContext<JavaScriptParser::BitwiseORExpressionContext>(i);
}


size_t JavaScriptParser::LogicalANDExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleLogicalANDExpression;
}

void JavaScriptParser::LogicalANDExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalANDExpression(this);
}

void JavaScriptParser::LogicalANDExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalANDExpression(this);
}

JavaScriptParser::LogicalANDExpressionContext* JavaScriptParser::logicalANDExpression() {
  LogicalANDExpressionContext *_localctx = _tracker.createInstance<LogicalANDExpressionContext>(_ctx, getState());
  enterRule(_localctx, 136, JavaScriptParser::RuleLogicalANDExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(867);
    bitwiseORExpression();
    setState(872);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaScriptParser::T__61) {
      setState(868);
      match(JavaScriptParser::T__61);
      setState(869);
      bitwiseORExpression();
      setState(874);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitwiseORExpressionContext ------------------------------------------------------------------

JavaScriptParser::BitwiseORExpressionContext::BitwiseORExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::BitwiseXORExpressionContext *> JavaScriptParser::BitwiseORExpressionContext::bitwiseXORExpression() {
  return getRuleContexts<JavaScriptParser::BitwiseXORExpressionContext>();
}

JavaScriptParser::BitwiseXORExpressionContext* JavaScriptParser::BitwiseORExpressionContext::bitwiseXORExpression(size_t i) {
  return getRuleContext<JavaScriptParser::BitwiseXORExpressionContext>(i);
}


size_t JavaScriptParser::BitwiseORExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleBitwiseORExpression;
}

void JavaScriptParser::BitwiseORExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwiseORExpression(this);
}

void JavaScriptParser::BitwiseORExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwiseORExpression(this);
}

JavaScriptParser::BitwiseORExpressionContext* JavaScriptParser::bitwiseORExpression() {
  BitwiseORExpressionContext *_localctx = _tracker.createInstance<BitwiseORExpressionContext>(_ctx, getState());
  enterRule(_localctx, 138, JavaScriptParser::RuleBitwiseORExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(875);
    bitwiseXORExpression();
    setState(880);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaScriptParser::T__62) {
      setState(876);
      match(JavaScriptParser::T__62);
      setState(877);
      bitwiseXORExpression();
      setState(882);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitwiseXORExpressionContext ------------------------------------------------------------------

JavaScriptParser::BitwiseXORExpressionContext::BitwiseXORExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::BitwiseANDExpressionContext *> JavaScriptParser::BitwiseXORExpressionContext::bitwiseANDExpression() {
  return getRuleContexts<JavaScriptParser::BitwiseANDExpressionContext>();
}

JavaScriptParser::BitwiseANDExpressionContext* JavaScriptParser::BitwiseXORExpressionContext::bitwiseANDExpression(size_t i) {
  return getRuleContext<JavaScriptParser::BitwiseANDExpressionContext>(i);
}


size_t JavaScriptParser::BitwiseXORExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleBitwiseXORExpression;
}

void JavaScriptParser::BitwiseXORExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwiseXORExpression(this);
}

void JavaScriptParser::BitwiseXORExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwiseXORExpression(this);
}

JavaScriptParser::BitwiseXORExpressionContext* JavaScriptParser::bitwiseXORExpression() {
  BitwiseXORExpressionContext *_localctx = _tracker.createInstance<BitwiseXORExpressionContext>(_ctx, getState());
  enterRule(_localctx, 140, JavaScriptParser::RuleBitwiseXORExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(883);
    bitwiseANDExpression();
    setState(888);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaScriptParser::T__63) {
      setState(884);
      match(JavaScriptParser::T__63);
      setState(885);
      bitwiseANDExpression();
      setState(890);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitwiseANDExpressionContext ------------------------------------------------------------------

JavaScriptParser::BitwiseANDExpressionContext::BitwiseANDExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::EqualityExpressionContext *> JavaScriptParser::BitwiseANDExpressionContext::equalityExpression() {
  return getRuleContexts<JavaScriptParser::EqualityExpressionContext>();
}

JavaScriptParser::EqualityExpressionContext* JavaScriptParser::BitwiseANDExpressionContext::equalityExpression(size_t i) {
  return getRuleContext<JavaScriptParser::EqualityExpressionContext>(i);
}


size_t JavaScriptParser::BitwiseANDExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleBitwiseANDExpression;
}

void JavaScriptParser::BitwiseANDExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwiseANDExpression(this);
}

void JavaScriptParser::BitwiseANDExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwiseANDExpression(this);
}

JavaScriptParser::BitwiseANDExpressionContext* JavaScriptParser::bitwiseANDExpression() {
  BitwiseANDExpressionContext *_localctx = _tracker.createInstance<BitwiseANDExpressionContext>(_ctx, getState());
  enterRule(_localctx, 142, JavaScriptParser::RuleBitwiseANDExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(891);
    equalityExpression();
    setState(896);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaScriptParser::T__64) {
      setState(892);
      match(JavaScriptParser::T__64);
      setState(893);
      equalityExpression();
      setState(898);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EqualityExpressionContext ------------------------------------------------------------------

JavaScriptParser::EqualityExpressionContext::EqualityExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::RelationalExpressionContext *> JavaScriptParser::EqualityExpressionContext::relationalExpression() {
  return getRuleContexts<JavaScriptParser::RelationalExpressionContext>();
}

JavaScriptParser::RelationalExpressionContext* JavaScriptParser::EqualityExpressionContext::relationalExpression(size_t i) {
  return getRuleContext<JavaScriptParser::RelationalExpressionContext>(i);
}


size_t JavaScriptParser::EqualityExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleEqualityExpression;
}

void JavaScriptParser::EqualityExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEqualityExpression(this);
}

void JavaScriptParser::EqualityExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEqualityExpression(this);
}

JavaScriptParser::EqualityExpressionContext* JavaScriptParser::equalityExpression() {
  EqualityExpressionContext *_localctx = _tracker.createInstance<EqualityExpressionContext>(_ctx, getState());
  enterRule(_localctx, 144, JavaScriptParser::RuleEqualityExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(899);
    relationalExpression();
    setState(904);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & 15) != 0)) {
      setState(900);
      _la = _input->LA(1);
      if (!(((((_la - 66) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 66)) & 15) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(901);
      relationalExpression();
      setState(906);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationalExpressionContext ------------------------------------------------------------------

JavaScriptParser::RelationalExpressionContext::RelationalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::ShiftExpressionContext *> JavaScriptParser::RelationalExpressionContext::shiftExpression() {
  return getRuleContexts<JavaScriptParser::ShiftExpressionContext>();
}

JavaScriptParser::ShiftExpressionContext* JavaScriptParser::RelationalExpressionContext::shiftExpression(size_t i) {
  return getRuleContext<JavaScriptParser::ShiftExpressionContext>(i);
}


size_t JavaScriptParser::RelationalExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleRelationalExpression;
}

void JavaScriptParser::RelationalExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationalExpression(this);
}

void JavaScriptParser::RelationalExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationalExpression(this);
}

JavaScriptParser::RelationalExpressionContext* JavaScriptParser::relationalExpression() {
  RelationalExpressionContext *_localctx = _tracker.createInstance<RelationalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 146, JavaScriptParser::RuleRelationalExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(907);
    shiftExpression();
    setState(912);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(908);
        _la = _input->LA(1);
        if (!(((((_la - 23) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 23)) & 4362862139015169) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(909);
        shiftExpression(); 
      }
      setState(914);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShiftExpressionContext ------------------------------------------------------------------

JavaScriptParser::ShiftExpressionContext::ShiftExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::AdditiveExpressionContext *> JavaScriptParser::ShiftExpressionContext::additiveExpression() {
  return getRuleContexts<JavaScriptParser::AdditiveExpressionContext>();
}

JavaScriptParser::AdditiveExpressionContext* JavaScriptParser::ShiftExpressionContext::additiveExpression(size_t i) {
  return getRuleContext<JavaScriptParser::AdditiveExpressionContext>(i);
}


size_t JavaScriptParser::ShiftExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleShiftExpression;
}

void JavaScriptParser::ShiftExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShiftExpression(this);
}

void JavaScriptParser::ShiftExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShiftExpression(this);
}

JavaScriptParser::ShiftExpressionContext* JavaScriptParser::shiftExpression() {
  ShiftExpressionContext *_localctx = _tracker.createInstance<ShiftExpressionContext>(_ctx, getState());
  enterRule(_localctx, 148, JavaScriptParser::RuleShiftExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(915);
    additiveExpression();
    setState(920);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 7) != 0)) {
      setState(916);
      _la = _input->LA(1);
      if (!(((((_la - 75) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 75)) & 7) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(917);
      additiveExpression();
      setState(922);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AdditiveExpressionContext ------------------------------------------------------------------

JavaScriptParser::AdditiveExpressionContext::AdditiveExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::MultiplicativeExpressionContext *> JavaScriptParser::AdditiveExpressionContext::multiplicativeExpression() {
  return getRuleContexts<JavaScriptParser::MultiplicativeExpressionContext>();
}

JavaScriptParser::MultiplicativeExpressionContext* JavaScriptParser::AdditiveExpressionContext::multiplicativeExpression(size_t i) {
  return getRuleContext<JavaScriptParser::MultiplicativeExpressionContext>(i);
}


size_t JavaScriptParser::AdditiveExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleAdditiveExpression;
}

void JavaScriptParser::AdditiveExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditiveExpression(this);
}

void JavaScriptParser::AdditiveExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditiveExpression(this);
}

JavaScriptParser::AdditiveExpressionContext* JavaScriptParser::additiveExpression() {
  AdditiveExpressionContext *_localctx = _tracker.createInstance<AdditiveExpressionContext>(_ctx, getState());
  enterRule(_localctx, 150, JavaScriptParser::RuleAdditiveExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(923);
    multiplicativeExpression();
    setState(928);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaScriptParser::T__77

    || _la == JavaScriptParser::T__78) {
      setState(924);
      _la = _input->LA(1);
      if (!(_la == JavaScriptParser::T__77

      || _la == JavaScriptParser::T__78)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(925);
      multiplicativeExpression();
      setState(930);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicativeExpressionContext ------------------------------------------------------------------

JavaScriptParser::MultiplicativeExpressionContext::MultiplicativeExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::ExponentiationExpressionContext *> JavaScriptParser::MultiplicativeExpressionContext::exponentiationExpression() {
  return getRuleContexts<JavaScriptParser::ExponentiationExpressionContext>();
}

JavaScriptParser::ExponentiationExpressionContext* JavaScriptParser::MultiplicativeExpressionContext::exponentiationExpression(size_t i) {
  return getRuleContext<JavaScriptParser::ExponentiationExpressionContext>(i);
}


size_t JavaScriptParser::MultiplicativeExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleMultiplicativeExpression;
}

void JavaScriptParser::MultiplicativeExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicativeExpression(this);
}

void JavaScriptParser::MultiplicativeExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicativeExpression(this);
}

JavaScriptParser::MultiplicativeExpressionContext* JavaScriptParser::multiplicativeExpression() {
  MultiplicativeExpressionContext *_localctx = _tracker.createInstance<MultiplicativeExpressionContext>(_ctx, getState());
  enterRule(_localctx, 152, JavaScriptParser::RuleMultiplicativeExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(931);
    exponentiationExpression();
    setState(936);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(932);
        _la = _input->LA(1);
        if (!(_la == JavaScriptParser::T__5 || _la == JavaScriptParser::T__79

        || _la == JavaScriptParser::T__80)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(933);
        exponentiationExpression(); 
      }
      setState(938);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExponentiationExpressionContext ------------------------------------------------------------------

JavaScriptParser::ExponentiationExpressionContext::ExponentiationExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::UnaryExpressionContext* JavaScriptParser::ExponentiationExpressionContext::unaryExpression() {
  return getRuleContext<JavaScriptParser::UnaryExpressionContext>(0);
}

JavaScriptParser::ExponentiationExpressionContext* JavaScriptParser::ExponentiationExpressionContext::exponentiationExpression() {
  return getRuleContext<JavaScriptParser::ExponentiationExpressionContext>(0);
}


size_t JavaScriptParser::ExponentiationExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleExponentiationExpression;
}

void JavaScriptParser::ExponentiationExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExponentiationExpression(this);
}

void JavaScriptParser::ExponentiationExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExponentiationExpression(this);
}

JavaScriptParser::ExponentiationExpressionContext* JavaScriptParser::exponentiationExpression() {
  ExponentiationExpressionContext *_localctx = _tracker.createInstance<ExponentiationExpressionContext>(_ctx, getState());
  enterRule(_localctx, 154, JavaScriptParser::RuleExponentiationExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(939);
    unaryExpression();
    setState(942);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__81) {
      setState(940);
      match(JavaScriptParser::T__81);
      setState(941);
      exponentiationExpression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryExpressionContext ------------------------------------------------------------------

JavaScriptParser::UnaryExpressionContext::UnaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::UpdateExpressionContext* JavaScriptParser::UnaryExpressionContext::updateExpression() {
  return getRuleContext<JavaScriptParser::UpdateExpressionContext>(0);
}

JavaScriptParser::UnaryExpressionContext* JavaScriptParser::UnaryExpressionContext::unaryExpression() {
  return getRuleContext<JavaScriptParser::UnaryExpressionContext>(0);
}


size_t JavaScriptParser::UnaryExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleUnaryExpression;
}

void JavaScriptParser::UnaryExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryExpression(this);
}

void JavaScriptParser::UnaryExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryExpression(this);
}

JavaScriptParser::UnaryExpressionContext* JavaScriptParser::unaryExpression() {
  UnaryExpressionContext *_localctx = _tracker.createInstance<UnaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 156, JavaScriptParser::RuleUnaryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(961);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(944);
      updateExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(945);
      match(JavaScriptParser::T__82);
      setState(946);
      unaryExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(947);
      match(JavaScriptParser::T__83);
      setState(948);
      unaryExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(949);
      match(JavaScriptParser::T__84);
      setState(950);
      unaryExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(951);
      match(JavaScriptParser::T__77);
      setState(952);
      unaryExpression();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(953);
      match(JavaScriptParser::T__78);
      setState(954);
      unaryExpression();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(955);
      match(JavaScriptParser::T__85);
      setState(956);
      unaryExpression();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(957);
      match(JavaScriptParser::T__86);
      setState(958);
      unaryExpression();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(959);
      match(JavaScriptParser::T__23);
      setState(960);
      unaryExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UpdateExpressionContext ------------------------------------------------------------------

JavaScriptParser::UpdateExpressionContext::UpdateExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::LeftHandSideExpressionContext* JavaScriptParser::UpdateExpressionContext::leftHandSideExpression() {
  return getRuleContext<JavaScriptParser::LeftHandSideExpressionContext>(0);
}

JavaScriptParser::UnaryExpressionContext* JavaScriptParser::UpdateExpressionContext::unaryExpression() {
  return getRuleContext<JavaScriptParser::UnaryExpressionContext>(0);
}


size_t JavaScriptParser::UpdateExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleUpdateExpression;
}

void JavaScriptParser::UpdateExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpdateExpression(this);
}

void JavaScriptParser::UpdateExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpdateExpression(this);
}

JavaScriptParser::UpdateExpressionContext* JavaScriptParser::updateExpression() {
  UpdateExpressionContext *_localctx = _tracker.createInstance<UpdateExpressionContext>(_ctx, getState());
  enterRule(_localctx, 158, JavaScriptParser::RuleUpdateExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(974);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(963);
      leftHandSideExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(964);
      leftHandSideExpression();
      setState(965);
      match(JavaScriptParser::T__87);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(967);
      leftHandSideExpression();
      setState(968);
      match(JavaScriptParser::T__88);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(970);
      match(JavaScriptParser::T__87);
      setState(971);
      unaryExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(972);
      match(JavaScriptParser::T__88);
      setState(973);
      unaryExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LeftHandSideExpressionContext ------------------------------------------------------------------

JavaScriptParser::LeftHandSideExpressionContext::LeftHandSideExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::NewExpressionContext* JavaScriptParser::LeftHandSideExpressionContext::newExpression() {
  return getRuleContext<JavaScriptParser::NewExpressionContext>(0);
}

JavaScriptParser::CallExpressionContext* JavaScriptParser::LeftHandSideExpressionContext::callExpression() {
  return getRuleContext<JavaScriptParser::CallExpressionContext>(0);
}


size_t JavaScriptParser::LeftHandSideExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleLeftHandSideExpression;
}

void JavaScriptParser::LeftHandSideExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLeftHandSideExpression(this);
}

void JavaScriptParser::LeftHandSideExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLeftHandSideExpression(this);
}

JavaScriptParser::LeftHandSideExpressionContext* JavaScriptParser::leftHandSideExpression() {
  LeftHandSideExpressionContext *_localctx = _tracker.createInstance<LeftHandSideExpressionContext>(_ctx, getState());
  enterRule(_localctx, 160, JavaScriptParser::RuleLeftHandSideExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(978);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(976);
      newExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(977);
      callExpression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NewExpressionContext ------------------------------------------------------------------

JavaScriptParser::NewExpressionContext::NewExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::MemberExpressionContext* JavaScriptParser::NewExpressionContext::memberExpression() {
  return getRuleContext<JavaScriptParser::MemberExpressionContext>(0);
}

JavaScriptParser::NewExpressionContext* JavaScriptParser::NewExpressionContext::newExpression() {
  return getRuleContext<JavaScriptParser::NewExpressionContext>(0);
}


size_t JavaScriptParser::NewExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleNewExpression;
}

void JavaScriptParser::NewExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNewExpression(this);
}

void JavaScriptParser::NewExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNewExpression(this);
}

JavaScriptParser::NewExpressionContext* JavaScriptParser::newExpression() {
  NewExpressionContext *_localctx = _tracker.createInstance<NewExpressionContext>(_ctx, getState());
  enterRule(_localctx, 162, JavaScriptParser::RuleNewExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(983);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(980);
      memberExpression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(981);
      match(JavaScriptParser::T__89);
      setState(982);
      newExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallExpressionContext ------------------------------------------------------------------

JavaScriptParser::CallExpressionContext::CallExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::MemberExpressionContext* JavaScriptParser::CallExpressionContext::memberExpression() {
  return getRuleContext<JavaScriptParser::MemberExpressionContext>(0);
}

JavaScriptParser::ArgumentsContext* JavaScriptParser::CallExpressionContext::arguments() {
  return getRuleContext<JavaScriptParser::ArgumentsContext>(0);
}

JavaScriptParser::SuperCallContext* JavaScriptParser::CallExpressionContext::superCall() {
  return getRuleContext<JavaScriptParser::SuperCallContext>(0);
}

JavaScriptParser::ImportCallContext* JavaScriptParser::CallExpressionContext::importCall() {
  return getRuleContext<JavaScriptParser::ImportCallContext>(0);
}

JavaScriptParser::CallExpressionContext* JavaScriptParser::CallExpressionContext::callExpression() {
  return getRuleContext<JavaScriptParser::CallExpressionContext>(0);
}

JavaScriptParser::ExpressionContext* JavaScriptParser::CallExpressionContext::expression() {
  return getRuleContext<JavaScriptParser::ExpressionContext>(0);
}

JavaScriptParser::IdentifierNameContext* JavaScriptParser::CallExpressionContext::identifierName() {
  return getRuleContext<JavaScriptParser::IdentifierNameContext>(0);
}

JavaScriptParser::TemplateLiteralContext* JavaScriptParser::CallExpressionContext::templateLiteral() {
  return getRuleContext<JavaScriptParser::TemplateLiteralContext>(0);
}


size_t JavaScriptParser::CallExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleCallExpression;
}

void JavaScriptParser::CallExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCallExpression(this);
}

void JavaScriptParser::CallExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCallExpression(this);
}


JavaScriptParser::CallExpressionContext* JavaScriptParser::callExpression() {
   return callExpression(0);
}

JavaScriptParser::CallExpressionContext* JavaScriptParser::callExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaScriptParser::CallExpressionContext *_localctx = _tracker.createInstance<CallExpressionContext>(_ctx, parentState);
  JavaScriptParser::CallExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 164;
  enterRecursionRule(_localctx, 164, JavaScriptParser::RuleCallExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(991);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
    case 1: {
      setState(986);
      memberExpression(0);
      setState(987);
      arguments();
      break;
    }

    case 2: {
      setState(989);
      superCall();
      break;
    }

    case 3: {
      setState(990);
      importCall();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1016);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1014);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<CallExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleCallExpression);
          setState(993);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(994);
          arguments();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<CallExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleCallExpression);
          setState(995);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(996);
          match(JavaScriptParser::T__90);
          setState(997);
          expression();
          setState(998);
          match(JavaScriptParser::T__91);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<CallExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleCallExpression);
          setState(1000);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(1001);
          match(JavaScriptParser::T__92);
          setState(1002);
          identifierName();
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<CallExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleCallExpression);
          setState(1003);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(1004);
          templateLiteral();
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<CallExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleCallExpression);
          setState(1005);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(1006);
          match(JavaScriptParser::T__93);
          setState(1007);
          identifierName();
          break;
        }

        case 6: {
          _localctx = _tracker.createInstance<CallExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleCallExpression);
          setState(1008);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(1009);
          match(JavaScriptParser::T__93);
          setState(1010);
          match(JavaScriptParser::T__90);
          setState(1011);
          expression();
          setState(1012);
          match(JavaScriptParser::T__91);
          break;
        }

        default:
          break;
        } 
      }
      setState(1018);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- SuperCallContext ------------------------------------------------------------------

JavaScriptParser::SuperCallContext::SuperCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ArgumentsContext* JavaScriptParser::SuperCallContext::arguments() {
  return getRuleContext<JavaScriptParser::ArgumentsContext>(0);
}


size_t JavaScriptParser::SuperCallContext::getRuleIndex() const {
  return JavaScriptParser::RuleSuperCall;
}

void JavaScriptParser::SuperCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuperCall(this);
}

void JavaScriptParser::SuperCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuperCall(this);
}

JavaScriptParser::SuperCallContext* JavaScriptParser::superCall() {
  SuperCallContext *_localctx = _tracker.createInstance<SuperCallContext>(_ctx, getState());
  enterRule(_localctx, 166, JavaScriptParser::RuleSuperCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1019);
    match(JavaScriptParser::T__94);
    setState(1020);
    arguments();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportCallContext ------------------------------------------------------------------

JavaScriptParser::ImportCallContext::ImportCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::AssignmentExpressionContext* JavaScriptParser::ImportCallContext::assignmentExpression() {
  return getRuleContext<JavaScriptParser::AssignmentExpressionContext>(0);
}


size_t JavaScriptParser::ImportCallContext::getRuleIndex() const {
  return JavaScriptParser::RuleImportCall;
}

void JavaScriptParser::ImportCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportCall(this);
}

void JavaScriptParser::ImportCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportCall(this);
}

JavaScriptParser::ImportCallContext* JavaScriptParser::importCall() {
  ImportCallContext *_localctx = _tracker.createInstance<ImportCallContext>(_ctx, getState());
  enterRule(_localctx, 168, JavaScriptParser::RuleImportCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1022);
    match(JavaScriptParser::T__38);
    setState(1023);
    match(JavaScriptParser::T__1);
    setState(1024);
    assignmentExpression();
    setState(1025);
    match(JavaScriptParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentsContext ------------------------------------------------------------------

JavaScriptParser::ArgumentsContext::ArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ArgumentListContext* JavaScriptParser::ArgumentsContext::argumentList() {
  return getRuleContext<JavaScriptParser::ArgumentListContext>(0);
}


size_t JavaScriptParser::ArgumentsContext::getRuleIndex() const {
  return JavaScriptParser::RuleArguments;
}

void JavaScriptParser::ArgumentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArguments(this);
}

void JavaScriptParser::ArgumentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArguments(this);
}

JavaScriptParser::ArgumentsContext* JavaScriptParser::arguments() {
  ArgumentsContext *_localctx = _tracker.createInstance<ArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 170, JavaScriptParser::RuleArguments);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1027);
    match(JavaScriptParser::T__1);
    setState(1029);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 549772591510) != 0) || ((((_la - 78) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 78)) & 53841943216099) != 0)) {
      setState(1028);
      argumentList();
    }
    setState(1031);
    match(JavaScriptParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentListContext ------------------------------------------------------------------

JavaScriptParser::ArgumentListContext::ArgumentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::ArgumentContext *> JavaScriptParser::ArgumentListContext::argument() {
  return getRuleContexts<JavaScriptParser::ArgumentContext>();
}

JavaScriptParser::ArgumentContext* JavaScriptParser::ArgumentListContext::argument(size_t i) {
  return getRuleContext<JavaScriptParser::ArgumentContext>(i);
}


size_t JavaScriptParser::ArgumentListContext::getRuleIndex() const {
  return JavaScriptParser::RuleArgumentList;
}

void JavaScriptParser::ArgumentListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgumentList(this);
}

void JavaScriptParser::ArgumentListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgumentList(this);
}

JavaScriptParser::ArgumentListContext* JavaScriptParser::argumentList() {
  ArgumentListContext *_localctx = _tracker.createInstance<ArgumentListContext>(_ctx, getState());
  enterRule(_localctx, 172, JavaScriptParser::RuleArgumentList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1033);
    argument();
    setState(1038);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaScriptParser::T__15) {
      setState(1034);
      match(JavaScriptParser::T__15);
      setState(1035);
      argument();
      setState(1040);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentContext ------------------------------------------------------------------

JavaScriptParser::ArgumentContext::ArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::AssignmentExpressionContext* JavaScriptParser::ArgumentContext::assignmentExpression() {
  return getRuleContext<JavaScriptParser::AssignmentExpressionContext>(0);
}


size_t JavaScriptParser::ArgumentContext::getRuleIndex() const {
  return JavaScriptParser::RuleArgument;
}

void JavaScriptParser::ArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument(this);
}

void JavaScriptParser::ArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument(this);
}

JavaScriptParser::ArgumentContext* JavaScriptParser::argument() {
  ArgumentContext *_localctx = _tracker.createInstance<ArgumentContext>(_ctx, getState());
  enterRule(_localctx, 174, JavaScriptParser::RuleArgument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1044);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser::T__0:
      case JavaScriptParser::T__1:
      case JavaScriptParser::T__3:
      case JavaScriptParser::T__6:
      case JavaScriptParser::T__7:
      case JavaScriptParser::T__23:
      case JavaScriptParser::T__38:
      case JavaScriptParser::T__77:
      case JavaScriptParser::T__78:
      case JavaScriptParser::T__82:
      case JavaScriptParser::T__83:
      case JavaScriptParser::T__84:
      case JavaScriptParser::T__85:
      case JavaScriptParser::T__86:
      case JavaScriptParser::T__87:
      case JavaScriptParser::T__88:
      case JavaScriptParser::T__89:
      case JavaScriptParser::T__90:
      case JavaScriptParser::T__94:
      case JavaScriptParser::T__98:
      case JavaScriptParser::T__99:
      case JavaScriptParser::T__100:
      case JavaScriptParser::T__101:
      case JavaScriptParser::T__103:
      case JavaScriptParser::T__104:
      case JavaScriptParser::DECIMAL_LITERAL:
      case JavaScriptParser::BINARY_LITERAL:
      case JavaScriptParser::OCTAL_LITERAL:
      case JavaScriptParser::HEX_LITERAL:
      case JavaScriptParser::STRING_LITERAL:
      case JavaScriptParser::REGEX_LITERAL:
      case JavaScriptParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1041);
        assignmentExpression();
        break;
      }

      case JavaScriptParser::T__95: {
        enterOuterAlt(_localctx, 2);
        setState(1042);
        match(JavaScriptParser::T__95);
        setState(1043);
        assignmentExpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemberExpressionContext ------------------------------------------------------------------

JavaScriptParser::MemberExpressionContext::MemberExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::PrimaryExpressionContext* JavaScriptParser::MemberExpressionContext::primaryExpression() {
  return getRuleContext<JavaScriptParser::PrimaryExpressionContext>(0);
}

JavaScriptParser::ExpressionContext* JavaScriptParser::MemberExpressionContext::expression() {
  return getRuleContext<JavaScriptParser::ExpressionContext>(0);
}

JavaScriptParser::IdentifierNameContext* JavaScriptParser::MemberExpressionContext::identifierName() {
  return getRuleContext<JavaScriptParser::IdentifierNameContext>(0);
}

JavaScriptParser::MetaPropertyContext* JavaScriptParser::MemberExpressionContext::metaProperty() {
  return getRuleContext<JavaScriptParser::MetaPropertyContext>(0);
}

JavaScriptParser::MemberExpressionContext* JavaScriptParser::MemberExpressionContext::memberExpression() {
  return getRuleContext<JavaScriptParser::MemberExpressionContext>(0);
}

JavaScriptParser::ArgumentsContext* JavaScriptParser::MemberExpressionContext::arguments() {
  return getRuleContext<JavaScriptParser::ArgumentsContext>(0);
}

JavaScriptParser::TemplateLiteralContext* JavaScriptParser::MemberExpressionContext::templateLiteral() {
  return getRuleContext<JavaScriptParser::TemplateLiteralContext>(0);
}


size_t JavaScriptParser::MemberExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleMemberExpression;
}

void JavaScriptParser::MemberExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemberExpression(this);
}

void JavaScriptParser::MemberExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemberExpression(this);
}


JavaScriptParser::MemberExpressionContext* JavaScriptParser::memberExpression() {
   return memberExpression(0);
}

JavaScriptParser::MemberExpressionContext* JavaScriptParser::memberExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaScriptParser::MemberExpressionContext *_localctx = _tracker.createInstance<MemberExpressionContext>(_ctx, parentState);
  JavaScriptParser::MemberExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 176;
  enterRecursionRule(_localctx, 176, JavaScriptParser::RuleMemberExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1061);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      setState(1047);
      primaryExpression();
      break;
    }

    case 2: {
      setState(1048);
      match(JavaScriptParser::T__94);
      setState(1049);
      match(JavaScriptParser::T__90);
      setState(1050);
      expression();
      setState(1051);
      match(JavaScriptParser::T__91);
      break;
    }

    case 3: {
      setState(1053);
      match(JavaScriptParser::T__94);
      setState(1054);
      match(JavaScriptParser::T__92);
      setState(1055);
      identifierName();
      break;
    }

    case 4: {
      setState(1056);
      metaProperty();
      break;
    }

    case 5: {
      setState(1057);
      match(JavaScriptParser::T__89);
      setState(1058);
      memberExpression(0);
      setState(1059);
      arguments();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1084);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1082);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<MemberExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleMemberExpression);
          setState(1063);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(1064);
          match(JavaScriptParser::T__90);
          setState(1065);
          expression();
          setState(1066);
          match(JavaScriptParser::T__91);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<MemberExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleMemberExpression);
          setState(1068);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(1069);
          match(JavaScriptParser::T__92);
          setState(1070);
          identifierName();
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<MemberExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleMemberExpression);
          setState(1071);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(1072);
          templateLiteral();
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<MemberExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleMemberExpression);
          setState(1073);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(1074);
          match(JavaScriptParser::T__93);
          setState(1075);
          identifierName();
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<MemberExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleMemberExpression);
          setState(1076);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(1077);
          match(JavaScriptParser::T__93);
          setState(1078);
          match(JavaScriptParser::T__90);
          setState(1079);
          expression();
          setState(1080);
          match(JavaScriptParser::T__91);
          break;
        }

        default:
          break;
        } 
      }
      setState(1086);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- MetaPropertyContext ------------------------------------------------------------------

JavaScriptParser::MetaPropertyContext::MetaPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaScriptParser::MetaPropertyContext::getRuleIndex() const {
  return JavaScriptParser::RuleMetaProperty;
}

void JavaScriptParser::MetaPropertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetaProperty(this);
}

void JavaScriptParser::MetaPropertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetaProperty(this);
}

JavaScriptParser::MetaPropertyContext* JavaScriptParser::metaProperty() {
  MetaPropertyContext *_localctx = _tracker.createInstance<MetaPropertyContext>(_ctx, getState());
  enterRule(_localctx, 178, JavaScriptParser::RuleMetaProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1093);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser::T__89: {
        enterOuterAlt(_localctx, 1);
        setState(1087);
        match(JavaScriptParser::T__89);
        setState(1088);
        match(JavaScriptParser::T__92);
        setState(1089);
        match(JavaScriptParser::T__96);
        break;
      }

      case JavaScriptParser::T__38: {
        enterOuterAlt(_localctx, 2);
        setState(1090);
        match(JavaScriptParser::T__38);
        setState(1091);
        match(JavaScriptParser::T__92);
        setState(1092);
        match(JavaScriptParser::T__97);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryExpressionContext ------------------------------------------------------------------

JavaScriptParser::PrimaryExpressionContext::PrimaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::IdentifierContext* JavaScriptParser::PrimaryExpressionContext::identifier() {
  return getRuleContext<JavaScriptParser::IdentifierContext>(0);
}

JavaScriptParser::LiteralContext* JavaScriptParser::PrimaryExpressionContext::literal() {
  return getRuleContext<JavaScriptParser::LiteralContext>(0);
}

JavaScriptParser::ArrayLiteralContext* JavaScriptParser::PrimaryExpressionContext::arrayLiteral() {
  return getRuleContext<JavaScriptParser::ArrayLiteralContext>(0);
}

JavaScriptParser::ObjectLiteralContext* JavaScriptParser::PrimaryExpressionContext::objectLiteral() {
  return getRuleContext<JavaScriptParser::ObjectLiteralContext>(0);
}

JavaScriptParser::FunctionExpressionContext* JavaScriptParser::PrimaryExpressionContext::functionExpression() {
  return getRuleContext<JavaScriptParser::FunctionExpressionContext>(0);
}

JavaScriptParser::ClassExpressionContext* JavaScriptParser::PrimaryExpressionContext::classExpression() {
  return getRuleContext<JavaScriptParser::ClassExpressionContext>(0);
}

JavaScriptParser::GeneratorExpressionContext* JavaScriptParser::PrimaryExpressionContext::generatorExpression() {
  return getRuleContext<JavaScriptParser::GeneratorExpressionContext>(0);
}

JavaScriptParser::AsyncFunctionExpressionContext* JavaScriptParser::PrimaryExpressionContext::asyncFunctionExpression() {
  return getRuleContext<JavaScriptParser::AsyncFunctionExpressionContext>(0);
}

JavaScriptParser::AsyncGeneratorExpressionContext* JavaScriptParser::PrimaryExpressionContext::asyncGeneratorExpression() {
  return getRuleContext<JavaScriptParser::AsyncGeneratorExpressionContext>(0);
}

JavaScriptParser::RegularExpressionLiteralContext* JavaScriptParser::PrimaryExpressionContext::regularExpressionLiteral() {
  return getRuleContext<JavaScriptParser::RegularExpressionLiteralContext>(0);
}

JavaScriptParser::TemplateLiteralContext* JavaScriptParser::PrimaryExpressionContext::templateLiteral() {
  return getRuleContext<JavaScriptParser::TemplateLiteralContext>(0);
}

JavaScriptParser::ParenthesizedExpressionContext* JavaScriptParser::PrimaryExpressionContext::parenthesizedExpression() {
  return getRuleContext<JavaScriptParser::ParenthesizedExpressionContext>(0);
}


size_t JavaScriptParser::PrimaryExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RulePrimaryExpression;
}

void JavaScriptParser::PrimaryExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryExpression(this);
}

void JavaScriptParser::PrimaryExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryExpression(this);
}

JavaScriptParser::PrimaryExpressionContext* JavaScriptParser::primaryExpression() {
  PrimaryExpressionContext *_localctx = _tracker.createInstance<PrimaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 180, JavaScriptParser::RulePrimaryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1108);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1095);
      match(JavaScriptParser::T__98);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1096);
      identifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1097);
      literal();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1098);
      arrayLiteral();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1099);
      objectLiteral();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1100);
      functionExpression();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1101);
      classExpression();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1102);
      generatorExpression();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1103);
      asyncFunctionExpression();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1104);
      asyncGeneratorExpression();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1105);
      regularExpressionLiteral();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1106);
      templateLiteral();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1107);
      parenthesizedExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParenthesizedExpressionContext ------------------------------------------------------------------

JavaScriptParser::ParenthesizedExpressionContext::ParenthesizedExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ExpressionContext* JavaScriptParser::ParenthesizedExpressionContext::expression() {
  return getRuleContext<JavaScriptParser::ExpressionContext>(0);
}


size_t JavaScriptParser::ParenthesizedExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleParenthesizedExpression;
}

void JavaScriptParser::ParenthesizedExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParenthesizedExpression(this);
}

void JavaScriptParser::ParenthesizedExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParenthesizedExpression(this);
}

JavaScriptParser::ParenthesizedExpressionContext* JavaScriptParser::parenthesizedExpression() {
  ParenthesizedExpressionContext *_localctx = _tracker.createInstance<ParenthesizedExpressionContext>(_ctx, getState());
  enterRule(_localctx, 182, JavaScriptParser::RuleParenthesizedExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1110);
    match(JavaScriptParser::T__1);
    setState(1111);
    expression();
    setState(1112);
    match(JavaScriptParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

JavaScriptParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::NullLiteralContext* JavaScriptParser::LiteralContext::nullLiteral() {
  return getRuleContext<JavaScriptParser::NullLiteralContext>(0);
}

JavaScriptParser::BooleanLiteralContext* JavaScriptParser::LiteralContext::booleanLiteral() {
  return getRuleContext<JavaScriptParser::BooleanLiteralContext>(0);
}

JavaScriptParser::NumericLiteralContext* JavaScriptParser::LiteralContext::numericLiteral() {
  return getRuleContext<JavaScriptParser::NumericLiteralContext>(0);
}

JavaScriptParser::StringLiteralContext* JavaScriptParser::LiteralContext::stringLiteral() {
  return getRuleContext<JavaScriptParser::StringLiteralContext>(0);
}


size_t JavaScriptParser::LiteralContext::getRuleIndex() const {
  return JavaScriptParser::RuleLiteral;
}

void JavaScriptParser::LiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral(this);
}

void JavaScriptParser::LiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral(this);
}

JavaScriptParser::LiteralContext* JavaScriptParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 184, JavaScriptParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1118);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser::T__99: {
        enterOuterAlt(_localctx, 1);
        setState(1114);
        nullLiteral();
        break;
      }

      case JavaScriptParser::T__100:
      case JavaScriptParser::T__101: {
        enterOuterAlt(_localctx, 2);
        setState(1115);
        booleanLiteral();
        break;
      }

      case JavaScriptParser::DECIMAL_LITERAL:
      case JavaScriptParser::BINARY_LITERAL:
      case JavaScriptParser::OCTAL_LITERAL:
      case JavaScriptParser::HEX_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(1116);
        numericLiteral();
        break;
      }

      case JavaScriptParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 4);
        setState(1117);
        stringLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NullLiteralContext ------------------------------------------------------------------

JavaScriptParser::NullLiteralContext::NullLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaScriptParser::NullLiteralContext::getRuleIndex() const {
  return JavaScriptParser::RuleNullLiteral;
}

void JavaScriptParser::NullLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNullLiteral(this);
}

void JavaScriptParser::NullLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNullLiteral(this);
}

JavaScriptParser::NullLiteralContext* JavaScriptParser::nullLiteral() {
  NullLiteralContext *_localctx = _tracker.createInstance<NullLiteralContext>(_ctx, getState());
  enterRule(_localctx, 186, JavaScriptParser::RuleNullLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1120);
    match(JavaScriptParser::T__99);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanLiteralContext ------------------------------------------------------------------

JavaScriptParser::BooleanLiteralContext::BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaScriptParser::BooleanLiteralContext::getRuleIndex() const {
  return JavaScriptParser::RuleBooleanLiteral;
}

void JavaScriptParser::BooleanLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBooleanLiteral(this);
}

void JavaScriptParser::BooleanLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBooleanLiteral(this);
}

JavaScriptParser::BooleanLiteralContext* JavaScriptParser::booleanLiteral() {
  BooleanLiteralContext *_localctx = _tracker.createInstance<BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 188, JavaScriptParser::RuleBooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1122);
    _la = _input->LA(1);
    if (!(_la == JavaScriptParser::T__100

    || _la == JavaScriptParser::T__101)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericLiteralContext ------------------------------------------------------------------

JavaScriptParser::NumericLiteralContext::NumericLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser::NumericLiteralContext::DECIMAL_LITERAL() {
  return getToken(JavaScriptParser::DECIMAL_LITERAL, 0);
}

tree::TerminalNode* JavaScriptParser::NumericLiteralContext::BINARY_LITERAL() {
  return getToken(JavaScriptParser::BINARY_LITERAL, 0);
}

tree::TerminalNode* JavaScriptParser::NumericLiteralContext::OCTAL_LITERAL() {
  return getToken(JavaScriptParser::OCTAL_LITERAL, 0);
}

tree::TerminalNode* JavaScriptParser::NumericLiteralContext::HEX_LITERAL() {
  return getToken(JavaScriptParser::HEX_LITERAL, 0);
}


size_t JavaScriptParser::NumericLiteralContext::getRuleIndex() const {
  return JavaScriptParser::RuleNumericLiteral;
}

void JavaScriptParser::NumericLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumericLiteral(this);
}

void JavaScriptParser::NumericLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumericLiteral(this);
}

JavaScriptParser::NumericLiteralContext* JavaScriptParser::numericLiteral() {
  NumericLiteralContext *_localctx = _tracker.createInstance<NumericLiteralContext>(_ctx, getState());
  enterRule(_localctx, 190, JavaScriptParser::RuleNumericLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1124);
    _la = _input->LA(1);
    if (!(((((_la - 113) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 113)) & 15) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringLiteralContext ------------------------------------------------------------------

JavaScriptParser::StringLiteralContext::StringLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser::StringLiteralContext::STRING_LITERAL() {
  return getToken(JavaScriptParser::STRING_LITERAL, 0);
}


size_t JavaScriptParser::StringLiteralContext::getRuleIndex() const {
  return JavaScriptParser::RuleStringLiteral;
}

void JavaScriptParser::StringLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStringLiteral(this);
}

void JavaScriptParser::StringLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStringLiteral(this);
}

JavaScriptParser::StringLiteralContext* JavaScriptParser::stringLiteral() {
  StringLiteralContext *_localctx = _tracker.createInstance<StringLiteralContext>(_ctx, getState());
  enterRule(_localctx, 192, JavaScriptParser::RuleStringLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1126);
    match(JavaScriptParser::STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayLiteralContext ------------------------------------------------------------------

JavaScriptParser::ArrayLiteralContext::ArrayLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ElementListContext* JavaScriptParser::ArrayLiteralContext::elementList() {
  return getRuleContext<JavaScriptParser::ElementListContext>(0);
}


size_t JavaScriptParser::ArrayLiteralContext::getRuleIndex() const {
  return JavaScriptParser::RuleArrayLiteral;
}

void JavaScriptParser::ArrayLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayLiteral(this);
}

void JavaScriptParser::ArrayLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayLiteral(this);
}

JavaScriptParser::ArrayLiteralContext* JavaScriptParser::arrayLiteral() {
  ArrayLiteralContext *_localctx = _tracker.createInstance<ArrayLiteralContext>(_ctx, getState());
  enterRule(_localctx, 194, JavaScriptParser::RuleArrayLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1128);
    match(JavaScriptParser::T__90);
    setState(1130);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx)) {
    case 1: {
      setState(1129);
      elementList();
      break;
    }

    default:
      break;
    }
    setState(1132);
    match(JavaScriptParser::T__91);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementListContext ------------------------------------------------------------------

JavaScriptParser::ElementListContext::ElementListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::ArrayElementContext *> JavaScriptParser::ElementListContext::arrayElement() {
  return getRuleContexts<JavaScriptParser::ArrayElementContext>();
}

JavaScriptParser::ArrayElementContext* JavaScriptParser::ElementListContext::arrayElement(size_t i) {
  return getRuleContext<JavaScriptParser::ArrayElementContext>(i);
}


size_t JavaScriptParser::ElementListContext::getRuleIndex() const {
  return JavaScriptParser::RuleElementList;
}

void JavaScriptParser::ElementListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementList(this);
}

void JavaScriptParser::ElementListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementList(this);
}

JavaScriptParser::ElementListContext* JavaScriptParser::elementList() {
  ElementListContext *_localctx = _tracker.createInstance<ElementListContext>(_ctx, getState());
  enterRule(_localctx, 196, JavaScriptParser::RuleElementList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1134);
    arrayElement();
    setState(1139);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaScriptParser::T__15) {
      setState(1135);
      match(JavaScriptParser::T__15);
      setState(1136);
      arrayElement();
      setState(1141);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayElementContext ------------------------------------------------------------------

JavaScriptParser::ArrayElementContext::ArrayElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::AssignmentExpressionContext* JavaScriptParser::ArrayElementContext::assignmentExpression() {
  return getRuleContext<JavaScriptParser::AssignmentExpressionContext>(0);
}


size_t JavaScriptParser::ArrayElementContext::getRuleIndex() const {
  return JavaScriptParser::RuleArrayElement;
}

void JavaScriptParser::ArrayElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayElement(this);
}

void JavaScriptParser::ArrayElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayElement(this);
}

JavaScriptParser::ArrayElementContext* JavaScriptParser::arrayElement() {
  ArrayElementContext *_localctx = _tracker.createInstance<ArrayElementContext>(_ctx, getState());
  enterRule(_localctx, 198, JavaScriptParser::RuleArrayElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1146);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser::T__0:
      case JavaScriptParser::T__1:
      case JavaScriptParser::T__3:
      case JavaScriptParser::T__6:
      case JavaScriptParser::T__7:
      case JavaScriptParser::T__23:
      case JavaScriptParser::T__38:
      case JavaScriptParser::T__77:
      case JavaScriptParser::T__78:
      case JavaScriptParser::T__82:
      case JavaScriptParser::T__83:
      case JavaScriptParser::T__84:
      case JavaScriptParser::T__85:
      case JavaScriptParser::T__86:
      case JavaScriptParser::T__87:
      case JavaScriptParser::T__88:
      case JavaScriptParser::T__89:
      case JavaScriptParser::T__90:
      case JavaScriptParser::T__94:
      case JavaScriptParser::T__98:
      case JavaScriptParser::T__99:
      case JavaScriptParser::T__100:
      case JavaScriptParser::T__101:
      case JavaScriptParser::T__103:
      case JavaScriptParser::T__104:
      case JavaScriptParser::DECIMAL_LITERAL:
      case JavaScriptParser::BINARY_LITERAL:
      case JavaScriptParser::OCTAL_LITERAL:
      case JavaScriptParser::HEX_LITERAL:
      case JavaScriptParser::STRING_LITERAL:
      case JavaScriptParser::REGEX_LITERAL:
      case JavaScriptParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1142);
        assignmentExpression();
        break;
      }

      case JavaScriptParser::T__95: {
        enterOuterAlt(_localctx, 2);
        setState(1143);
        match(JavaScriptParser::T__95);
        setState(1144);
        assignmentExpression();
        break;
      }

      case JavaScriptParser::T__15:
      case JavaScriptParser::T__91: {
        enterOuterAlt(_localctx, 3);

        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectLiteralContext ------------------------------------------------------------------

JavaScriptParser::ObjectLiteralContext::ObjectLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::PropertyDefinitionListContext* JavaScriptParser::ObjectLiteralContext::propertyDefinitionList() {
  return getRuleContext<JavaScriptParser::PropertyDefinitionListContext>(0);
}


size_t JavaScriptParser::ObjectLiteralContext::getRuleIndex() const {
  return JavaScriptParser::RuleObjectLiteral;
}

void JavaScriptParser::ObjectLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObjectLiteral(this);
}

void JavaScriptParser::ObjectLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObjectLiteral(this);
}

JavaScriptParser::ObjectLiteralContext* JavaScriptParser::objectLiteral() {
  ObjectLiteralContext *_localctx = _tracker.createInstance<ObjectLiteralContext>(_ctx, getState());
  enterRule(_localctx, 200, JavaScriptParser::RuleObjectLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1158);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1148);
      match(JavaScriptParser::T__3);
      setState(1150);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 5496450774978) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & 580539428048385) != 0)) {
        setState(1149);
        propertyDefinitionList();
      }
      setState(1152);
      match(JavaScriptParser::T__4);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1153);
      match(JavaScriptParser::T__3);
      setState(1154);
      propertyDefinitionList();
      setState(1155);
      match(JavaScriptParser::T__15);
      setState(1156);
      match(JavaScriptParser::T__4);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyDefinitionListContext ------------------------------------------------------------------

JavaScriptParser::PropertyDefinitionListContext::PropertyDefinitionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::PropertyDefinitionContext *> JavaScriptParser::PropertyDefinitionListContext::propertyDefinition() {
  return getRuleContexts<JavaScriptParser::PropertyDefinitionContext>();
}

JavaScriptParser::PropertyDefinitionContext* JavaScriptParser::PropertyDefinitionListContext::propertyDefinition(size_t i) {
  return getRuleContext<JavaScriptParser::PropertyDefinitionContext>(i);
}


size_t JavaScriptParser::PropertyDefinitionListContext::getRuleIndex() const {
  return JavaScriptParser::RulePropertyDefinitionList;
}

void JavaScriptParser::PropertyDefinitionListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPropertyDefinitionList(this);
}

void JavaScriptParser::PropertyDefinitionListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPropertyDefinitionList(this);
}

JavaScriptParser::PropertyDefinitionListContext* JavaScriptParser::propertyDefinitionList() {
  PropertyDefinitionListContext *_localctx = _tracker.createInstance<PropertyDefinitionListContext>(_ctx, getState());
  enterRule(_localctx, 202, JavaScriptParser::RulePropertyDefinitionList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1160);
    propertyDefinition();
    setState(1165);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1161);
        match(JavaScriptParser::T__15);
        setState(1162);
        propertyDefinition(); 
      }
      setState(1167);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyDefinitionContext ------------------------------------------------------------------

JavaScriptParser::PropertyDefinitionContext::PropertyDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::IdentifierNameContext* JavaScriptParser::PropertyDefinitionContext::identifierName() {
  return getRuleContext<JavaScriptParser::IdentifierNameContext>(0);
}

JavaScriptParser::PropertyNameContext* JavaScriptParser::PropertyDefinitionContext::propertyName() {
  return getRuleContext<JavaScriptParser::PropertyNameContext>(0);
}

JavaScriptParser::AssignmentExpressionContext* JavaScriptParser::PropertyDefinitionContext::assignmentExpression() {
  return getRuleContext<JavaScriptParser::AssignmentExpressionContext>(0);
}

JavaScriptParser::MethodDefinitionContext* JavaScriptParser::PropertyDefinitionContext::methodDefinition() {
  return getRuleContext<JavaScriptParser::MethodDefinitionContext>(0);
}


size_t JavaScriptParser::PropertyDefinitionContext::getRuleIndex() const {
  return JavaScriptParser::RulePropertyDefinition;
}

void JavaScriptParser::PropertyDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPropertyDefinition(this);
}

void JavaScriptParser::PropertyDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPropertyDefinition(this);
}

JavaScriptParser::PropertyDefinitionContext* JavaScriptParser::propertyDefinition() {
  PropertyDefinitionContext *_localctx = _tracker.createInstance<PropertyDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 204, JavaScriptParser::RulePropertyDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1176);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1168);
      identifierName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1169);
      propertyName();
      setState(1170);
      match(JavaScriptParser::T__29);
      setState(1171);
      assignmentExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1173);
      methodDefinition();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1174);
      match(JavaScriptParser::T__95);
      setState(1175);
      assignmentExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyNameContext ------------------------------------------------------------------

JavaScriptParser::PropertyNameContext::PropertyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::IdentifierNameContext* JavaScriptParser::PropertyNameContext::identifierName() {
  return getRuleContext<JavaScriptParser::IdentifierNameContext>(0);
}

JavaScriptParser::StringLiteralContext* JavaScriptParser::PropertyNameContext::stringLiteral() {
  return getRuleContext<JavaScriptParser::StringLiteralContext>(0);
}

JavaScriptParser::NumericLiteralContext* JavaScriptParser::PropertyNameContext::numericLiteral() {
  return getRuleContext<JavaScriptParser::NumericLiteralContext>(0);
}

JavaScriptParser::AssignmentExpressionContext* JavaScriptParser::PropertyNameContext::assignmentExpression() {
  return getRuleContext<JavaScriptParser::AssignmentExpressionContext>(0);
}


size_t JavaScriptParser::PropertyNameContext::getRuleIndex() const {
  return JavaScriptParser::RulePropertyName;
}

void JavaScriptParser::PropertyNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPropertyName(this);
}

void JavaScriptParser::PropertyNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPropertyName(this);
}

JavaScriptParser::PropertyNameContext* JavaScriptParser::propertyName() {
  PropertyNameContext *_localctx = _tracker.createInstance<PropertyNameContext>(_ctx, getState());
  enterRule(_localctx, 206, JavaScriptParser::RulePropertyName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1185);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser::T__0:
      case JavaScriptParser::T__6:
      case JavaScriptParser::T__7:
      case JavaScriptParser::T__8:
      case JavaScriptParser::T__9:
      case JavaScriptParser::T__13:
      case JavaScriptParser::T__14:
      case JavaScriptParser::T__16:
      case JavaScriptParser::T__17:
      case JavaScriptParser::T__18:
      case JavaScriptParser::T__19:
      case JavaScriptParser::T__20:
      case JavaScriptParser::T__21:
      case JavaScriptParser::T__22:
      case JavaScriptParser::T__23:
      case JavaScriptParser::T__25:
      case JavaScriptParser::T__26:
      case JavaScriptParser::T__27:
      case JavaScriptParser::T__28:
      case JavaScriptParser::T__30:
      case JavaScriptParser::T__31:
      case JavaScriptParser::T__32:
      case JavaScriptParser::T__33:
      case JavaScriptParser::T__34:
      case JavaScriptParser::T__35:
      case JavaScriptParser::T__36:
      case JavaScriptParser::T__37:
      case JavaScriptParser::T__38:
      case JavaScriptParser::T__41:
      case JavaScriptParser::T__73:
      case JavaScriptParser::T__82:
      case JavaScriptParser::T__83:
      case JavaScriptParser::T__84:
      case JavaScriptParser::T__89:
      case JavaScriptParser::T__94:
      case JavaScriptParser::T__98:
      case JavaScriptParser::T__99:
      case JavaScriptParser::T__100:
      case JavaScriptParser::T__101:
      case JavaScriptParser::T__103:
      case JavaScriptParser::T__105:
      case JavaScriptParser::T__106:
      case JavaScriptParser::T__107:
      case JavaScriptParser::T__108:
      case JavaScriptParser::T__109:
      case JavaScriptParser::T__110:
      case JavaScriptParser::T__111:
      case JavaScriptParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1178);
        identifierName();
        break;
      }

      case JavaScriptParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(1179);
        stringLiteral();
        break;
      }

      case JavaScriptParser::DECIMAL_LITERAL:
      case JavaScriptParser::BINARY_LITERAL:
      case JavaScriptParser::OCTAL_LITERAL:
      case JavaScriptParser::HEX_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(1180);
        numericLiteral();
        break;
      }

      case JavaScriptParser::T__90: {
        enterOuterAlt(_localctx, 4);
        setState(1181);
        match(JavaScriptParser::T__90);
        setState(1182);
        assignmentExpression();
        setState(1183);
        match(JavaScriptParser::T__91);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionExpressionContext ------------------------------------------------------------------

JavaScriptParser::FunctionExpressionContext::FunctionExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::FunctionBodyContext* JavaScriptParser::FunctionExpressionContext::functionBody() {
  return getRuleContext<JavaScriptParser::FunctionBodyContext>(0);
}

JavaScriptParser::IdentifierContext* JavaScriptParser::FunctionExpressionContext::identifier() {
  return getRuleContext<JavaScriptParser::IdentifierContext>(0);
}

JavaScriptParser::FormalParameterListContext* JavaScriptParser::FunctionExpressionContext::formalParameterList() {
  return getRuleContext<JavaScriptParser::FormalParameterListContext>(0);
}


size_t JavaScriptParser::FunctionExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleFunctionExpression;
}

void JavaScriptParser::FunctionExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionExpression(this);
}

void JavaScriptParser::FunctionExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionExpression(this);
}

JavaScriptParser::FunctionExpressionContext* JavaScriptParser::functionExpression() {
  FunctionExpressionContext *_localctx = _tracker.createInstance<FunctionExpressionContext>(_ctx, getState());
  enterRule(_localctx, 208, JavaScriptParser::RuleFunctionExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1187);
    match(JavaScriptParser::T__0);
    setState(1189);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__23 || _la == JavaScriptParser::T__103

    || _la == JavaScriptParser::IDENTIFIER) {
      setState(1188);
      identifier();
    }
    setState(1191);
    match(JavaScriptParser::T__1);
    setState(1193);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__3

    || _la == JavaScriptParser::T__23 || ((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 4294975521) != 0)) {
      setState(1192);
      formalParameterList();
    }
    setState(1195);
    match(JavaScriptParser::T__2);
    setState(1196);
    match(JavaScriptParser::T__3);
    setState(1197);
    functionBody();
    setState(1198);
    match(JavaScriptParser::T__4);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GeneratorExpressionContext ------------------------------------------------------------------

JavaScriptParser::GeneratorExpressionContext::GeneratorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::FunctionBodyContext* JavaScriptParser::GeneratorExpressionContext::functionBody() {
  return getRuleContext<JavaScriptParser::FunctionBodyContext>(0);
}

JavaScriptParser::IdentifierContext* JavaScriptParser::GeneratorExpressionContext::identifier() {
  return getRuleContext<JavaScriptParser::IdentifierContext>(0);
}

JavaScriptParser::FormalParameterListContext* JavaScriptParser::GeneratorExpressionContext::formalParameterList() {
  return getRuleContext<JavaScriptParser::FormalParameterListContext>(0);
}


size_t JavaScriptParser::GeneratorExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleGeneratorExpression;
}

void JavaScriptParser::GeneratorExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneratorExpression(this);
}

void JavaScriptParser::GeneratorExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneratorExpression(this);
}

JavaScriptParser::GeneratorExpressionContext* JavaScriptParser::generatorExpression() {
  GeneratorExpressionContext *_localctx = _tracker.createInstance<GeneratorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 210, JavaScriptParser::RuleGeneratorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1200);
    match(JavaScriptParser::T__0);
    setState(1201);
    match(JavaScriptParser::T__5);
    setState(1203);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__23 || _la == JavaScriptParser::T__103

    || _la == JavaScriptParser::IDENTIFIER) {
      setState(1202);
      identifier();
    }
    setState(1205);
    match(JavaScriptParser::T__1);
    setState(1207);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__3

    || _la == JavaScriptParser::T__23 || ((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 4294975521) != 0)) {
      setState(1206);
      formalParameterList();
    }
    setState(1209);
    match(JavaScriptParser::T__2);
    setState(1210);
    match(JavaScriptParser::T__3);
    setState(1211);
    functionBody();
    setState(1212);
    match(JavaScriptParser::T__4);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AsyncFunctionExpressionContext ------------------------------------------------------------------

JavaScriptParser::AsyncFunctionExpressionContext::AsyncFunctionExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::FunctionBodyContext* JavaScriptParser::AsyncFunctionExpressionContext::functionBody() {
  return getRuleContext<JavaScriptParser::FunctionBodyContext>(0);
}

JavaScriptParser::IdentifierContext* JavaScriptParser::AsyncFunctionExpressionContext::identifier() {
  return getRuleContext<JavaScriptParser::IdentifierContext>(0);
}

JavaScriptParser::FormalParameterListContext* JavaScriptParser::AsyncFunctionExpressionContext::formalParameterList() {
  return getRuleContext<JavaScriptParser::FormalParameterListContext>(0);
}


size_t JavaScriptParser::AsyncFunctionExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleAsyncFunctionExpression;
}

void JavaScriptParser::AsyncFunctionExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAsyncFunctionExpression(this);
}

void JavaScriptParser::AsyncFunctionExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAsyncFunctionExpression(this);
}

JavaScriptParser::AsyncFunctionExpressionContext* JavaScriptParser::asyncFunctionExpression() {
  AsyncFunctionExpressionContext *_localctx = _tracker.createInstance<AsyncFunctionExpressionContext>(_ctx, getState());
  enterRule(_localctx, 212, JavaScriptParser::RuleAsyncFunctionExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1214);
    match(JavaScriptParser::T__6);
    setState(1215);
    match(JavaScriptParser::T__0);
    setState(1217);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__23 || _la == JavaScriptParser::T__103

    || _la == JavaScriptParser::IDENTIFIER) {
      setState(1216);
      identifier();
    }
    setState(1219);
    match(JavaScriptParser::T__1);
    setState(1221);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__3

    || _la == JavaScriptParser::T__23 || ((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 4294975521) != 0)) {
      setState(1220);
      formalParameterList();
    }
    setState(1223);
    match(JavaScriptParser::T__2);
    setState(1224);
    match(JavaScriptParser::T__3);
    setState(1225);
    functionBody();
    setState(1226);
    match(JavaScriptParser::T__4);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AsyncGeneratorExpressionContext ------------------------------------------------------------------

JavaScriptParser::AsyncGeneratorExpressionContext::AsyncGeneratorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::FunctionBodyContext* JavaScriptParser::AsyncGeneratorExpressionContext::functionBody() {
  return getRuleContext<JavaScriptParser::FunctionBodyContext>(0);
}

JavaScriptParser::IdentifierContext* JavaScriptParser::AsyncGeneratorExpressionContext::identifier() {
  return getRuleContext<JavaScriptParser::IdentifierContext>(0);
}

JavaScriptParser::FormalParameterListContext* JavaScriptParser::AsyncGeneratorExpressionContext::formalParameterList() {
  return getRuleContext<JavaScriptParser::FormalParameterListContext>(0);
}


size_t JavaScriptParser::AsyncGeneratorExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleAsyncGeneratorExpression;
}

void JavaScriptParser::AsyncGeneratorExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAsyncGeneratorExpression(this);
}

void JavaScriptParser::AsyncGeneratorExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAsyncGeneratorExpression(this);
}

JavaScriptParser::AsyncGeneratorExpressionContext* JavaScriptParser::asyncGeneratorExpression() {
  AsyncGeneratorExpressionContext *_localctx = _tracker.createInstance<AsyncGeneratorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 214, JavaScriptParser::RuleAsyncGeneratorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1228);
    match(JavaScriptParser::T__6);
    setState(1229);
    match(JavaScriptParser::T__0);
    setState(1230);
    match(JavaScriptParser::T__5);
    setState(1232);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__23 || _la == JavaScriptParser::T__103

    || _la == JavaScriptParser::IDENTIFIER) {
      setState(1231);
      identifier();
    }
    setState(1234);
    match(JavaScriptParser::T__1);
    setState(1236);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__3

    || _la == JavaScriptParser::T__23 || ((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 4294975521) != 0)) {
      setState(1235);
      formalParameterList();
    }
    setState(1238);
    match(JavaScriptParser::T__2);
    setState(1239);
    match(JavaScriptParser::T__3);
    setState(1240);
    functionBody();
    setState(1241);
    match(JavaScriptParser::T__4);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassExpressionContext ------------------------------------------------------------------

JavaScriptParser::ClassExpressionContext::ClassExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ClassBodyContext* JavaScriptParser::ClassExpressionContext::classBody() {
  return getRuleContext<JavaScriptParser::ClassBodyContext>(0);
}

JavaScriptParser::IdentifierContext* JavaScriptParser::ClassExpressionContext::identifier() {
  return getRuleContext<JavaScriptParser::IdentifierContext>(0);
}

JavaScriptParser::ClassExtendsContext* JavaScriptParser::ClassExpressionContext::classExtends() {
  return getRuleContext<JavaScriptParser::ClassExtendsContext>(0);
}


size_t JavaScriptParser::ClassExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleClassExpression;
}

void JavaScriptParser::ClassExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassExpression(this);
}

void JavaScriptParser::ClassExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassExpression(this);
}

JavaScriptParser::ClassExpressionContext* JavaScriptParser::classExpression() {
  ClassExpressionContext *_localctx = _tracker.createInstance<ClassExpressionContext>(_ctx, getState());
  enterRule(_localctx, 216, JavaScriptParser::RuleClassExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1243);
    match(JavaScriptParser::T__7);
    setState(1245);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__23 || _la == JavaScriptParser::T__103

    || _la == JavaScriptParser::IDENTIFIER) {
      setState(1244);
      identifier();
    }
    setState(1248);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__8) {
      setState(1247);
      classExtends();
    }
    setState(1250);
    match(JavaScriptParser::T__3);
    setState(1251);
    classBody();
    setState(1252);
    match(JavaScriptParser::T__4);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrowFunctionContext ------------------------------------------------------------------

JavaScriptParser::ArrowFunctionContext::ArrowFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ArrowParametersContext* JavaScriptParser::ArrowFunctionContext::arrowParameters() {
  return getRuleContext<JavaScriptParser::ArrowParametersContext>(0);
}

JavaScriptParser::ArrowBodyContext* JavaScriptParser::ArrowFunctionContext::arrowBody() {
  return getRuleContext<JavaScriptParser::ArrowBodyContext>(0);
}


size_t JavaScriptParser::ArrowFunctionContext::getRuleIndex() const {
  return JavaScriptParser::RuleArrowFunction;
}

void JavaScriptParser::ArrowFunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrowFunction(this);
}

void JavaScriptParser::ArrowFunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrowFunction(this);
}

JavaScriptParser::ArrowFunctionContext* JavaScriptParser::arrowFunction() {
  ArrowFunctionContext *_localctx = _tracker.createInstance<ArrowFunctionContext>(_ctx, getState());
  enterRule(_localctx, 218, JavaScriptParser::RuleArrowFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1254);
    arrowParameters();
    setState(1255);
    match(JavaScriptParser::T__102);
    setState(1256);
    arrowBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AsyncArrowFunctionContext ------------------------------------------------------------------

JavaScriptParser::AsyncArrowFunctionContext::AsyncArrowFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ArrowParametersContext* JavaScriptParser::AsyncArrowFunctionContext::arrowParameters() {
  return getRuleContext<JavaScriptParser::ArrowParametersContext>(0);
}

JavaScriptParser::ArrowBodyContext* JavaScriptParser::AsyncArrowFunctionContext::arrowBody() {
  return getRuleContext<JavaScriptParser::ArrowBodyContext>(0);
}


size_t JavaScriptParser::AsyncArrowFunctionContext::getRuleIndex() const {
  return JavaScriptParser::RuleAsyncArrowFunction;
}

void JavaScriptParser::AsyncArrowFunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAsyncArrowFunction(this);
}

void JavaScriptParser::AsyncArrowFunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAsyncArrowFunction(this);
}

JavaScriptParser::AsyncArrowFunctionContext* JavaScriptParser::asyncArrowFunction() {
  AsyncArrowFunctionContext *_localctx = _tracker.createInstance<AsyncArrowFunctionContext>(_ctx, getState());
  enterRule(_localctx, 220, JavaScriptParser::RuleAsyncArrowFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1258);
    match(JavaScriptParser::T__6);
    setState(1259);
    arrowParameters();
    setState(1260);
    match(JavaScriptParser::T__102);
    setState(1261);
    arrowBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrowParametersContext ------------------------------------------------------------------

JavaScriptParser::ArrowParametersContext::ArrowParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::BindingIdentifierContext* JavaScriptParser::ArrowParametersContext::bindingIdentifier() {
  return getRuleContext<JavaScriptParser::BindingIdentifierContext>(0);
}

JavaScriptParser::FormalParameterListContext* JavaScriptParser::ArrowParametersContext::formalParameterList() {
  return getRuleContext<JavaScriptParser::FormalParameterListContext>(0);
}


size_t JavaScriptParser::ArrowParametersContext::getRuleIndex() const {
  return JavaScriptParser::RuleArrowParameters;
}

void JavaScriptParser::ArrowParametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrowParameters(this);
}

void JavaScriptParser::ArrowParametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrowParameters(this);
}

JavaScriptParser::ArrowParametersContext* JavaScriptParser::arrowParameters() {
  ArrowParametersContext *_localctx = _tracker.createInstance<ArrowParametersContext>(_ctx, getState());
  enterRule(_localctx, 222, JavaScriptParser::RuleArrowParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1269);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser::T__23:
      case JavaScriptParser::T__103:
      case JavaScriptParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1263);
        bindingIdentifier();
        break;
      }

      case JavaScriptParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(1264);
        match(JavaScriptParser::T__1);
        setState(1266);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaScriptParser::T__3

        || _la == JavaScriptParser::T__23 || ((((_la - 91) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 91)) & 4294975521) != 0)) {
          setState(1265);
          formalParameterList();
        }
        setState(1268);
        match(JavaScriptParser::T__2);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrowBodyContext ------------------------------------------------------------------

JavaScriptParser::ArrowBodyContext::ArrowBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::AssignmentExpressionContext* JavaScriptParser::ArrowBodyContext::assignmentExpression() {
  return getRuleContext<JavaScriptParser::AssignmentExpressionContext>(0);
}

JavaScriptParser::FunctionBodyContext* JavaScriptParser::ArrowBodyContext::functionBody() {
  return getRuleContext<JavaScriptParser::FunctionBodyContext>(0);
}


size_t JavaScriptParser::ArrowBodyContext::getRuleIndex() const {
  return JavaScriptParser::RuleArrowBody;
}

void JavaScriptParser::ArrowBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrowBody(this);
}

void JavaScriptParser::ArrowBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrowBody(this);
}

JavaScriptParser::ArrowBodyContext* JavaScriptParser::arrowBody() {
  ArrowBodyContext *_localctx = _tracker.createInstance<ArrowBodyContext>(_ctx, getState());
  enterRule(_localctx, 224, JavaScriptParser::RuleArrowBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1276);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1271);
      assignmentExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1272);
      match(JavaScriptParser::T__3);
      setState(1273);
      functionBody();
      setState(1274);
      match(JavaScriptParser::T__4);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- YieldExpressionContext ------------------------------------------------------------------

JavaScriptParser::YieldExpressionContext::YieldExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::AssignmentExpressionContext* JavaScriptParser::YieldExpressionContext::assignmentExpression() {
  return getRuleContext<JavaScriptParser::AssignmentExpressionContext>(0);
}


size_t JavaScriptParser::YieldExpressionContext::getRuleIndex() const {
  return JavaScriptParser::RuleYieldExpression;
}

void JavaScriptParser::YieldExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterYieldExpression(this);
}

void JavaScriptParser::YieldExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitYieldExpression(this);
}

JavaScriptParser::YieldExpressionContext* JavaScriptParser::yieldExpression() {
  YieldExpressionContext *_localctx = _tracker.createInstance<YieldExpressionContext>(_ctx, getState());
  enterRule(_localctx, 226, JavaScriptParser::RuleYieldExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1284);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1278);
      match(JavaScriptParser::T__103);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1279);
      match(JavaScriptParser::T__103);
      setState(1280);
      assignmentExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1281);
      match(JavaScriptParser::T__103);
      setState(1282);
      match(JavaScriptParser::T__5);
      setState(1283);
      assignmentExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateLiteralContext ------------------------------------------------------------------

JavaScriptParser::TemplateLiteralContext::TemplateLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::TemplateSpansContext* JavaScriptParser::TemplateLiteralContext::templateSpans() {
  return getRuleContext<JavaScriptParser::TemplateSpansContext>(0);
}


size_t JavaScriptParser::TemplateLiteralContext::getRuleIndex() const {
  return JavaScriptParser::RuleTemplateLiteral;
}

void JavaScriptParser::TemplateLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTemplateLiteral(this);
}

void JavaScriptParser::TemplateLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTemplateLiteral(this);
}

JavaScriptParser::TemplateLiteralContext* JavaScriptParser::templateLiteral() {
  TemplateLiteralContext *_localctx = _tracker.createInstance<TemplateLiteralContext>(_ctx, getState());
  enterRule(_localctx, 228, JavaScriptParser::RuleTemplateLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1286);
    match(JavaScriptParser::T__104);
    setState(1288);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::TEMPLATE_STRING_LITERAL

    || _la == JavaScriptParser::TEMPLATE_STRING_START) {
      setState(1287);
      templateSpans();
    }
    setState(1290);
    match(JavaScriptParser::T__104);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateSpansContext ------------------------------------------------------------------

JavaScriptParser::TemplateSpansContext::TemplateSpansContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::TemplateSpanContext *> JavaScriptParser::TemplateSpansContext::templateSpan() {
  return getRuleContexts<JavaScriptParser::TemplateSpanContext>();
}

JavaScriptParser::TemplateSpanContext* JavaScriptParser::TemplateSpansContext::templateSpan(size_t i) {
  return getRuleContext<JavaScriptParser::TemplateSpanContext>(i);
}


size_t JavaScriptParser::TemplateSpansContext::getRuleIndex() const {
  return JavaScriptParser::RuleTemplateSpans;
}

void JavaScriptParser::TemplateSpansContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTemplateSpans(this);
}

void JavaScriptParser::TemplateSpansContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTemplateSpans(this);
}

JavaScriptParser::TemplateSpansContext* JavaScriptParser::templateSpans() {
  TemplateSpansContext *_localctx = _tracker.createInstance<TemplateSpansContext>(_ctx, getState());
  enterRule(_localctx, 230, JavaScriptParser::RuleTemplateSpans);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1293); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1292);
      templateSpan();
      setState(1295); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == JavaScriptParser::TEMPLATE_STRING_LITERAL

    || _la == JavaScriptParser::TEMPLATE_STRING_START);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateSpanContext ------------------------------------------------------------------

JavaScriptParser::TemplateSpanContext::TemplateSpanContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser::TemplateSpanContext::TEMPLATE_STRING_LITERAL() {
  return getToken(JavaScriptParser::TEMPLATE_STRING_LITERAL, 0);
}

tree::TerminalNode* JavaScriptParser::TemplateSpanContext::TEMPLATE_STRING_START() {
  return getToken(JavaScriptParser::TEMPLATE_STRING_START, 0);
}

JavaScriptParser::ExpressionContext* JavaScriptParser::TemplateSpanContext::expression() {
  return getRuleContext<JavaScriptParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaScriptParser::TemplateSpanContext::TEMPLATE_STRING_END() {
  return getToken(JavaScriptParser::TEMPLATE_STRING_END, 0);
}

std::vector<JavaScriptParser::TemplateMiddleContext *> JavaScriptParser::TemplateSpanContext::templateMiddle() {
  return getRuleContexts<JavaScriptParser::TemplateMiddleContext>();
}

JavaScriptParser::TemplateMiddleContext* JavaScriptParser::TemplateSpanContext::templateMiddle(size_t i) {
  return getRuleContext<JavaScriptParser::TemplateMiddleContext>(i);
}


size_t JavaScriptParser::TemplateSpanContext::getRuleIndex() const {
  return JavaScriptParser::RuleTemplateSpan;
}

void JavaScriptParser::TemplateSpanContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTemplateSpan(this);
}

void JavaScriptParser::TemplateSpanContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTemplateSpan(this);
}

JavaScriptParser::TemplateSpanContext* JavaScriptParser::templateSpan() {
  TemplateSpanContext *_localctx = _tracker.createInstance<TemplateSpanContext>(_ctx, getState());
  enterRule(_localctx, 232, JavaScriptParser::RuleTemplateSpan);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1308);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser::TEMPLATE_STRING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(1297);
        match(JavaScriptParser::TEMPLATE_STRING_LITERAL);
        break;
      }

      case JavaScriptParser::TEMPLATE_STRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(1298);
        match(JavaScriptParser::TEMPLATE_STRING_START);
        setState(1299);
        expression();
        setState(1303);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaScriptParser::TEMPLATE_STRING_MIDDLE) {
          setState(1300);
          templateMiddle();
          setState(1305);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1306);
        match(JavaScriptParser::TEMPLATE_STRING_END);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateMiddleContext ------------------------------------------------------------------

JavaScriptParser::TemplateMiddleContext::TemplateMiddleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser::TemplateMiddleContext::TEMPLATE_STRING_MIDDLE() {
  return getToken(JavaScriptParser::TEMPLATE_STRING_MIDDLE, 0);
}

JavaScriptParser::ExpressionContext* JavaScriptParser::TemplateMiddleContext::expression() {
  return getRuleContext<JavaScriptParser::ExpressionContext>(0);
}


size_t JavaScriptParser::TemplateMiddleContext::getRuleIndex() const {
  return JavaScriptParser::RuleTemplateMiddle;
}

void JavaScriptParser::TemplateMiddleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTemplateMiddle(this);
}

void JavaScriptParser::TemplateMiddleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTemplateMiddle(this);
}

JavaScriptParser::TemplateMiddleContext* JavaScriptParser::templateMiddle() {
  TemplateMiddleContext *_localctx = _tracker.createInstance<TemplateMiddleContext>(_ctx, getState());
  enterRule(_localctx, 234, JavaScriptParser::RuleTemplateMiddle);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1310);
    match(JavaScriptParser::TEMPLATE_STRING_MIDDLE);
    setState(1311);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RegularExpressionLiteralContext ------------------------------------------------------------------

JavaScriptParser::RegularExpressionLiteralContext::RegularExpressionLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser::RegularExpressionLiteralContext::REGEX_LITERAL() {
  return getToken(JavaScriptParser::REGEX_LITERAL, 0);
}


size_t JavaScriptParser::RegularExpressionLiteralContext::getRuleIndex() const {
  return JavaScriptParser::RuleRegularExpressionLiteral;
}

void JavaScriptParser::RegularExpressionLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRegularExpressionLiteral(this);
}

void JavaScriptParser::RegularExpressionLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRegularExpressionLiteral(this);
}

JavaScriptParser::RegularExpressionLiteralContext* JavaScriptParser::regularExpressionLiteral() {
  RegularExpressionLiteralContext *_localctx = _tracker.createInstance<RegularExpressionLiteralContext>(_ctx, getState());
  enterRule(_localctx, 236, JavaScriptParser::RuleRegularExpressionLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1313);
    match(JavaScriptParser::REGEX_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameterListContext ------------------------------------------------------------------

JavaScriptParser::FormalParameterListContext::FormalParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::FormalParameterContext *> JavaScriptParser::FormalParameterListContext::formalParameter() {
  return getRuleContexts<JavaScriptParser::FormalParameterContext>();
}

JavaScriptParser::FormalParameterContext* JavaScriptParser::FormalParameterListContext::formalParameter(size_t i) {
  return getRuleContext<JavaScriptParser::FormalParameterContext>(i);
}

JavaScriptParser::RestParameterContext* JavaScriptParser::FormalParameterListContext::restParameter() {
  return getRuleContext<JavaScriptParser::RestParameterContext>(0);
}


size_t JavaScriptParser::FormalParameterListContext::getRuleIndex() const {
  return JavaScriptParser::RuleFormalParameterList;
}

void JavaScriptParser::FormalParameterListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameterList(this);
}

void JavaScriptParser::FormalParameterListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameterList(this);
}

JavaScriptParser::FormalParameterListContext* JavaScriptParser::formalParameterList() {
  FormalParameterListContext *_localctx = _tracker.createInstance<FormalParameterListContext>(_ctx, getState());
  enterRule(_localctx, 238, JavaScriptParser::RuleFormalParameterList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1328);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser::T__3:
      case JavaScriptParser::T__23:
      case JavaScriptParser::T__90:
      case JavaScriptParser::T__103:
      case JavaScriptParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1315);
        formalParameter();
        setState(1320);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1316);
            match(JavaScriptParser::T__15);
            setState(1317);
            formalParameter(); 
          }
          setState(1322);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx);
        }
        setState(1325);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaScriptParser::T__15) {
          setState(1323);
          match(JavaScriptParser::T__15);
          setState(1324);
          restParameter();
        }
        break;
      }

      case JavaScriptParser::T__95: {
        enterOuterAlt(_localctx, 2);
        setState(1327);
        restParameter();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameterContext ------------------------------------------------------------------

JavaScriptParser::FormalParameterContext::FormalParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::BindingElementContext* JavaScriptParser::FormalParameterContext::bindingElement() {
  return getRuleContext<JavaScriptParser::BindingElementContext>(0);
}


size_t JavaScriptParser::FormalParameterContext::getRuleIndex() const {
  return JavaScriptParser::RuleFormalParameter;
}

void JavaScriptParser::FormalParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameter(this);
}

void JavaScriptParser::FormalParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameter(this);
}

JavaScriptParser::FormalParameterContext* JavaScriptParser::formalParameter() {
  FormalParameterContext *_localctx = _tracker.createInstance<FormalParameterContext>(_ctx, getState());
  enterRule(_localctx, 240, JavaScriptParser::RuleFormalParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1330);
    bindingElement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RestParameterContext ------------------------------------------------------------------

JavaScriptParser::RestParameterContext::RestParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::BindingIdentifierContext* JavaScriptParser::RestParameterContext::bindingIdentifier() {
  return getRuleContext<JavaScriptParser::BindingIdentifierContext>(0);
}

JavaScriptParser::BindingPatternContext* JavaScriptParser::RestParameterContext::bindingPattern() {
  return getRuleContext<JavaScriptParser::BindingPatternContext>(0);
}


size_t JavaScriptParser::RestParameterContext::getRuleIndex() const {
  return JavaScriptParser::RuleRestParameter;
}

void JavaScriptParser::RestParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRestParameter(this);
}

void JavaScriptParser::RestParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRestParameter(this);
}

JavaScriptParser::RestParameterContext* JavaScriptParser::restParameter() {
  RestParameterContext *_localctx = _tracker.createInstance<RestParameterContext>(_ctx, getState());
  enterRule(_localctx, 242, JavaScriptParser::RuleRestParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1336);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1332);
      match(JavaScriptParser::T__95);
      setState(1333);
      bindingIdentifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1334);
      match(JavaScriptParser::T__95);
      setState(1335);
      bindingPattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingElementContext ------------------------------------------------------------------

JavaScriptParser::BindingElementContext::BindingElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::BindingIdentifierContext* JavaScriptParser::BindingElementContext::bindingIdentifier() {
  return getRuleContext<JavaScriptParser::BindingIdentifierContext>(0);
}

JavaScriptParser::InitializerContext* JavaScriptParser::BindingElementContext::initializer() {
  return getRuleContext<JavaScriptParser::InitializerContext>(0);
}

JavaScriptParser::BindingPatternContext* JavaScriptParser::BindingElementContext::bindingPattern() {
  return getRuleContext<JavaScriptParser::BindingPatternContext>(0);
}


size_t JavaScriptParser::BindingElementContext::getRuleIndex() const {
  return JavaScriptParser::RuleBindingElement;
}

void JavaScriptParser::BindingElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBindingElement(this);
}

void JavaScriptParser::BindingElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBindingElement(this);
}

JavaScriptParser::BindingElementContext* JavaScriptParser::bindingElement() {
  BindingElementContext *_localctx = _tracker.createInstance<BindingElementContext>(_ctx, getState());
  enterRule(_localctx, 244, JavaScriptParser::RuleBindingElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1346);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser::T__23:
      case JavaScriptParser::T__103:
      case JavaScriptParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1338);
        bindingIdentifier();
        setState(1340);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaScriptParser::T__42) {
          setState(1339);
          initializer();
        }
        break;
      }

      case JavaScriptParser::T__3:
      case JavaScriptParser::T__90: {
        enterOuterAlt(_localctx, 2);
        setState(1342);
        bindingPattern();
        setState(1344);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaScriptParser::T__42) {
          setState(1343);
          initializer();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingPatternContext ------------------------------------------------------------------

JavaScriptParser::BindingPatternContext::BindingPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::ObjectBindingPatternContext* JavaScriptParser::BindingPatternContext::objectBindingPattern() {
  return getRuleContext<JavaScriptParser::ObjectBindingPatternContext>(0);
}

JavaScriptParser::ArrayBindingPatternContext* JavaScriptParser::BindingPatternContext::arrayBindingPattern() {
  return getRuleContext<JavaScriptParser::ArrayBindingPatternContext>(0);
}


size_t JavaScriptParser::BindingPatternContext::getRuleIndex() const {
  return JavaScriptParser::RuleBindingPattern;
}

void JavaScriptParser::BindingPatternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBindingPattern(this);
}

void JavaScriptParser::BindingPatternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBindingPattern(this);
}

JavaScriptParser::BindingPatternContext* JavaScriptParser::bindingPattern() {
  BindingPatternContext *_localctx = _tracker.createInstance<BindingPatternContext>(_ctx, getState());
  enterRule(_localctx, 246, JavaScriptParser::RuleBindingPattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1350);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser::T__3: {
        enterOuterAlt(_localctx, 1);
        setState(1348);
        objectBindingPattern();
        break;
      }

      case JavaScriptParser::T__90: {
        enterOuterAlt(_localctx, 2);
        setState(1349);
        arrayBindingPattern();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectBindingPatternContext ------------------------------------------------------------------

JavaScriptParser::ObjectBindingPatternContext::ObjectBindingPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::BindingPropertyListContext* JavaScriptParser::ObjectBindingPatternContext::bindingPropertyList() {
  return getRuleContext<JavaScriptParser::BindingPropertyListContext>(0);
}


size_t JavaScriptParser::ObjectBindingPatternContext::getRuleIndex() const {
  return JavaScriptParser::RuleObjectBindingPattern;
}

void JavaScriptParser::ObjectBindingPatternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObjectBindingPattern(this);
}

void JavaScriptParser::ObjectBindingPatternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObjectBindingPattern(this);
}

JavaScriptParser::ObjectBindingPatternContext* JavaScriptParser::objectBindingPattern() {
  ObjectBindingPatternContext *_localctx = _tracker.createInstance<ObjectBindingPatternContext>(_ctx, getState());
  enterRule(_localctx, 248, JavaScriptParser::RuleObjectBindingPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1362);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1352);
      match(JavaScriptParser::T__3);
      setState(1354);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 5496450762626) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & 580539428048385) != 0)) {
        setState(1353);
        bindingPropertyList();
      }
      setState(1356);
      match(JavaScriptParser::T__4);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1357);
      match(JavaScriptParser::T__3);
      setState(1358);
      bindingPropertyList();
      setState(1359);
      match(JavaScriptParser::T__15);
      setState(1360);
      match(JavaScriptParser::T__4);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingPropertyListContext ------------------------------------------------------------------

JavaScriptParser::BindingPropertyListContext::BindingPropertyListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::BindingPropertyContext *> JavaScriptParser::BindingPropertyListContext::bindingProperty() {
  return getRuleContexts<JavaScriptParser::BindingPropertyContext>();
}

JavaScriptParser::BindingPropertyContext* JavaScriptParser::BindingPropertyListContext::bindingProperty(size_t i) {
  return getRuleContext<JavaScriptParser::BindingPropertyContext>(i);
}


size_t JavaScriptParser::BindingPropertyListContext::getRuleIndex() const {
  return JavaScriptParser::RuleBindingPropertyList;
}

void JavaScriptParser::BindingPropertyListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBindingPropertyList(this);
}

void JavaScriptParser::BindingPropertyListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBindingPropertyList(this);
}

JavaScriptParser::BindingPropertyListContext* JavaScriptParser::bindingPropertyList() {
  BindingPropertyListContext *_localctx = _tracker.createInstance<BindingPropertyListContext>(_ctx, getState());
  enterRule(_localctx, 250, JavaScriptParser::RuleBindingPropertyList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1364);
    bindingProperty();
    setState(1369);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1365);
        match(JavaScriptParser::T__15);
        setState(1366);
        bindingProperty(); 
      }
      setState(1371);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingPropertyContext ------------------------------------------------------------------

JavaScriptParser::BindingPropertyContext::BindingPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::BindingIdentifierContext* JavaScriptParser::BindingPropertyContext::bindingIdentifier() {
  return getRuleContext<JavaScriptParser::BindingIdentifierContext>(0);
}

JavaScriptParser::PropertyNameContext* JavaScriptParser::BindingPropertyContext::propertyName() {
  return getRuleContext<JavaScriptParser::PropertyNameContext>(0);
}

JavaScriptParser::BindingElementContext* JavaScriptParser::BindingPropertyContext::bindingElement() {
  return getRuleContext<JavaScriptParser::BindingElementContext>(0);
}


size_t JavaScriptParser::BindingPropertyContext::getRuleIndex() const {
  return JavaScriptParser::RuleBindingProperty;
}

void JavaScriptParser::BindingPropertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBindingProperty(this);
}

void JavaScriptParser::BindingPropertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBindingProperty(this);
}

JavaScriptParser::BindingPropertyContext* JavaScriptParser::bindingProperty() {
  BindingPropertyContext *_localctx = _tracker.createInstance<BindingPropertyContext>(_ctx, getState());
  enterRule(_localctx, 252, JavaScriptParser::RuleBindingProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1379);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1372);
      bindingIdentifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1373);
      propertyName();
      setState(1374);
      match(JavaScriptParser::T__29);
      setState(1375);
      bindingElement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1377);
      match(JavaScriptParser::T__95);
      setState(1378);
      bindingIdentifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayBindingPatternContext ------------------------------------------------------------------

JavaScriptParser::ArrayBindingPatternContext::ArrayBindingPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::BindingElementListContext* JavaScriptParser::ArrayBindingPatternContext::bindingElementList() {
  return getRuleContext<JavaScriptParser::BindingElementListContext>(0);
}


size_t JavaScriptParser::ArrayBindingPatternContext::getRuleIndex() const {
  return JavaScriptParser::RuleArrayBindingPattern;
}

void JavaScriptParser::ArrayBindingPatternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayBindingPattern(this);
}

void JavaScriptParser::ArrayBindingPatternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayBindingPattern(this);
}

JavaScriptParser::ArrayBindingPatternContext* JavaScriptParser::arrayBindingPattern() {
  ArrayBindingPatternContext *_localctx = _tracker.createInstance<ArrayBindingPatternContext>(_ctx, getState());
  enterRule(_localctx, 254, JavaScriptParser::RuleArrayBindingPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1381);
    match(JavaScriptParser::T__90);
    setState(1383);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 16842768) != 0) || ((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 4294975489) != 0)) {
      setState(1382);
      bindingElementList();
    }
    setState(1385);
    match(JavaScriptParser::T__91);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingElementListContext ------------------------------------------------------------------

JavaScriptParser::BindingElementListContext::BindingElementListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser::BindingElementContext *> JavaScriptParser::BindingElementListContext::bindingElement() {
  return getRuleContexts<JavaScriptParser::BindingElementContext>();
}

JavaScriptParser::BindingElementContext* JavaScriptParser::BindingElementListContext::bindingElement(size_t i) {
  return getRuleContext<JavaScriptParser::BindingElementContext>(i);
}

std::vector<JavaScriptParser::BindingElisionContext *> JavaScriptParser::BindingElementListContext::bindingElision() {
  return getRuleContexts<JavaScriptParser::BindingElisionContext>();
}

JavaScriptParser::BindingElisionContext* JavaScriptParser::BindingElementListContext::bindingElision(size_t i) {
  return getRuleContext<JavaScriptParser::BindingElisionContext>(i);
}


size_t JavaScriptParser::BindingElementListContext::getRuleIndex() const {
  return JavaScriptParser::RuleBindingElementList;
}

void JavaScriptParser::BindingElementListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBindingElementList(this);
}

void JavaScriptParser::BindingElementListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBindingElementList(this);
}

JavaScriptParser::BindingElementListContext* JavaScriptParser::bindingElementList() {
  BindingElementListContext *_localctx = _tracker.createInstance<BindingElementListContext>(_ctx, getState());
  enterRule(_localctx, 256, JavaScriptParser::RuleBindingElementList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1388);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__15) {
      setState(1387);
      bindingElision();
    }
    setState(1390);
    bindingElement();
    setState(1398);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1391);
        match(JavaScriptParser::T__15);
        setState(1393);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaScriptParser::T__15) {
          setState(1392);
          bindingElision();
        }
        setState(1395);
        bindingElement(); 
      }
      setState(1400);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx);
    }
    setState(1405);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser::T__15) {
      setState(1401);
      match(JavaScriptParser::T__15);
      setState(1403);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaScriptParser::T__15) {
        setState(1402);
        bindingElision();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingElisionContext ------------------------------------------------------------------

JavaScriptParser::BindingElisionContext::BindingElisionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaScriptParser::BindingElisionContext::getRuleIndex() const {
  return JavaScriptParser::RuleBindingElision;
}

void JavaScriptParser::BindingElisionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBindingElision(this);
}

void JavaScriptParser::BindingElisionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBindingElision(this);
}

JavaScriptParser::BindingElisionContext* JavaScriptParser::bindingElision() {
  BindingElisionContext *_localctx = _tracker.createInstance<BindingElisionContext>(_ctx, getState());
  enterRule(_localctx, 258, JavaScriptParser::RuleBindingElision);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1407);
    match(JavaScriptParser::T__15);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionBodyContext ------------------------------------------------------------------

JavaScriptParser::FunctionBodyContext::FunctionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::SourceElementsContext* JavaScriptParser::FunctionBodyContext::sourceElements() {
  return getRuleContext<JavaScriptParser::SourceElementsContext>(0);
}


size_t JavaScriptParser::FunctionBodyContext::getRuleIndex() const {
  return JavaScriptParser::RuleFunctionBody;
}

void JavaScriptParser::FunctionBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionBody(this);
}

void JavaScriptParser::FunctionBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionBody(this);
}

JavaScriptParser::FunctionBodyContext* JavaScriptParser::functionBody() {
  FunctionBodyContext *_localctx = _tracker.createInstance<FunctionBodyContext>(_ctx, getState());
  enterRule(_localctx, 260, JavaScriptParser::RuleFunctionBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1410);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5277398518166) != 0) || ((((_la - 78) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 78)) & 53841942953955) != 0)) {
      setState(1409);
      sourceElements();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializerContext ------------------------------------------------------------------

JavaScriptParser::InitializerContext::InitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::AssignmentExpressionContext* JavaScriptParser::InitializerContext::assignmentExpression() {
  return getRuleContext<JavaScriptParser::AssignmentExpressionContext>(0);
}


size_t JavaScriptParser::InitializerContext::getRuleIndex() const {
  return JavaScriptParser::RuleInitializer;
}

void JavaScriptParser::InitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializer(this);
}

void JavaScriptParser::InitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializer(this);
}

JavaScriptParser::InitializerContext* JavaScriptParser::initializer() {
  InitializerContext *_localctx = _tracker.createInstance<InitializerContext>(_ctx, getState());
  enterRule(_localctx, 262, JavaScriptParser::RuleInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1412);
    match(JavaScriptParser::T__42);
    setState(1413);
    assignmentExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingIdentifierContext ------------------------------------------------------------------

JavaScriptParser::BindingIdentifierContext::BindingIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::IdentifierContext* JavaScriptParser::BindingIdentifierContext::identifier() {
  return getRuleContext<JavaScriptParser::IdentifierContext>(0);
}


size_t JavaScriptParser::BindingIdentifierContext::getRuleIndex() const {
  return JavaScriptParser::RuleBindingIdentifier;
}

void JavaScriptParser::BindingIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBindingIdentifier(this);
}

void JavaScriptParser::BindingIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBindingIdentifier(this);
}

JavaScriptParser::BindingIdentifierContext* JavaScriptParser::bindingIdentifier() {
  BindingIdentifierContext *_localctx = _tracker.createInstance<BindingIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 264, JavaScriptParser::RuleBindingIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1418);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1415);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1416);
      match(JavaScriptParser::T__103);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1417);
      match(JavaScriptParser::T__23);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

JavaScriptParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser::IdentifierContext::IDENTIFIER() {
  return getToken(JavaScriptParser::IDENTIFIER, 0);
}


size_t JavaScriptParser::IdentifierContext::getRuleIndex() const {
  return JavaScriptParser::RuleIdentifier;
}

void JavaScriptParser::IdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier(this);
}

void JavaScriptParser::IdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier(this);
}

JavaScriptParser::IdentifierContext* JavaScriptParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 266, JavaScriptParser::RuleIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1420);
    _la = _input->LA(1);
    if (!(_la == JavaScriptParser::T__23 || _la == JavaScriptParser::T__103

    || _la == JavaScriptParser::IDENTIFIER)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierNameContext ------------------------------------------------------------------

JavaScriptParser::IdentifierNameContext::IdentifierNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser::IdentifierNameContext::IDENTIFIER() {
  return getToken(JavaScriptParser::IDENTIFIER, 0);
}

JavaScriptParser::ReservedWordContext* JavaScriptParser::IdentifierNameContext::reservedWord() {
  return getRuleContext<JavaScriptParser::ReservedWordContext>(0);
}


size_t JavaScriptParser::IdentifierNameContext::getRuleIndex() const {
  return JavaScriptParser::RuleIdentifierName;
}

void JavaScriptParser::IdentifierNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifierName(this);
}

void JavaScriptParser::IdentifierNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifierName(this);
}

JavaScriptParser::IdentifierNameContext* JavaScriptParser::identifierName() {
  IdentifierNameContext *_localctx = _tracker.createInstance<IdentifierNameContext>(_ctx, getState());
  enterRule(_localctx, 268, JavaScriptParser::RuleIdentifierName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1424);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1422);
        match(JavaScriptParser::IDENTIFIER);
        break;
      }

      case JavaScriptParser::T__0:
      case JavaScriptParser::T__6:
      case JavaScriptParser::T__7:
      case JavaScriptParser::T__8:
      case JavaScriptParser::T__9:
      case JavaScriptParser::T__13:
      case JavaScriptParser::T__14:
      case JavaScriptParser::T__16:
      case JavaScriptParser::T__17:
      case JavaScriptParser::T__18:
      case JavaScriptParser::T__19:
      case JavaScriptParser::T__20:
      case JavaScriptParser::T__21:
      case JavaScriptParser::T__22:
      case JavaScriptParser::T__23:
      case JavaScriptParser::T__25:
      case JavaScriptParser::T__26:
      case JavaScriptParser::T__27:
      case JavaScriptParser::T__28:
      case JavaScriptParser::T__30:
      case JavaScriptParser::T__31:
      case JavaScriptParser::T__32:
      case JavaScriptParser::T__33:
      case JavaScriptParser::T__34:
      case JavaScriptParser::T__35:
      case JavaScriptParser::T__36:
      case JavaScriptParser::T__37:
      case JavaScriptParser::T__38:
      case JavaScriptParser::T__41:
      case JavaScriptParser::T__73:
      case JavaScriptParser::T__82:
      case JavaScriptParser::T__83:
      case JavaScriptParser::T__84:
      case JavaScriptParser::T__89:
      case JavaScriptParser::T__94:
      case JavaScriptParser::T__98:
      case JavaScriptParser::T__99:
      case JavaScriptParser::T__100:
      case JavaScriptParser::T__101:
      case JavaScriptParser::T__103:
      case JavaScriptParser::T__105:
      case JavaScriptParser::T__106:
      case JavaScriptParser::T__107:
      case JavaScriptParser::T__108:
      case JavaScriptParser::T__109:
      case JavaScriptParser::T__110:
      case JavaScriptParser::T__111: {
        enterOuterAlt(_localctx, 2);
        setState(1423);
        reservedWord();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReservedWordContext ------------------------------------------------------------------

JavaScriptParser::ReservedWordContext::ReservedWordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser::KeywordContext* JavaScriptParser::ReservedWordContext::keyword() {
  return getRuleContext<JavaScriptParser::KeywordContext>(0);
}

JavaScriptParser::FutureReservedWordContext* JavaScriptParser::ReservedWordContext::futureReservedWord() {
  return getRuleContext<JavaScriptParser::FutureReservedWordContext>(0);
}

JavaScriptParser::NullLiteralContext* JavaScriptParser::ReservedWordContext::nullLiteral() {
  return getRuleContext<JavaScriptParser::NullLiteralContext>(0);
}

JavaScriptParser::BooleanLiteralContext* JavaScriptParser::ReservedWordContext::booleanLiteral() {
  return getRuleContext<JavaScriptParser::BooleanLiteralContext>(0);
}


size_t JavaScriptParser::ReservedWordContext::getRuleIndex() const {
  return JavaScriptParser::RuleReservedWord;
}

void JavaScriptParser::ReservedWordContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReservedWord(this);
}

void JavaScriptParser::ReservedWordContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReservedWord(this);
}

JavaScriptParser::ReservedWordContext* JavaScriptParser::reservedWord() {
  ReservedWordContext *_localctx = _tracker.createInstance<ReservedWordContext>(_ctx, getState());
  enterRule(_localctx, 270, JavaScriptParser::RuleReservedWord);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1430);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser::T__0:
      case JavaScriptParser::T__6:
      case JavaScriptParser::T__7:
      case JavaScriptParser::T__8:
      case JavaScriptParser::T__9:
      case JavaScriptParser::T__13:
      case JavaScriptParser::T__14:
      case JavaScriptParser::T__16:
      case JavaScriptParser::T__17:
      case JavaScriptParser::T__18:
      case JavaScriptParser::T__19:
      case JavaScriptParser::T__20:
      case JavaScriptParser::T__21:
      case JavaScriptParser::T__22:
      case JavaScriptParser::T__23:
      case JavaScriptParser::T__25:
      case JavaScriptParser::T__26:
      case JavaScriptParser::T__27:
      case JavaScriptParser::T__28:
      case JavaScriptParser::T__30:
      case JavaScriptParser::T__31:
      case JavaScriptParser::T__32:
      case JavaScriptParser::T__33:
      case JavaScriptParser::T__34:
      case JavaScriptParser::T__35:
      case JavaScriptParser::T__36:
      case JavaScriptParser::T__37:
      case JavaScriptParser::T__38:
      case JavaScriptParser::T__41:
      case JavaScriptParser::T__73:
      case JavaScriptParser::T__82:
      case JavaScriptParser::T__83:
      case JavaScriptParser::T__84:
      case JavaScriptParser::T__89:
      case JavaScriptParser::T__94:
      case JavaScriptParser::T__98:
      case JavaScriptParser::T__103: {
        enterOuterAlt(_localctx, 1);
        setState(1426);
        keyword();
        break;
      }

      case JavaScriptParser::T__105:
      case JavaScriptParser::T__106:
      case JavaScriptParser::T__107:
      case JavaScriptParser::T__108:
      case JavaScriptParser::T__109:
      case JavaScriptParser::T__110:
      case JavaScriptParser::T__111: {
        enterOuterAlt(_localctx, 2);
        setState(1427);
        futureReservedWord();
        break;
      }

      case JavaScriptParser::T__99: {
        enterOuterAlt(_localctx, 3);
        setState(1428);
        nullLiteral();
        break;
      }

      case JavaScriptParser::T__100:
      case JavaScriptParser::T__101: {
        enterOuterAlt(_localctx, 4);
        setState(1429);
        booleanLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeywordContext ------------------------------------------------------------------

JavaScriptParser::KeywordContext::KeywordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaScriptParser::KeywordContext::getRuleIndex() const {
  return JavaScriptParser::RuleKeyword;
}

void JavaScriptParser::KeywordContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKeyword(this);
}

void JavaScriptParser::KeywordContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKeyword(this);
}

JavaScriptParser::KeywordContext* JavaScriptParser::keyword() {
  KeywordContext *_localctx = _tracker.createInstance<KeywordContext>(_ctx, getState());
  enterRule(_localctx, 272, JavaScriptParser::RuleKeyword);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1432);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5496450762626) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 1109462529) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FutureReservedWordContext ------------------------------------------------------------------

JavaScriptParser::FutureReservedWordContext::FutureReservedWordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaScriptParser::FutureReservedWordContext::getRuleIndex() const {
  return JavaScriptParser::RuleFutureReservedWord;
}

void JavaScriptParser::FutureReservedWordContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFutureReservedWord(this);
}

void JavaScriptParser::FutureReservedWordContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFutureReservedWord(this);
}

JavaScriptParser::FutureReservedWordContext* JavaScriptParser::futureReservedWord() {
  FutureReservedWordContext *_localctx = _tracker.createInstance<FutureReservedWordContext>(_ctx, getState());
  enterRule(_localctx, 274, JavaScriptParser::RuleFutureReservedWord);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1434);
    _la = _input->LA(1);
    if (!(((((_la - 106) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 106)) & 127) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool JavaScriptParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 82: return callExpressionSempred(antlrcpp::downCast<CallExpressionContext *>(context), predicateIndex);
    case 88: return memberExpressionSempred(antlrcpp::downCast<MemberExpressionContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool JavaScriptParser::callExpressionSempred(CallExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 6);
    case 1: return precpred(_ctx, 5);
    case 2: return precpred(_ctx, 4);
    case 3: return precpred(_ctx, 3);
    case 4: return precpred(_ctx, 2);
    case 5: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool JavaScriptParser::memberExpressionSempred(MemberExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 6: return precpred(_ctx, 9);
    case 7: return precpred(_ctx, 8);
    case 8: return precpred(_ctx, 7);
    case 9: return precpred(_ctx, 2);
    case 10: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void JavaScriptParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  javascriptParserInitialize();
#else
  ::antlr4::internal::call_once(javascriptParserOnceFlag, javascriptParserInitialize);
#endif
}
