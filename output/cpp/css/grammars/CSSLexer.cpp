
// Generated from grammars/CSS.g4 by ANTLR 4.13.1


#include "CSSLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct CSSLexerStaticData final {
  CSSLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CSSLexerStaticData(const CSSLexerStaticData&) = delete;
  CSSLexerStaticData(CSSLexerStaticData&&) = delete;
  CSSLexerStaticData& operator=(const CSSLexerStaticData&) = delete;
  CSSLexerStaticData& operator=(CSSLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag csslexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CSSLexerStaticData *csslexerLexerStaticData = nullptr;

void csslexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (csslexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(csslexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CSSLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "COMMENT", "IMPORT", 
      "MEDIA", "KEYFRAMES", "FONT_FACE", "SUPPORTS", "PAGE", "NAMESPACE", 
      "CHARSET", "VIEWPORT", "COUNTER_STYLE", "FONT_FEATURE_VALUES", "PROPERTY", 
      "ONLY", "NOT", "AND", "OR", "FROM", "TO", "IMPORTANT", "PX", "EM", 
      "REM", "VH", "VW", "VMIN", "VMAX", "CH", "EX", "CM", "MM", "IN", "PT", 
      "PC", "DEG", "RAD", "GRAD", "TURN", "S", "MS", "HZ", "KHZ", "DPI", 
      "DPCM", "DPPX", "VARIABLE", "NUMBER", "STRING_LITERAL", "URI", "IDENTIFIER", 
      "HEX_DIGIT", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'{'", "'}'", "','", "'>'", "'+'", "'~'", "'*'", "'#'", "'.'", 
      "'['", "']'", "'='", "'~='", "'|='", "'^='", "'$='", "'*='", "':'", 
      "'('", "')'", "'is'", "'where'", "'has'", "'::'", "';'", "'-'", "'/'", 
      "'%'", "'calc'", "'@'", "", "'@import'", "'@media'", "'@keyframes'", 
      "'@font-face'", "'@supports'", "'@page'", "'@namespace'", "'@charset'", 
      "'@viewport'", "'@counter-style'", "'@font-feature-values'", "'@property'", 
      "'only'", "'not'", "'and'", "'or'", "'from'", "'to'", "'!important'", 
      "'px'", "'em'", "'rem'", "'vh'", "'vw'", "'vmin'", "'vmax'", "'ch'", 
      "'ex'", "'cm'", "'mm'", "'in'", "'pt'", "'pc'", "'deg'", "'rad'", 
      "'grad'", "'turn'", "'s'", "'ms'", "'Hz'", "'kHz'", "'dpi'", "'dpcm'", 
      "'dppx'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "COMMENT", 
      "IMPORT", "MEDIA", "KEYFRAMES", "FONT_FACE", "SUPPORTS", "PAGE", "NAMESPACE", 
      "CHARSET", "VIEWPORT", "COUNTER_STYLE", "FONT_FEATURE_VALUES", "PROPERTY", 
      "ONLY", "NOT", "AND", "OR", "FROM", "TO", "IMPORTANT", "PX", "EM", 
      "REM", "VH", "VW", "VMIN", "VMAX", "CH", "EX", "CM", "MM", "IN", "PT", 
      "PC", "DEG", "RAD", "GRAD", "TURN", "S", "MS", "HZ", "KHZ", "DPI", 
      "DPCM", "DPPX", "VARIABLE", "NUMBER", "STRING_LITERAL", "URI", "IDENTIFIER", 
      "HEX_DIGIT", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,82,581,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,1,0,1,0,1,1,1,1,1,2,1,2,
  	1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,
  	1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,
  	1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,
  	1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,
  	1,30,5,30,246,8,30,10,30,12,30,249,9,30,1,30,1,30,1,30,1,30,1,30,1,31,
  	1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
  	1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,
  	1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,
  	1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
  	1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,
  	1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,
  	1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
  	1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
  	1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,
  	1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,
  	1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,
  	1,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,
  	1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,59,
  	1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,
  	1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,67,
  	1,67,1,67,1,67,1,67,1,68,1,68,1,69,1,69,1,69,1,70,1,70,1,70,1,71,1,71,
  	1,71,1,71,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,74,1,74,1,74,
  	1,74,1,74,1,75,1,75,1,75,1,75,1,75,1,76,4,76,517,8,76,11,76,12,76,518,
  	1,76,1,76,4,76,523,8,76,11,76,12,76,524,3,76,527,8,76,1,77,1,77,1,77,
  	1,77,5,77,533,8,77,10,77,12,77,536,9,77,1,77,1,77,1,77,1,77,1,77,5,77,
  	543,8,77,10,77,12,77,546,9,77,1,77,3,77,549,8,77,1,78,1,78,1,78,1,78,
  	1,78,1,78,4,78,557,8,78,11,78,12,78,558,1,78,3,78,562,8,78,1,78,1,78,
  	1,79,1,79,5,79,568,8,79,10,79,12,79,571,9,79,1,80,1,80,1,81,4,81,576,
  	8,81,11,81,12,81,577,1,81,1,81,1,247,0,82,1,1,3,2,5,3,7,4,9,5,11,6,13,
  	7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
  	19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
  	61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
  	42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,
  	53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,
  	63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,143,72,145,
  	73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,161,81,163,82,1,0,
  	8,1,0,48,57,3,0,10,10,13,13,34,34,3,0,10,10,13,13,39,39,1,0,41,41,3,0,
  	65,90,95,95,97,122,5,0,45,45,48,57,65,90,95,95,97,122,3,0,48,57,65,70,
  	97,102,3,0,9,10,13,13,32,32,593,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
  	7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
  	0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
  	0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
  	1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
  	0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
  	0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
  	1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,
  	0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,
  	0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,
  	1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,
  	1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,
  	1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,
  	1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,
  	1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,
  	1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,
  	1,0,0,0,1,165,1,0,0,0,3,167,1,0,0,0,5,169,1,0,0,0,7,171,1,0,0,0,9,173,
  	1,0,0,0,11,175,1,0,0,0,13,177,1,0,0,0,15,179,1,0,0,0,17,181,1,0,0,0,19,
  	183,1,0,0,0,21,185,1,0,0,0,23,187,1,0,0,0,25,189,1,0,0,0,27,192,1,0,0,
  	0,29,195,1,0,0,0,31,198,1,0,0,0,33,201,1,0,0,0,35,204,1,0,0,0,37,206,
  	1,0,0,0,39,208,1,0,0,0,41,210,1,0,0,0,43,213,1,0,0,0,45,219,1,0,0,0,47,
  	223,1,0,0,0,49,226,1,0,0,0,51,228,1,0,0,0,53,230,1,0,0,0,55,232,1,0,0,
  	0,57,234,1,0,0,0,59,239,1,0,0,0,61,241,1,0,0,0,63,255,1,0,0,0,65,263,
  	1,0,0,0,67,270,1,0,0,0,69,281,1,0,0,0,71,292,1,0,0,0,73,302,1,0,0,0,75,
  	308,1,0,0,0,77,319,1,0,0,0,79,328,1,0,0,0,81,338,1,0,0,0,83,353,1,0,0,
  	0,85,374,1,0,0,0,87,384,1,0,0,0,89,389,1,0,0,0,91,393,1,0,0,0,93,397,
  	1,0,0,0,95,400,1,0,0,0,97,405,1,0,0,0,99,408,1,0,0,0,101,419,1,0,0,0,
  	103,422,1,0,0,0,105,425,1,0,0,0,107,429,1,0,0,0,109,432,1,0,0,0,111,435,
  	1,0,0,0,113,440,1,0,0,0,115,445,1,0,0,0,117,448,1,0,0,0,119,451,1,0,0,
  	0,121,454,1,0,0,0,123,457,1,0,0,0,125,460,1,0,0,0,127,463,1,0,0,0,129,
  	466,1,0,0,0,131,470,1,0,0,0,133,474,1,0,0,0,135,479,1,0,0,0,137,484,1,
  	0,0,0,139,486,1,0,0,0,141,489,1,0,0,0,143,492,1,0,0,0,145,496,1,0,0,0,
  	147,500,1,0,0,0,149,505,1,0,0,0,151,510,1,0,0,0,153,516,1,0,0,0,155,548,
  	1,0,0,0,157,550,1,0,0,0,159,565,1,0,0,0,161,572,1,0,0,0,163,575,1,0,0,
  	0,165,166,5,123,0,0,166,2,1,0,0,0,167,168,5,125,0,0,168,4,1,0,0,0,169,
  	170,5,44,0,0,170,6,1,0,0,0,171,172,5,62,0,0,172,8,1,0,0,0,173,174,5,43,
  	0,0,174,10,1,0,0,0,175,176,5,126,0,0,176,12,1,0,0,0,177,178,5,42,0,0,
  	178,14,1,0,0,0,179,180,5,35,0,0,180,16,1,0,0,0,181,182,5,46,0,0,182,18,
  	1,0,0,0,183,184,5,91,0,0,184,20,1,0,0,0,185,186,5,93,0,0,186,22,1,0,0,
  	0,187,188,5,61,0,0,188,24,1,0,0,0,189,190,5,126,0,0,190,191,5,61,0,0,
  	191,26,1,0,0,0,192,193,5,124,0,0,193,194,5,61,0,0,194,28,1,0,0,0,195,
  	196,5,94,0,0,196,197,5,61,0,0,197,30,1,0,0,0,198,199,5,36,0,0,199,200,
  	5,61,0,0,200,32,1,0,0,0,201,202,5,42,0,0,202,203,5,61,0,0,203,34,1,0,
  	0,0,204,205,5,58,0,0,205,36,1,0,0,0,206,207,5,40,0,0,207,38,1,0,0,0,208,
  	209,5,41,0,0,209,40,1,0,0,0,210,211,5,105,0,0,211,212,5,115,0,0,212,42,
  	1,0,0,0,213,214,5,119,0,0,214,215,5,104,0,0,215,216,5,101,0,0,216,217,
  	5,114,0,0,217,218,5,101,0,0,218,44,1,0,0,0,219,220,5,104,0,0,220,221,
  	5,97,0,0,221,222,5,115,0,0,222,46,1,0,0,0,223,224,5,58,0,0,224,225,5,
  	58,0,0,225,48,1,0,0,0,226,227,5,59,0,0,227,50,1,0,0,0,228,229,5,45,0,
  	0,229,52,1,0,0,0,230,231,5,47,0,0,231,54,1,0,0,0,232,233,5,37,0,0,233,
  	56,1,0,0,0,234,235,5,99,0,0,235,236,5,97,0,0,236,237,5,108,0,0,237,238,
  	5,99,0,0,238,58,1,0,0,0,239,240,5,64,0,0,240,60,1,0,0,0,241,242,5,47,
  	0,0,242,243,5,42,0,0,243,247,1,0,0,0,244,246,9,0,0,0,245,244,1,0,0,0,
  	246,249,1,0,0,0,247,248,1,0,0,0,247,245,1,0,0,0,248,250,1,0,0,0,249,247,
  	1,0,0,0,250,251,5,42,0,0,251,252,5,47,0,0,252,253,1,0,0,0,253,254,6,30,
  	0,0,254,62,1,0,0,0,255,256,5,64,0,0,256,257,5,105,0,0,257,258,5,109,0,
  	0,258,259,5,112,0,0,259,260,5,111,0,0,260,261,5,114,0,0,261,262,5,116,
  	0,0,262,64,1,0,0,0,263,264,5,64,0,0,264,265,5,109,0,0,265,266,5,101,0,
  	0,266,267,5,100,0,0,267,268,5,105,0,0,268,269,5,97,0,0,269,66,1,0,0,0,
  	270,271,5,64,0,0,271,272,5,107,0,0,272,273,5,101,0,0,273,274,5,121,0,
  	0,274,275,5,102,0,0,275,276,5,114,0,0,276,277,5,97,0,0,277,278,5,109,
  	0,0,278,279,5,101,0,0,279,280,5,115,0,0,280,68,1,0,0,0,281,282,5,64,0,
  	0,282,283,5,102,0,0,283,284,5,111,0,0,284,285,5,110,0,0,285,286,5,116,
  	0,0,286,287,5,45,0,0,287,288,5,102,0,0,288,289,5,97,0,0,289,290,5,99,
  	0,0,290,291,5,101,0,0,291,70,1,0,0,0,292,293,5,64,0,0,293,294,5,115,0,
  	0,294,295,5,117,0,0,295,296,5,112,0,0,296,297,5,112,0,0,297,298,5,111,
  	0,0,298,299,5,114,0,0,299,300,5,116,0,0,300,301,5,115,0,0,301,72,1,0,
  	0,0,302,303,5,64,0,0,303,304,5,112,0,0,304,305,5,97,0,0,305,306,5,103,
  	0,0,306,307,5,101,0,0,307,74,1,0,0,0,308,309,5,64,0,0,309,310,5,110,0,
  	0,310,311,5,97,0,0,311,312,5,109,0,0,312,313,5,101,0,0,313,314,5,115,
  	0,0,314,315,5,112,0,0,315,316,5,97,0,0,316,317,5,99,0,0,317,318,5,101,
  	0,0,318,76,1,0,0,0,319,320,5,64,0,0,320,321,5,99,0,0,321,322,5,104,0,
  	0,322,323,5,97,0,0,323,324,5,114,0,0,324,325,5,115,0,0,325,326,5,101,
  	0,0,326,327,5,116,0,0,327,78,1,0,0,0,328,329,5,64,0,0,329,330,5,118,0,
  	0,330,331,5,105,0,0,331,332,5,101,0,0,332,333,5,119,0,0,333,334,5,112,
  	0,0,334,335,5,111,0,0,335,336,5,114,0,0,336,337,5,116,0,0,337,80,1,0,
  	0,0,338,339,5,64,0,0,339,340,5,99,0,0,340,341,5,111,0,0,341,342,5,117,
  	0,0,342,343,5,110,0,0,343,344,5,116,0,0,344,345,5,101,0,0,345,346,5,114,
  	0,0,346,347,5,45,0,0,347,348,5,115,0,0,348,349,5,116,0,0,349,350,5,121,
  	0,0,350,351,5,108,0,0,351,352,5,101,0,0,352,82,1,0,0,0,353,354,5,64,0,
  	0,354,355,5,102,0,0,355,356,5,111,0,0,356,357,5,110,0,0,357,358,5,116,
  	0,0,358,359,5,45,0,0,359,360,5,102,0,0,360,361,5,101,0,0,361,362,5,97,
  	0,0,362,363,5,116,0,0,363,364,5,117,0,0,364,365,5,114,0,0,365,366,5,101,
  	0,0,366,367,5,45,0,0,367,368,5,118,0,0,368,369,5,97,0,0,369,370,5,108,
  	0,0,370,371,5,117,0,0,371,372,5,101,0,0,372,373,5,115,0,0,373,84,1,0,
  	0,0,374,375,5,64,0,0,375,376,5,112,0,0,376,377,5,114,0,0,377,378,5,111,
  	0,0,378,379,5,112,0,0,379,380,5,101,0,0,380,381,5,114,0,0,381,382,5,116,
  	0,0,382,383,5,121,0,0,383,86,1,0,0,0,384,385,5,111,0,0,385,386,5,110,
  	0,0,386,387,5,108,0,0,387,388,5,121,0,0,388,88,1,0,0,0,389,390,5,110,
  	0,0,390,391,5,111,0,0,391,392,5,116,0,0,392,90,1,0,0,0,393,394,5,97,0,
  	0,394,395,5,110,0,0,395,396,5,100,0,0,396,92,1,0,0,0,397,398,5,111,0,
  	0,398,399,5,114,0,0,399,94,1,0,0,0,400,401,5,102,0,0,401,402,5,114,0,
  	0,402,403,5,111,0,0,403,404,5,109,0,0,404,96,1,0,0,0,405,406,5,116,0,
  	0,406,407,5,111,0,0,407,98,1,0,0,0,408,409,5,33,0,0,409,410,5,105,0,0,
  	410,411,5,109,0,0,411,412,5,112,0,0,412,413,5,111,0,0,413,414,5,114,0,
  	0,414,415,5,116,0,0,415,416,5,97,0,0,416,417,5,110,0,0,417,418,5,116,
  	0,0,418,100,1,0,0,0,419,420,5,112,0,0,420,421,5,120,0,0,421,102,1,0,0,
  	0,422,423,5,101,0,0,423,424,5,109,0,0,424,104,1,0,0,0,425,426,5,114,0,
  	0,426,427,5,101,0,0,427,428,5,109,0,0,428,106,1,0,0,0,429,430,5,118,0,
  	0,430,431,5,104,0,0,431,108,1,0,0,0,432,433,5,118,0,0,433,434,5,119,0,
  	0,434,110,1,0,0,0,435,436,5,118,0,0,436,437,5,109,0,0,437,438,5,105,0,
  	0,438,439,5,110,0,0,439,112,1,0,0,0,440,441,5,118,0,0,441,442,5,109,0,
  	0,442,443,5,97,0,0,443,444,5,120,0,0,444,114,1,0,0,0,445,446,5,99,0,0,
  	446,447,5,104,0,0,447,116,1,0,0,0,448,449,5,101,0,0,449,450,5,120,0,0,
  	450,118,1,0,0,0,451,452,5,99,0,0,452,453,5,109,0,0,453,120,1,0,0,0,454,
  	455,5,109,0,0,455,456,5,109,0,0,456,122,1,0,0,0,457,458,5,105,0,0,458,
  	459,5,110,0,0,459,124,1,0,0,0,460,461,5,112,0,0,461,462,5,116,0,0,462,
  	126,1,0,0,0,463,464,5,112,0,0,464,465,5,99,0,0,465,128,1,0,0,0,466,467,
  	5,100,0,0,467,468,5,101,0,0,468,469,5,103,0,0,469,130,1,0,0,0,470,471,
  	5,114,0,0,471,472,5,97,0,0,472,473,5,100,0,0,473,132,1,0,0,0,474,475,
  	5,103,0,0,475,476,5,114,0,0,476,477,5,97,0,0,477,478,5,100,0,0,478,134,
  	1,0,0,0,479,480,5,116,0,0,480,481,5,117,0,0,481,482,5,114,0,0,482,483,
  	5,110,0,0,483,136,1,0,0,0,484,485,5,115,0,0,485,138,1,0,0,0,486,487,5,
  	109,0,0,487,488,5,115,0,0,488,140,1,0,0,0,489,490,5,72,0,0,490,491,5,
  	122,0,0,491,142,1,0,0,0,492,493,5,107,0,0,493,494,5,72,0,0,494,495,5,
  	122,0,0,495,144,1,0,0,0,496,497,5,100,0,0,497,498,5,112,0,0,498,499,5,
  	105,0,0,499,146,1,0,0,0,500,501,5,100,0,0,501,502,5,112,0,0,502,503,5,
  	99,0,0,503,504,5,109,0,0,504,148,1,0,0,0,505,506,5,100,0,0,506,507,5,
  	112,0,0,507,508,5,112,0,0,508,509,5,120,0,0,509,150,1,0,0,0,510,511,5,
  	45,0,0,511,512,5,45,0,0,512,513,1,0,0,0,513,514,3,159,79,0,514,152,1,
  	0,0,0,515,517,7,0,0,0,516,515,1,0,0,0,517,518,1,0,0,0,518,516,1,0,0,0,
  	518,519,1,0,0,0,519,526,1,0,0,0,520,522,5,46,0,0,521,523,7,0,0,0,522,
  	521,1,0,0,0,523,524,1,0,0,0,524,522,1,0,0,0,524,525,1,0,0,0,525,527,1,
  	0,0,0,526,520,1,0,0,0,526,527,1,0,0,0,527,154,1,0,0,0,528,534,5,34,0,
  	0,529,533,8,1,0,0,530,531,5,92,0,0,531,533,5,34,0,0,532,529,1,0,0,0,532,
  	530,1,0,0,0,533,536,1,0,0,0,534,532,1,0,0,0,534,535,1,0,0,0,535,537,1,
  	0,0,0,536,534,1,0,0,0,537,549,5,34,0,0,538,544,5,39,0,0,539,543,8,2,0,
  	0,540,541,5,92,0,0,541,543,5,39,0,0,542,539,1,0,0,0,542,540,1,0,0,0,543,
  	546,1,0,0,0,544,542,1,0,0,0,544,545,1,0,0,0,545,547,1,0,0,0,546,544,1,
  	0,0,0,547,549,5,39,0,0,548,528,1,0,0,0,548,538,1,0,0,0,549,156,1,0,0,
  	0,550,551,5,117,0,0,551,552,5,114,0,0,552,553,5,108,0,0,553,554,5,40,
  	0,0,554,561,1,0,0,0,555,557,8,3,0,0,556,555,1,0,0,0,557,558,1,0,0,0,558,
  	556,1,0,0,0,558,559,1,0,0,0,559,562,1,0,0,0,560,562,3,155,77,0,561,556,
  	1,0,0,0,561,560,1,0,0,0,562,563,1,0,0,0,563,564,5,41,0,0,564,158,1,0,
  	0,0,565,569,7,4,0,0,566,568,7,5,0,0,567,566,1,0,0,0,568,571,1,0,0,0,569,
  	567,1,0,0,0,569,570,1,0,0,0,570,160,1,0,0,0,571,569,1,0,0,0,572,573,7,
  	6,0,0,573,162,1,0,0,0,574,576,7,7,0,0,575,574,1,0,0,0,576,577,1,0,0,0,
  	577,575,1,0,0,0,577,578,1,0,0,0,578,579,1,0,0,0,579,580,6,81,1,0,580,
  	164,1,0,0,0,14,0,247,518,524,526,532,534,542,544,548,558,561,569,577,
  	2,0,1,0,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  csslexerLexerStaticData = staticData.release();
}

}

CSSLexer::CSSLexer(CharStream *input) : Lexer(input) {
  CSSLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *csslexerLexerStaticData->atn, csslexerLexerStaticData->decisionToDFA, csslexerLexerStaticData->sharedContextCache);
}

CSSLexer::~CSSLexer() {
  delete _interpreter;
}

std::string CSSLexer::getGrammarFileName() const {
  return "CSS.g4";
}

const std::vector<std::string>& CSSLexer::getRuleNames() const {
  return csslexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& CSSLexer::getChannelNames() const {
  return csslexerLexerStaticData->channelNames;
}

const std::vector<std::string>& CSSLexer::getModeNames() const {
  return csslexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& CSSLexer::getVocabulary() const {
  return csslexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CSSLexer::getSerializedATN() const {
  return csslexerLexerStaticData->serializedATN;
}

const atn::ATN& CSSLexer::getATN() const {
  return *csslexerLexerStaticData->atn;
}




void CSSLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  csslexerLexerInitialize();
#else
  ::antlr4::internal::call_once(csslexerLexerOnceFlag, csslexerLexerInitialize);
#endif
}
